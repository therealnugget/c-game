; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35211.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	plrGrounded
PUBLIC	plrDmg
PUBLIC	??_C@_04EAPMNACM@idle@				; `string'
PUBLIC	??_C@_04PHLAALHH@Walk@				; `string'
PUBLIC	??_C@_03LGMJKEGG@run@				; `string'
PUBLIC	??_C@_0BA@KADFEIOO@idle?5transition@		; `string'
PUBLIC	??_C@_04NJIOBGCF@jump@				; `string'
PUBLIC	??_C@_07BBGBODP@attack1@			; `string'
PUBLIC	??_C@_06BALNJMNP@player@			; `string'
PUBLIC	??_C@_0CO@JODNKDJP@images?1Retro?5Inventory?1Original@ ; `string'
PUBLIC	??_C@_0DE@IMENIABH@images?1Retro?5Inventory?1Original@ ; `string'
PUBLIC	jumpForce
PUBLIC	nLastFrmJmp
PUBLIC	attack1ColOffsets
PUBLIC	attk1MoveAmnts
PUBLIC	runSpdAddFact
PUBLIC	origPlayerSpeed
PUBLIC	playerAccel
PUBLIC	minJumpET
PUBLIC	attack1MoveAmnt
EXTRN	__imp_glDeleteTextures:PROC
EXTRN	__imp_calloc:PROC
COMM	groundedLastFrm:BYTE
COMM	negPlrPos:QWORD
COMM	playerSpeed:DWORD
COMM	jumpET:DWORD
COMM	attack1Col:QWORD:02H
COMM	jumped:BYTE
COMM	scaleX:DWORD
COMM	pressedMoveKey:BYTE
COMM	lastFrmJmp:BYTE
COMM	movingX:BYTE
COMM	plrAnim:QWORD
COMM	jumping:BYTE
COMM	playerEntity:QWORD
_DATA	ENDS
;	COMDAT ??_C@_0DE@IMENIABH@images?1Retro?5Inventory?1Original@
CONST	SEGMENT
??_C@_0DE@IMENIABH@images?1Retro?5Inventory?1Original@ DB 'images/Retro I'
	DB	'nventory/Original/Health_01_Bar01.png', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@JODNKDJP@images?1Retro?5Inventory?1Original@
CONST	SEGMENT
??_C@_0CO@JODNKDJP@images?1Retro?5Inventory?1Original@ DB 'images/Retro I'
	DB	'nventory/Original/Health_01.png', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BALNJMNP@player@
CONST	SEGMENT
??_C@_06BALNJMNP@player@ DB 'player', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BBGBODP@attack1@
CONST	SEGMENT
??_C@_07BBGBODP@attack1@ DB 'attack1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NJIOBGCF@jump@
CONST	SEGMENT
??_C@_04NJIOBGCF@jump@ DB 'jump', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KADFEIOO@idle?5transition@
CONST	SEGMENT
??_C@_0BA@KADFEIOO@idle?5transition@ DB 'idle transition', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LGMJKEGG@run@
CONST	SEGMENT
??_C@_03LGMJKEGG@run@ DB 'run', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PHLAALHH@Walk@
CONST	SEGMENT
??_C@_04PHLAALHH@Walk@ DB 'Walk', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EAPMNACM@idle@
CONST	SEGMENT
??_C@_04EAPMNACM@idle@ DB 'idle', 00H			; `string'
plrGrounded DB	01H
nLastFrmJmp DB	01H
plrDmg	DD	03f000000r			; 0.5
jumpForce DD	040400000r			; 3
origPlayerSpeed DD 03f333333r			; 0.7
attack1ColOffsets DD 0bdf5c28fr			; -0.12
	DD	0beeb851fr			; -0.46
	DD	03e51eb85r			; 0.205
	DD	03e000000r			; 0.125
attk1MoveAmnts DD 000000000r			; 0
	DD	000000000r			; 0
	DD	03d480002r			; 0.0488281
	DD	03bb1c71er			; 0.00542535
	DD	03c31c71er			; 0.0108507
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
playerAccel DD	041800000r			; 16
attack1MoveAmnt DD 041a00000r			; 20
__4C2AD0C7_winpackagefamily@h DB 01H
__9DED9ED1_winapifamily@h DB 01H
__0B1C67B3_gl@h DB 01H
__D7C03EE9_glu@h DB 01H
__13490EC2_glew@h DB 01H
__8C83BECC_concurrencysal@h DB 01H
__608E3340_sal@h DB 01H
__FB67E29A_vadefs@h DB 01H
__1D1B619C_vcruntime@h DB 01H
__735960E1_corecrt@h DB 01H
__955456CD_stddef@h DB 01H
__836A8CFC_stdint@h DB 01H
__129F966A_glfw3@h DB 01H
__ADED8163_GL stuff@h DB 01H
__12FEDF4E_sdkddkver@h DB 01H
__9BAEE128_excpt@h DB 01H
__B7B53233_stdarg@h DB 01H
__6B04FCB3_specstrings_undef@h DB 01H
__F4027AF7_specstrings_strict@h DB 01H
__B90340D4_sdv_driverspecs@h DB 01H
__BFFF5AD3_driverspecs@h DB 01H
__32847078_specstrings@h DB 01H
__108B2620_corecrt_wctype@h DB 01H
__6CD6613D_ctype@h DB 01H
__30902A1F_kernelspecs@h DB 01H
__376FD5CA_basetsd@h DB 01H
__13DE2371_errno@h DB 01H
__8C6AE390_vcruntime_string@h DB 01H
__8ACB2152_corecrt_memcpy_s@h DB 01H
__EA6C9D17_corecrt_memory@h DB 01H
__0DF2AF52_corecrt_wstring@h DB 01H
__6E889ECC_string@h DB 01H
__9BEDF4DE_guiddef@h DB 01H
__51BFD2FE_pshpack4@h DB 01H
__31652CEA_poppack@h DB 01H
__5532AE4C_pshpack2@h DB 01H
__58A52B9A_pshpack8@h DB 01H
__57741015_pshpack1@h DB 01H
__CDE68C90_apiset@h DB 01H
__0BF06E8D_ktmtypes@h DB 01H
__40C200C0_winnt@h DB 01H
__9336F789_minwindef@h DB 01H
__55136115_windef@h DB 01H
__32205BF0_apisetcconv@h DB 01H
__B48FDEA0_minwinbase@h DB 01H
__3551B028_apiquery2@h DB 01H
__65BE04AA_processenv@h DB 01H
__4767CA46_fileapi@h DB 01H
__282E6C4B_fileapifromapp@h DB 01H
__393AF12C_debugapi@h DB 01H
__EBC502B8_utilapiset@h DB 01H
__1EAD8C69_handleapi@h DB 01H
__D8EF9B29_errhandlingapi@h DB 01H
__97FC1204_fibersapi@h DB 01H
__27448220_namedpipeapi@h DB 01H
__6EA33B2A_profileapi@h DB 01H
__EAC6F673_heapapi@h DB 01H
__D64EEA5A_ioapiset@h DB 01H
__144BD4B6_synchapi@h DB 01H
__03B1C640_interlockedapi@h DB 01H
__DC64CB38_processthreadsapi@h DB 01H
__D719B518_sysinfoapi@h DB 01H
__410385B1_memoryapi@h DB 01H
__C1AD45EF_enclaveapi@h DB 01H
__F4C3AA32_threadpoollegacyapiset@h DB 01H
__AC5A7A9F_threadpoolapiset@h DB 01H
__F5254B21_jobapi@h DB 01H
__BCEA6EE8_jobapi2@h DB 01H
__D18ACE72_wow64apiset@h DB 01H
__669B0D4A_libloaderapi@h DB 01H
__645F7034_securitybaseapi@h DB 01H
__67E58557_namespaceapi@h DB 01H
__599D9D3A_systemtopologyapi@h DB 01H
__2337E373_processtopologyapi@h DB 01H
__02BFF239_securityappcontainer@h DB 01H
__9C196272_realtimeapiset@h DB 01H
__5AB313A4_winerror@h DB 01H
__B7E7187B_timezoneapi@h DB 01H
__6DE9EB6F_winbase@h DB 01H
__56B2AFF2_wingdi@h DB 01H
__BA1161A9_tvout@h DB 01H
__0501A018_winuser@h DB 01H
__EF12FA99_datetimeapi@h DB 01H
__8FA7C3CA_winnls@h DB 01H
__390F0C47_stringapiset@h DB 01H
__28605B0A_wincontypes@h DB 01H
__BFBDE86D_consoleapi@h DB 01H
__C3CAFBF0_consoleapi2@h DB 01H
__C20891C7_consoleapi3@h DB 01H
__717C98B6_wincon@h DB 01H
__2884C177_verrsrc@h DB 01H
__A3FD3A34_winver@h DB 01H
__6F8AD9F1_reason@h DB 01H
__4C90FD6F_winreg@h DB 01H
__68AFEBAD_wnnc@h DB 01H
__5A7AB086_winnetwk@h DB 01H
__859C3CD3_cderr@h DB 01H
__81B12F1A_dde@h DB 01H
__DD3AF97A_ddeml@h DB 01H
__E6B47715_dlgs@h DB 01H
__944BD57D_lzexpand@h DB 01H
__E4B2DFC7_mmsyscom@h DB 01H
__5287D88F_mciapi@h DB 01H
__DBDC1384_mmiscapi@h DB 01H
__1A78C0D7_mmiscapi2@h DB 01H
__0D05975C_playsoundapi@h DB 01H
__757A63A9_mmeapi@h DB 01H
__6326AB05_timeapi@h DB 01H
__77D483B2_joystickapi@h DB 01H
__59CF7431_mmsystem@h DB 01H
__CEAC417E_nb30@h DB 01H
__3BA1A118_rpcdcep@h DB 01H
__74064437_rpcdce@h DB 01H
__90546602_rpcnsi@h DB 01H
__83114A2C_rpcnterr@h DB 01H
__CA67519E_rpcasync@h DB 01H
__D8CEBCD8_rpc@h DB 01H
__9F43AC2D_shellapi@h DB 01H
__6C8D3703_winperf@h DB 01H
__AB40A29E_inaddr@h DB 01H
__40D4FEA5_winsock@h DB 01H
__51394074_bcrypt@h DB 01H
__F177C154_ncrypt@h DB 01H
__1445529E_dpapi@h DB 01H
__5743FB20_wincrypt@h DB 01H
__97CA12BF_winefs@h DB 01H
__6DF63719_rpcnsip@h DB 01H
__031EFCA1_rpcsal@h DB 01H
__BA08D1DA_rpcndr@h DB 01H
__3A941F83_wtypesbase@h DB 01H
__C244FEE1_wtypes@h DB 01H
__FB7C5F97_winioctl@h DB 01H
__4B65E4AC_winsmcrd@h DB 01H
__1EA80168_winscard@h DB 01H
__516FC0F9_prsht@h DB 01H
__88BA11C6_winspool@h DB 01H
__211DB995_corecrt_malloc@h DB 01H
__99AED4FB_corecrt_search@h DB 01H
__8B813BF6_corecrt_wstdlib@h DB 01H
__3D1CA2C3_limits@h DB 01H
__E8FB0A68_stdlib@h DB 01H
__18DB4C56_unknwnbase@h DB 01H
__1AE6FA1A_objidlbase@h DB 01H
__7F98E437_cguid@h DB 01H
__6B2DFB49_combaseapi@h DB 01H
__CB0E8B37_unknwn@h DB 01H
__D981EF0A_objidl@h DB 01H
__37089EB8_oaidl@h DB 01H
__CA2DDD8B_propidlbase@h DB 01H
__39ED323E_coml2api@h DB 01H
__78E82682_oleidl@h DB 01H
__97883CFE_servprov@h DB 01H
__CE01DDB9_msxml@h DB 01H
__A4784895_urlmon@h DB 01H
__325F1C97_propidl@h DB 01H
__D3D43343_objbase@h DB 01H
__B3A2AF1B_oleauto@h DB 01H
__5722A8AA_ole2@h DB 01H
__590A450A_commdlg@h DB 01H
__2FE8A10C_stralign@h DB 01H
__34558472_winsvc@h DB 01H
__058845F1_mcx@h DB 01H
__7F16006B_ime_cmodes@h DB 01H
__0A3AF599_imm@h DB 01H
__11B87C25_Windows@h DB 01H
__F2638511_stdbool@h DB 01H
__1D9A7FA2_corecrt_math@h DB 01H
__2E93F1C0_math@h DB 01H
__0A8909AB_vectors@h DB 01H
__60B45B40_corecrt_stdio_config@h DB 01H
__CFA3741E_corecrt_wstdio@h DB 01H
__B3FE3303_stdio@h DB 01H
__E0493894_main@h DB 01H
__5CFF7615_Debug@h DB 01H
__565DCB0D_animations@h DB 01H
__D929D131_Physics@h DB 01H
__294C502B_Mesh@h DB 01H
__D1DC2946_EntityManager@h DB 01H
__6969E086_Player@h DB 01H
__863E315E_entityAdder@h DB 01H
__46B7CB64_math@h DB 01H
__1F46D782_scene 1@h DB 01H
__FEBB390E_Player@c DB 01H
runSpdAddFact DD 040000000r			; 2
	ORG $+4
$S1	DD	00H
	DD	01H
immuneTime DD	03e4ccccdr			; 0.2
	ORG $+4
$S2	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
minJumpET DD	03e4ccccdr			; 0.2
PUBLIC	TryDestAttk1
PUBLIC	PlayerFinalize
PUBLIC	Lerp
PUBLIC	StartNonLoopAnim3
PUBLIC	StartAnim
PUBLIC	FinishedAnim2
PUBLIC	FinishedAnim
PUBLIC	CheckResetAnim
PUBLIC	ResetAnim
PUBLIC	limitedDeltaTime
PUBLIC	SqrMagnitude
PUBLIC	NegVector
PUBLIC	PlayerUpdate
PUBLIC	PlayerInit
frm1LstFrm DB	01H DUP (?)
	ALIGN	8

attack1ColNode DQ 01H DUP (?)
attack1Ent DQ	01H DUP (?)
idleTransImminent DB 01H DUP (?)
	ALIGN	8

playerHBNodes DQ 01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$PlrFinAnim DD imagerel PlrFinAnim
	DD	imagerel PlrFinAnim+44
	DD	imagerel $unwind$PlrFinAnim
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TryDestAttk1 DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$TryDestAttk1
pdata	ENDS
pdata	SEGMENT
$pdata$PlayerFinalize DD imagerel $LN6
	DD	imagerel $LN6+153
	DD	imagerel $unwind$PlayerFinalize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Lerp DD	imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$Lerp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$StartNonLoopAnim3 DD imagerel $LN20
	DD	imagerel $LN20+146
	DD	imagerel $unwind$StartNonLoopAnim3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$StartAnim DD imagerel $LN8
	DD	imagerel $LN8+90
	DD	imagerel $unwind$StartAnim
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$FinishedAnim2 DD imagerel $LN11
	DD	imagerel $LN11+193
	DD	imagerel $unwind$FinishedAnim2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$FinishedAnim DD imagerel $LN7
	DD	imagerel $LN7+131
	DD	imagerel $unwind$FinishedAnim
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CheckResetAnim DD imagerel $LN6
	DD	imagerel $LN6+67
	DD	imagerel $unwind$CheckResetAnim
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ResetAnim DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$ResetAnim
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$limitedDeltaTime DD imagerel $LN13
	DD	imagerel $LN13+388
	DD	imagerel $unwind$limitedDeltaTime
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SqrMagnitude DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$SqrMagnitude
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$NegVector DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$NegVector
pdata	ENDS
pdata	SEGMENT
$pdata$PlayerUpdate DD imagerel $LN168
	DD	imagerel $LN168+3144
	DD	imagerel $unwind$PlayerUpdate
$pdata$PlayerInit DD imagerel $LN3
	DD	imagerel $LN3+1557
	DD	imagerel $unwind$PlayerInit
;	COMDAT xdata
xdata	SEGMENT
$unwind$NegVector DD 022001H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
NegVector$rtcName$0 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+10
NegVector$rtcVarDesc DD 028H
	DD	08H
	DQ	FLAT:NegVector$rtcName$0
	ORG $+48
NegVector$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:NegVector$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SqrMagnitude DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$limitedDeltaTime DD 020601H
	DD	070029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ResetAnim DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CheckResetAnim DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$FinishedAnim DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$FinishedAnim2 DD 021501H
	DD	070117215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$StartAnim DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$StartNonLoopAnim3 DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Lerp DD	021701H
	DD	070135217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TryDestAttk1 DD 020601H
	DD	070023206H
xdata	ENDS
xdata	SEGMENT
$unwind$PlrFinAnim DD 020901H
	DD	070053209H
$unwind$PlayerFinalize DD 020601H
	DD	070025206H
$unwind$PlayerUpdate DD 031a01H
	DD	0360109H
	DD	07002H
$unwind$PlayerInit DD 032c19H
	DD	0260109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0128H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:PlayerInit
	DD	024H
	DD	05fcH
PlayerUpdate$rtcName$0 DB 076H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+1
PlayerUpdate$rtcName$1 DB 06cH
	DB	068H
	DB	073H
	DB	00H
PlayerUpdate$rtcName$2 DB 072H
	DB	068H
	DB	073H
	DB	00H
PlayerUpdate$rtcName$3 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
PlayerUpdate$rtcName$4 DB 076H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+1
PlayerUpdate$rtcName$5 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+10
PlayerUpdate$rtcVarDesc DD 0128H
	DD	08H
	DQ	FLAT:PlayerUpdate$rtcName$5
	DD	0108H
	DD	08H
	DQ	FLAT:PlayerUpdate$rtcName$4
	DD	0e8H
	DD	08H
	DQ	FLAT:PlayerUpdate$rtcName$3
	DD	0c8H
	DD	08H
	DQ	FLAT:PlayerUpdate$rtcName$2
	DD	0a8H
	DD	08H
	DQ	FLAT:PlayerUpdate$rtcName$1
	DD	088H
	DD	08H
	DQ	FLAT:PlayerUpdate$rtcName$0
	ORG $+288
PlayerUpdate$rtcFrameData DD 06H
	DD	00H
	DQ	FLAT:PlayerUpdate$rtcVarDesc
PlayerInit$rtcName$0 DB 070H
	DB	061H
	DB	074H
	DB	068H
	DB	073H
	DB	00H
	ORG $+2
PlayerInit$rtcName$1 DB 068H
	DB	062H
	DB	05fH
	DB	04dH
	DB	065H
	DB	073H
	DB	068H
	DB	00H
PlayerInit$rtcName$2 DB 068H
	DB	062H
	DB	05fH
	DB	050H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+1
PlayerInit$rtcName$3 DB 068H
	DB	062H
	DB	05fH
	DB	053H
	DB	063H
	DB	061H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+7
PlayerInit$rtcName$4 DB 068H
	DB	062H
	DB	05fH
	DB	042H
	DB	061H
	DB	072H
	DB	05fH
	DB	050H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+5
PlayerInit$rtcName$5 DB 068H
	DB	062H
	DB	05fH
	DB	042H
	DB	061H
	DB	072H
	DB	05fH
	DB	053H
	DB	063H
	DB	061H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+11
PlayerInit$rtcVarDesc DD 0f8H
	DD	08H
	DQ	FLAT:PlayerInit$rtcName$5
	DD	0d8H
	DD	08H
	DQ	FLAT:PlayerInit$rtcName$4
	DD	0b8H
	DD	08H
	DQ	FLAT:PlayerInit$rtcName$3
	DD	098H
	DD	08H
	DQ	FLAT:PlayerInit$rtcName$2
	DD	078H
	DD	08H
	DQ	FLAT:PlayerInit$rtcName$1
	DD	028H
	DD	030H
	DQ	FLAT:PlayerInit$rtcName$0
	ORG $+288
PlayerInit$rtcFrameData DD 06H
	DD	00H
	DQ	FLAT:PlayerInit$rtcVarDesc
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c
_TEXT	SEGMENT
paths$ = 40
hb_Mesh$ = 120
hb_Pos$ = 152
hb_Scale$ = 184
hb_Bar_Pos$ = 216
hb_Bar_Scale$ = 248
mesh$ = 264
tv79 = 280
tv90 = 288
__$ArrayPad$ = 296
PlayerInit PROC

; 81   : void PlayerInit() {

$LN3:
  00000	40 57		 push	 rdi
  00002	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00009	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0000e	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__460EF0CE_EntityManager@c
  00033	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 82   : #ifdef DEBUG_PLR_POS
; 83   : 	debugBoxSize = VectorByScalar(oneVector, .03f);
; 84   : #endif
; 85   : 	//origPlayerSpeed = -.007f * logRefreshRate + .0381f;//derived from excel -- not completely accurate.
; 86   : 	plrImmune = calloc(PlrDmgTypeLength, sizeof(bool));

  00038	ba 01 00 00 00	 mov	 edx, 1
  0003d	b9 02 00 00 00	 mov	 ecx, 2
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  00048	48 89 05 00 00
	00 00		 mov	 QWORD PTR plrImmune, rax

; 87   : 	playerSpeed = origPlayerSpeed;

  0004f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR origPlayerSpeed
  00057	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR playerSpeed, xmm0

; 88   : 	playerAccel = 16.569736f * logRefreshRate - 19.7634973f;

  0005f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41848ed2
  00067	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR logRefreshRate
  0006f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@419e1ba4
  00077	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR playerAccel, xmm0

; 89   : 	jumpET = minJumpET + 1.0f;

  0007f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR minJumpET
  00087	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  0008f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR jumpET, xmm0

; 90   : 	playerData = (player.physicsData = malloc(sizeof(PhysicsData)));

  00097	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  0009c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000a2	48 89 05 00 00
	00 00		 mov	 QWORD PTR player, rax
  000a9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR player
  000b0	48 89 05 00 00
	00 00		 mov	 QWORD PTR playerData, rax

; 91   : 	plrAnim = (playerData->animator = malloc(sizeof(Animator)));

  000b7	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000c2	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv79[rsp], rax
  000ca	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  000d1	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv79[rsp]
  000d9	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx
  000dd	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR tv79[rsp]
  000e5	48 89 05 00 00
	00 00		 mov	 QWORD PTR plrAnim, rax

; 92   : 	InitAnimatorAnimNo(plrAnim, PLAYER_NUM_ANIMS);

  000ec	b8 06 00 00 00	 mov	 eax, 6
  000f1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR plrAnim
  000f8	66 89 41 22	 mov	 WORD PTR [rcx+34], ax
  000fc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR plrAnim
  00103	0f b7 40 22	 movzx	 eax, WORD PTR [rax+34]
  00107	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv90[rsp], rax
  0010f	b8 02 00 00 00	 mov	 eax, 2
  00114	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv90[rsp]
  0011c	48 f7 e1	 mul	 rcx
  0011f	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00126	48 0f 42 c1	 cmovb	 rax, rcx
  0012a	48 8b c8	 mov	 rcx, rax
  0012d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00133	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR plrAnim
  0013a	48 89 01	 mov	 QWORD PTR [rcx], rax

; 93   : 	plrAnim->animFrameNo[idle] = 7;

  0013d	b8 02 00 00 00	 mov	 eax, 2
  00142	48 6b c0 00	 imul	 rax, rax, 0
  00146	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR plrAnim
  0014d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00150	ba 07 00 00 00	 mov	 edx, 7
  00155	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx

; 94   : 	plrAnim->animFrameNo[walk] = 7;

  00159	b8 02 00 00 00	 mov	 eax, 2
  0015e	48 6b c0 01	 imul	 rax, rax, 1
  00162	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR plrAnim
  00169	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0016c	ba 07 00 00 00	 mov	 edx, 7
  00171	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx

; 95   : 	plrAnim->animFrameNo[run] = 7;

  00175	b8 02 00 00 00	 mov	 eax, 2
  0017a	48 6b c0 02	 imul	 rax, rax, 2
  0017e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR plrAnim
  00185	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00188	ba 07 00 00 00	 mov	 edx, 7
  0018d	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx

; 96   : 	plrAnim->animFrameNo[idleTransition] = 2;

  00191	b8 02 00 00 00	 mov	 eax, 2
  00196	48 6b c0 03	 imul	 rax, rax, 3
  0019a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR plrAnim
  001a1	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001a4	ba 02 00 00 00	 mov	 edx, 2
  001a9	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx

; 97   : 	plrAnim->animFrameNo[jump] = 3;

  001ad	b8 02 00 00 00	 mov	 eax, 2
  001b2	48 6b c0 04	 imul	 rax, rax, 4
  001b6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR plrAnim
  001bd	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001c0	ba 03 00 00 00	 mov	 edx, 3
  001c5	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx

; 98   : 	plrAnim->animFrameNo[attack1] = 8;

  001c9	b8 02 00 00 00	 mov	 eax, 2
  001ce	48 6b c0 05	 imul	 rax, rax, 5
  001d2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR plrAnim
  001d9	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001dc	ba 08 00 00 00	 mov	 edx, 8
  001e1	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx

; 99   : 	plrAnim->textureID = PLAYER_TEXTURE_ID;

  001e5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR plrAnim
  001ec	c7 40 28 c0 84
	00 00		 mov	 DWORD PTR [rax+40], 33984 ; 000084c0H

; 100  : 	plrAnim->animSpeed = 1.0f;

  001f3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR plrAnim
  001fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00202	f3 0f 11 40 30	 movss	 DWORD PTR [rax+48], xmm0

; 101  : 	plrAnim->animScales = NULL;

  00207	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR plrAnim
  0020e	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 102  : 	playerData->transform.position.y = -.01f;

  00216	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  0021d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bc23d70a
  00225	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0

; 103  : 	playerData->transform.position.x = .0f;

  0022a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  00231	0f 57 c0	 xorps	 xmm0, xmm0
  00234	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0

; 104  : 	playerData->transform.scale.x = 1.f;

  00239	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  00240	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00248	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0

; 105  : 	playerData->transform.scale.y = 1.f;

  0024d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  00254	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0025c	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0

; 106  : 	char* paths[] = {

  00261	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04EAPMNACM@idle@
  00268	48 89 44 24 28	 mov	 QWORD PTR paths$[rsp], rax
  0026d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04PHLAALHH@Walk@
  00274	48 89 44 24 30	 mov	 QWORD PTR paths$[rsp+8], rax
  00279	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03LGMJKEGG@run@
  00280	48 89 44 24 38	 mov	 QWORD PTR paths$[rsp+16], rax
  00285	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BA@KADFEIOO@idle?5transition@
  0028c	48 89 44 24 40	 mov	 QWORD PTR paths$[rsp+24], rax
  00291	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04NJIOBGCF@jump@
  00298	48 89 44 24 48	 mov	 QWORD PTR paths$[rsp+32], rax
  0029d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07BBGBODP@attack1@
  002a4	48 89 44 24 50	 mov	 QWORD PTR paths$[rsp+40], rax

; 107  : 		"idle",
; 108  : 		"Walk",
; 109  : 		"run",
; 110  : 		"idle transition",
; 111  : 		"jump",
; 112  : 		"attack1",
; 113  : 	};
; 114  : 	InitAnimator(plrAnim, paths, PLAYER_TEXTURE_INDEX, "player");

  002a9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_06BALNJMNP@player@
  002b0	45 33 c0	 xor	 r8d, r8d
  002b3	48 8d 54 24 28	 lea	 rdx, QWORD PTR paths$[rsp]
  002b8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR plrAnim
  002bf	e8 00 00 00 00	 call	 InitAnimator

; 115  : 	plrAnim->animating = idle;

  002c4	33 c0		 xor	 eax, eax
  002c6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR plrAnim
  002cd	66 89 41 08	 mov	 WORD PTR [rcx+8], ax

; 116  : 	plrAnim->active = true;

  002d1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR plrAnim
  002d8	c6 40 2c 01	 mov	 BYTE PTR [rax+44], 1

; 117  : 	plrAnim->bUseTexCoordAnim = false;

  002dc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR plrAnim
  002e3	c6 40 20 00	 mov	 BYTE PTR [rax+32], 0

; 118  : 	playerData->mesh = CreateQuad();//BATCH RENDERING FOR THE WIN \ (•◡•) /

  002e7	e8 00 00 00 00	 call	 CreateQuad
  002ec	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR playerData
  002f3	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 119  : #if SHOW_PLAYER
; 120  : 	defaultMesh(playerData->mesh, SHADER_PLR_TEX_ID);

  002f7	0f 57 c9	 xorps	 xmm1, xmm1
  002fa	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  00301	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00305	e8 00 00 00 00	 call	 defaultMesh

; 121  : #else
; 122  : 	float* colors[4] = {
; 123  : 		malloc(sizeof(float) * 4),
; 124  : 		malloc(sizeof(float) * 4),
; 125  : 		malloc(sizeof(float) * 4),
; 126  : 		malloc(sizeof(float) * 4),
; 127  : 	};
; 128  : 	float noAlpha[4] = { 1.0f, 1.0f, 1.0f, .0f };
; 129  : 	int i;
; 130  : 	for (i = 0; i < lengthOf(noAlpha); i++) colors[i] = noAlpha;
; 131  : 	defaultMeshWithColor(playerData->mesh, SHADER_PLR_TEX_ID, colors);
; 132  : #endif
; 133  : 	playerData->gravityMultiplier = 1.0f;

  0030a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  00311	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00319	f3 0f 11 40 30	 movss	 DWORD PTR [rax+48], xmm0

; 134  : 	playerData->velocity.y = playerData->velocity.x = .0f;

  0031e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  00325	0f 57 c0	 xorps	 xmm0, xmm0
  00328	f3 0f 11 40 48	 movss	 DWORD PTR [rax+72], xmm0
  0032d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  00334	0f 57 c0	 xorps	 xmm0, xmm0
  00337	f3 0f 11 40 4c	 movss	 DWORD PTR [rax+76], xmm0

; 135  : 	player.origAABB->x = -.037977435f;

  0033c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd1b8e3a
  00344	f3 0f 11 05 2c
	00 00 00	 movss	 DWORD PTR player+44, xmm0

; 136  : 	player.origAABB->y = -.462963f;

  0034c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beed097d
  00354	f3 0f 11 05 30
	00 00 00	 movss	 DWORD PTR player+48, xmm0

; 137  : 	player.origAABB[1].x = .037977435f;

  0035c	b8 08 00 00 00	 mov	 eax, 8
  00361	48 6b c0 01	 imul	 rax, rax, 1
  00365	48 8d 0d 2c 00
	00 00		 lea	 rcx, OFFSET FLAT:player+44
  0036c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d1b8e3a
  00374	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0

; 138  : 	player.origAABB[1].y = -.02204586f;

  00379	b8 08 00 00 00	 mov	 eax, 8
  0037e	48 6b c0 01	 imul	 rax, rax, 1
  00382	48 8d 0d 2c 00
	00 00		 lea	 rcx, OFFSET FLAT:player+44
  00389	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bcb49985
  00391	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0

; 139  : 	playerData->restitutionCoef = .06f;

  00397	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  0039e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c28f
  003a6	f3 0f 11 40 34	 movss	 DWORD PTR [rax+52], xmm0

; 140  : 	playerData->frictionCoef.x = .005f;

  003ab	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  003b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ba3d70a
  003ba	f3 0f 11 40 38	 movss	 DWORD PTR [rax+56], xmm0

; 141  : 	playerData->frictionCoef.y = .005f;

  003bf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  003c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ba3d70a
  003ce	f3 0f 11 40 3c	 movss	 DWORD PTR [rax+60], xmm0

; 142  : 	player.tag = playerTag;

  003d3	c7 05 24 00 00
	00 01 00 00 00	 mov	 DWORD PTR player+36, 1

; 143  : 	player.layer = playerLayer;

  003dd	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR player+8, 0

; 144  : 	playerData->bIsTrigger = false;

  003e7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  003ee	c6 40 51 00	 mov	 BYTE PTR [rax+81], 0

; 145  : 	playerData->mass = 1.0f;

  003f2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  003f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00401	f3 0f 11 40 40	 movss	 DWORD PTR [rax+64], xmm0

; 146  : 	playerEntity = SubscribeEntity(&player);

  00406	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:player
  0040d	e8 00 00 00 00	 call	 SubscribeEntity
  00412	48 89 05 00 00
	00 00		 mov	 QWORD PTR playerEntity, rax

; 147  : 	Mesh hb_Mesh;
; 148  : 	CreateQuadAssign(&hb_Mesh);

  00419	48 8d 4c 24 78	 lea	 rcx, QWORD PTR hb_Mesh$[rsp]
  0041e	e8 00 00 00 00	 call	 CreateQuadAssign

; 149  : 	defaultMesh(&hb_Mesh, SHADER_HB_TEX_ID);

  00423	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40400000
  0042b	48 8d 4c 24 78	 lea	 rcx, QWORD PTR hb_Mesh$[rsp]
  00430	e8 00 00 00 00	 call	 defaultMesh

; 150  : 	InitSingleTexture2("images/Retro Inventory/Original/Health_01.png", HEALTHBAR_TEXTURE_INDEX, HEALTHBAR_TEXTURE_ID);

  00435	41 b8 c3 84 00
	00		 mov	 r8d, 33987		; 000084c3H
  0043b	ba 03 00 00 00	 mov	 edx, 3
  00440	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@JODNKDJP@images?1Retro?5Inventory?1Original@
  00447	e8 00 00 00 00	 call	 InitSingleTexture2

; 151  : 	Vector2 hb_Pos = { -.73f, .85f };

  0044c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3ae148
  00454	f3 0f 11 84 24
	98 00 00 00	 movss	 DWORD PTR hb_Pos$[rsp], xmm0
  0045d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00465	f3 0f 11 84 24
	9c 00 00 00	 movss	 DWORD PTR hb_Pos$[rsp+4], xmm0

; 152  : 	Vector2 hb_Scale = { 1.0f, .26f };

  0046e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00476	f3 0f 11 84 24
	b8 00 00 00	 movss	 DWORD PTR hb_Scale$[rsp], xmm0
  0047f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e851eb8
  00487	f3 0f 11 84 24
	bc 00 00 00	 movss	 DWORD PTR hb_Scale$[rsp+4], xmm0

; 153  : 	MoveScaleMesh(hb_Mesh.meshLocation, hb_Pos, hb_Scale);

  00490	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR hb_Scale$[rsp]
  00498	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR hb_Pos$[rsp]
  004a0	8b 4c 24 78	 mov	 ecx, DWORD PTR hb_Mesh$[rsp]
  004a4	e8 00 00 00 00	 call	 MoveScaleMesh

; 154  : 	DefaultSMesh(hb_Bar, 1.0f, 4.f, .001f);

  004a9	b9 18 00 00 00	 mov	 ecx, 24
  004ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  004b4	48 89 05 00 00
	00 00		 mov	 QWORD PTR hb_Bar, rax
  004bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004c3	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR hb_Bar+8, xmm0
  004cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3a83126f
  004d3	f3 0f 11 05 10
	00 00 00	 movss	 DWORD PTR hb_Bar+16, xmm0
  004db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  004e3	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR hb_Bar+12, xmm0

; 155  : 	CreateSQuadAssign(hb_Bar.mesh);

  004eb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR hb_Bar
  004f2	e8 00 00 00 00	 call	 CreateSQuadAssign

; 156  : 	defaultSMesh(hb_Bar.mesh, SHADER_HB_BAR_TEX_ID);

  004f7	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40800000
  004ff	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR hb_Bar
  00506	e8 00 00 00 00	 call	 defaultSMesh

; 157  : 	InitSingleTexture2("images/Retro Inventory/Original/Health_01_Bar01.png", HEALTHBAR_BAR_TEXTURE_INDEX, HEALTHBAR_BAR_TEXTURE_ID);

  0050b	41 b8 c4 84 00
	00		 mov	 r8d, 33988		; 000084c4H
  00511	ba 04 00 00 00	 mov	 edx, 4
  00516	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DE@IMENIABH@images?1Retro?5Inventory?1Original@
  0051d	e8 00 00 00 00	 call	 InitSingleTexture2

; 158  : 	Vector2 hb_Bar_Pos = { -.6770813f, .88f };

  00522	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2d5533
  0052a	f3 0f 11 84 24
	d8 00 00 00	 movss	 DWORD PTR hb_Bar_Pos$[rsp], xmm0
  00533	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6147ae
  0053b	f3 0f 11 84 24
	dc 00 00 00	 movss	 DWORD PTR hb_Bar_Pos$[rsp+4], xmm0

; 159  : 	Vector2 hb_Bar_Scale = { .702f, .0331f };

  00544	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f33b646
  0054c	f3 0f 11 84 24
	f8 00 00 00	 movss	 DWORD PTR hb_Bar_Scale$[rsp], xmm0
  00555	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0793de
  0055d	f3 0f 11 84 24
	fc 00 00 00	 movss	 DWORD PTR hb_Bar_Scale$[rsp+4], xmm0

; 160  : 	MoveScaleMesh(hb_Bar.mesh->meshLocation, hb_Bar_Pos, hb_Bar_Scale);

  00566	4c 8b 84 24 f8
	00 00 00	 mov	 r8, QWORD PTR hb_Bar_Scale$[rsp]
  0056e	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR hb_Bar_Pos$[rsp]
  00576	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR hb_Bar
  0057d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0057f	e8 00 00 00 00	 call	 MoveScaleMesh

; 161  : 	SquishableMesh* mesh = hb_Bar.mesh;

  00584	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR hb_Bar
  0058b	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR mesh$[rsp], rax

; 162  : 	mesh->squishAmt = 1.0f;

  00593	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR mesh$[rsp]
  0059b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005a3	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0

; 163  : 	mesh->bSquish = false;

  005a8	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR mesh$[rsp]
  005b0	c6 40 14 00	 mov	 BYTE PTR [rax+20], 0

; 164  : 	playerHBNodes = SubscribeSlider(&hb_Bar);

  005b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:hb_Bar
  005bb	e8 00 00 00 00	 call	 SubscribeSlider
  005c0	48 89 05 00 00
	00 00		 mov	 QWORD PTR playerHBNodes, rax

; 165  : 	playerImmuneET = immuneTime + 1.0f;

  005c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR immuneTime
  005cf	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  005d7	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR playerImmuneET, xmm0

; 166  : #ifdef DEBUG_PLR_POS
; 167  : 	float** colors[MESH_COLORS_LEN];
; 168  : 	uint i;
; 169  : 	uint j;
; 170  : 	for (i = 0; i < 2; i++) {
; 171  : 		colors[i] = malloc(sizeof(float*) * MESH_COLORS_LEN);
; 172  : 		for (j = 0; j < MESH_COLORS_LEN; j++) {
; 173  : 			colors[i][j] = calloc(MESH_NUM_COLORS, sizeof(float));
; 174  : 			colors[i][j][i] = colors[i][j][3] = 1.0f;
; 175  : 		}
; 176  : 	}
; 177  : 	Vector2 positions[2] = {AddVectors(*player.origAABB, *attack1ColOffsets), AddVectors(player.origAABB[1], attack1ColOffsets[1])};
; 178  : 	DefaultNewObjectsColor2(SHADER_DEBUG_TEX_ID, "images/debug/0.png", DEBUG_TEXTURE_INDEX, DEBUG_TEXTURE_ID, positions, debugBoxSize, colors, debugMesh, 2);
; 179  : #endif
; 180  : 	//attack1MoveAmnt = 0.3929f * refreshRate - 9.5714f;
; 181  : 	playerData = player.physicsData;

  005df	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR player
  005e6	48 89 05 00 00
	00 00		 mov	 QWORD PTR playerData, rax

; 182  : }

  005ed	48 8b cc	 mov	 rcx, rsp
  005f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PlayerInit$rtcFrameData
  005f7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  005fc	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00604	48 33 cc	 xor	 rcx, rsp
  00607	e8 00 00 00 00	 call	 __security_check_cookie
  0060c	48 81 c4 30 01
	00 00		 add	 rsp, 304		; 00000130H
  00613	5f		 pop	 rdi
  00614	c3		 ret	 0
PlayerInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\animations.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\main.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\animations.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\animations.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\animations.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\main.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c
_TEXT	SEGMENT
resultantVel$9 = 32
resultantVel$10 = 36
$T11 = 40
$T12 = 44
$T13 = 48
$T14 = 56
$T15 = 64
$T16 = 72
$T17 = 88
$T18 = 104
$T19 = 108
t$ = 112
t$ = 120
vector$ = 136
lhs$ = 168
rhs$ = 200
_this$20 = 232
vector$ = 264
_this$21 = 296
animator$ = 312
animator$ = 320
animator$ = 328
animation$ = 336
animator$ = 344
tv72 = 352
tv90 = 356
tv139 = 360
tv346 = 364
tv163 = 368
tv165 = 372
tv173 = 376
tv175 = 380
tv187 = 384
tv190 = 388
tv256 = 392
tv136 = 396
tv279 = 400
tv335 = 408
tv340 = 412
tv342 = 416
PlayerUpdate PROC

; 218  : void PlayerUpdate() {

$LN168:
  00000	40 57		 push	 rdi
  00002	48 81 ec b0 01
	00 00		 sub	 rsp, 432		; 000001b0H
  00009	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0000e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__460EF0CE_EntityManager@c
  00021	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 219  : #ifdef DEBUG_KEYS
; 220  : 	for (int i = 0; i < NUM_KEYS; i++) if (pressing(i)) printf("%d\n", i);
; 221  : #endif
; 222  : #ifdef DEBUG_MESH_DATA
; 223  : 	uint iAddOne;
; 224  : 	for (uint i = 0; i < verticesSize / sizeof(verticesSize); i++) {
; 225  : 		iAddOne = i + 1;
; 226  : 		printf("%f", vertices[i]);
; 227  : 		if (iAddOne != stride) printf("%s", ", ");
; 228  : 		if (!(iAddOne % quadTempLen)) puts("\n");
; 229  : 		if (!(iAddOne % stride)) puts("\n");
; 230  : 	}
; 231  : 	puts("\n");
; 232  : #endif
; 233  : 	if (movingX = (pressingKey[D_KEY] ^ pressingKey[A_KEY])) {

  00026	b8 01 00 00 00	 mov	 eax, 1
  0002b	48 6b c0 44	 imul	 rax, rax, 68		; 00000044H
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressingKey
  00036	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0003a	b9 01 00 00 00	 mov	 ecx, 1
  0003f	48 6b c9 41	 imul	 rcx, rcx, 65		; 00000041H
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressingKey
  0004a	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0004e	33 c1		 xor	 eax, ecx
  00050	85 c0		 test	 eax, eax
  00052	75 0d		 jne	 SHORT $LN26@PlayerUpda
  00054	c7 84 24 60 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv72[rsp], 0
  0005f	eb 0b		 jmp	 SHORT $LN27@PlayerUpda
$LN26@PlayerUpda:
  00061	c7 84 24 60 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv72[rsp], 1
$LN27@PlayerUpda:
  0006c	0f b6 84 24 60
	01 00 00	 movzx	 eax, BYTE PTR tv72[rsp]
  00074	88 05 00 00 00
	00		 mov	 BYTE PTR movingX, al
  0007a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR movingX
  00081	85 c0		 test	 eax, eax
  00083	0f 84 28 02 00
	00		 je	 $LN2@PlayerUpda

; 234  : 		pressedMoveKey = true;

  00089	c6 05 00 00 00
	00 01		 mov	 BYTE PTR pressedMoveKey, 1

; 235  : 		scaleX = pressingKey[D_KEY] * 2.0f - 1.0f;

  00090	b8 01 00 00 00	 mov	 eax, 1
  00095	48 6b c0 44	 imul	 rax, rax, 68		; 00000044H
  00099	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressingKey
  000a0	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000a4	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000a8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  000b0	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000b8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR scaleX, xmm0

; 236  : 		playerSpeed = origPlayerSpeed * (1.f + runSpdAddFact * (pressingKey[VK_RSHIFT] || pressingKey[VK_LSHIFT]));

  000c0	b8 01 00 00 00	 mov	 eax, 1
  000c5	48 69 c0 a1 00
	00 00		 imul	 rax, rax, 161		; 000000a1H
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressingKey
  000d3	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000d7	85 c0		 test	 eax, eax
  000d9	75 28		 jne	 SHORT $LN28@PlayerUpda
  000db	b8 01 00 00 00	 mov	 eax, 1
  000e0	48 69 c0 a0 00
	00 00		 imul	 rax, rax, 160		; 000000a0H
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressingKey
  000ee	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000f2	85 c0		 test	 eax, eax
  000f4	75 0d		 jne	 SHORT $LN28@PlayerUpda
  000f6	c7 84 24 64 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv90[rsp], 0
  00101	eb 0b		 jmp	 SHORT $LN29@PlayerUpda
$LN28@PlayerUpda:
  00103	c7 84 24 64 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv90[rsp], 1
$LN29@PlayerUpda:
  0010e	f3 0f 2a 84 24
	64 01 00 00	 cvtsi2ss xmm0, DWORD PTR tv90[rsp]
  00117	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR runSpdAddFact
  0011f	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00123	0f 28 c1	 movaps	 xmm0, xmm1
  00126	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0012e	f3 0f 58 c8	 addss	 xmm1, xmm0
  00132	0f 28 c1	 movaps	 xmm0, xmm1
  00135	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR origPlayerSpeed
  0013d	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00141	0f 28 c1	 movaps	 xmm0, xmm1
  00144	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR playerSpeed, xmm0

; 237  : 		AddForceScaleLimitVelX(*playerData, playerData->transform, avgDT * playerAccel * scaleX, scaleX, playerSpeed);

  0014c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR avgDT
  00154	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR playerAccel
  0015c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR scaleX
  00164	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  0016b	f3 0f 10 48 48	 movss	 xmm1, DWORD PTR [rax+72]
  00170	f3 0f 58 c8	 addss	 xmm1, xmm0
  00174	0f 28 c1	 movaps	 xmm0, xmm1
  00177	f3 0f 11 44 24
	20		 movss	 DWORD PTR resultantVel$9[rsp], xmm0
  0017d	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR resultantVel$9[rsp]
  00183	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0018a	76 0d		 jbe	 SHORT $LN30@PlayerUpda
  0018c	c7 84 24 68 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv139[rsp], 1
  00197	eb 0b		 jmp	 SHORT $LN31@PlayerUpda
$LN30@PlayerUpda:
  00199	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv139[rsp], 0
$LN31@PlayerUpda:
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h

; 19   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  001a4	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR resultantVel$9[rsp]
  001aa	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  001b1	72 0d		 jb	 SHORT $LN55@PlayerUpda
  001b3	c7 84 24 6c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv346[rsp], 1
  001be	eb 0b		 jmp	 SHORT $LN56@PlayerUpda
$LN55@PlayerUpda:
  001c0	c7 84 24 6c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv346[rsp], 0
$LN56@PlayerUpda:
  001cb	f3 0f 2a 84 24
	6c 01 00 00	 cvtsi2ss xmm0, DWORD PTR tv346[rsp]
  001d4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  001dc	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  001e4	f3 0f 10 4c 24
	20		 movss	 xmm1, DWORD PTR resultantVel$9[rsp]
  001ea	f3 0f 59 c8	 mulss	 xmm1, xmm0
  001ee	0f 28 c1	 movaps	 xmm0, xmm1
  001f1	f3 0f 11 44 24
	28		 movss	 DWORD PTR $T11[rsp], xmm0
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c

; 237  : 		AddForceScaleLimitVelX(*playerData, playerData->transform, avgDT * playerAccel * scaleX, scaleX, playerSpeed);

  001f7	f3 0f 10 44 24
	28		 movss	 xmm0, DWORD PTR $T11[rsp]
  001fd	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR playerSpeed
  00205	e8 00 00 00 00	 call	 FMin
  0020a	f3 0f 2a 8c 24
	68 01 00 00	 cvtsi2ss xmm1, DWORD PTR tv139[rsp]
  00213	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  0021b	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f800000
  00223	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00227	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  0022e	f3 0f 11 40 48	 movss	 DWORD PTR [rax+72], xmm0
  00233	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  0023a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR scaleX
  00242	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  00247	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  0024e	c6 40 02 00	 mov	 BYTE PTR [rax+2], 0
  00252	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  00259	c6 00 01	 mov	 BYTE PTR [rax], 1
  0025c	c6 05 00 00 00
	00 01		 mov	 BYTE PTR shouldDraw, 1

; 238  : 		if (pressingKey[VK_LSHIFT]) {

  00263	b8 01 00 00 00	 mov	 eax, 1
  00268	48 69 c0 a0 00
	00 00		 imul	 rax, rax, 160		; 000000a0H
  0026f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressingKey
  00276	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0027a	85 c0		 test	 eax, eax
  0027c	74 07		 je	 SHORT $LN3@PlayerUpda

; 239  : 			idleTransImminent = true;

  0027e	c6 05 00 00 00
	00 01		 mov	 BYTE PTR idleTransImminent, 1
$LN3@PlayerUpda:

; 240  : 		}
; 241  : 		if (attack1ColNode) {

  00285	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR attack1ColNode, 0
  0028d	74 22		 je	 SHORT $LN4@PlayerUpda

; 242  : 			SetPtsAttk1(attack1Ent->trueAABB);

  0028f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR attack1Ent
  00296	48 83 c0 3c	 add	 rax, 60			; 0000003cH
  0029a	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR playerData
  002a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:attack1ColOffsets
  002a8	48 8b c8	 mov	 rcx, rax
  002ab	e8 00 00 00 00	 call	 SetColliderAABB
  002b0	90		 npad	 1
$LN4@PlayerUpda:
$LN2@PlayerUpda:

; 243  : 		}
; 244  : 	}
; 245  : 	jumped = (jumped || lastFrmJmp) && !plrGrounded;

  002b1	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR jumped
  002b8	85 c0		 test	 eax, eax
  002ba	75 0b		 jne	 SHORT $LN32@PlayerUpda
  002bc	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR lastFrmJmp
  002c3	85 c0		 test	 eax, eax
  002c5	74 18		 je	 SHORT $LN33@PlayerUpda
$LN32@PlayerUpda:
  002c7	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR plrGrounded
  002ce	85 c0		 test	 eax, eax
  002d0	75 0d		 jne	 SHORT $LN33@PlayerUpda
  002d2	c7 84 24 70 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv163[rsp], 1
  002dd	eb 0b		 jmp	 SHORT $LN34@PlayerUpda
$LN33@PlayerUpda:
  002df	c7 84 24 70 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv163[rsp], 0
$LN34@PlayerUpda:
  002ea	83 bc 24 70 01
	00 00 00	 cmp	 DWORD PTR tv163[rsp], 0
  002f2	75 0d		 jne	 SHORT $LN35@PlayerUpda
  002f4	c7 84 24 74 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv165[rsp], 0
  002ff	eb 0b		 jmp	 SHORT $LN36@PlayerUpda
$LN35@PlayerUpda:
  00301	c7 84 24 74 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv165[rsp], 1
$LN36@PlayerUpda:
  0030c	0f b6 84 24 74
	01 00 00	 movzx	 eax, BYTE PTR tv165[rsp]
  00314	88 05 00 00 00
	00		 mov	 BYTE PTR jumped, al

; 246  : 	if ((jumping = plrGrounded && pressingKey[UP_ARROW])) {

  0031a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR plrGrounded
  00321	85 c0		 test	 eax, eax
  00323	74 25		 je	 SHORT $LN37@PlayerUpda
  00325	b8 01 00 00 00	 mov	 eax, 1
  0032a	48 6b c0 26	 imul	 rax, rax, 38		; 00000026H
  0032e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressingKey
  00335	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00339	85 c0		 test	 eax, eax
  0033b	74 0d		 je	 SHORT $LN37@PlayerUpda
  0033d	c7 84 24 78 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv173[rsp], 1
  00348	eb 0b		 jmp	 SHORT $LN38@PlayerUpda
$LN37@PlayerUpda:
  0034a	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv173[rsp], 0
$LN38@PlayerUpda:
  00355	83 bc 24 78 01
	00 00 00	 cmp	 DWORD PTR tv173[rsp], 0
  0035d	75 0d		 jne	 SHORT $LN39@PlayerUpda
  0035f	c7 84 24 7c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv175[rsp], 0
  0036a	eb 0b		 jmp	 SHORT $LN40@PlayerUpda
$LN39@PlayerUpda:
  0036c	c7 84 24 7c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv175[rsp], 1
$LN40@PlayerUpda:
  00377	0f b6 84 24 7c
	01 00 00	 movzx	 eax, BYTE PTR tv175[rsp]
  0037f	88 05 00 00 00
	00		 mov	 BYTE PTR jumping, al
  00385	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR jumping
  0038c	85 c0		 test	 eax, eax
  0038e	74 32		 je	 SHORT $LN5@PlayerUpda

; 247  : 		AddForceY(*playerData, playerData->transform, jumpForce);

  00390	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  00397	f3 0f 10 40 4c	 movss	 xmm0, DWORD PTR [rax+76]
  0039c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR jumpForce
  003a4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  003ab	f3 0f 11 40 4c	 movss	 DWORD PTR [rax+76], xmm0
  003b0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  003b7	c6 40 01 01	 mov	 BYTE PTR [rax+1], 1
  003bb	c6 05 00 00 00
	00 01		 mov	 BYTE PTR shouldDraw, 1
$LN5@PlayerUpda:

; 248  : 	}
; 249  : #ifdef DEBUG_PLR_POS
; 250  : 	for (int i = 0; i < lengthOf(debugMesh); i++) MoveScaleMesh(debugMesh[i].meshLocation, player.trueAABB[i], debugBoxSize);
; 251  : #endif
; 252  : 	idleTransImminent |= plrAnim->animating == run;

  003c2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR plrAnim
  003c9	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  003cd	83 f8 02	 cmp	 eax, 2
  003d0	75 0d		 jne	 SHORT $LN41@PlayerUpda
  003d2	c7 84 24 80 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv187[rsp], 1
  003dd	eb 0b		 jmp	 SHORT $LN42@PlayerUpda
$LN41@PlayerUpda:
  003df	c7 84 24 80 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv187[rsp], 0
$LN42@PlayerUpda:
  003ea	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR idleTransImminent
  003f1	0b 84 24 80 01
	00 00		 or	 eax, DWORD PTR tv187[rsp]
  003f8	85 c0		 test	 eax, eax
  003fa	75 0d		 jne	 SHORT $LN43@PlayerUpda
  003fc	c7 84 24 84 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv190[rsp], 0
  00407	eb 0b		 jmp	 SHORT $LN44@PlayerUpda
$LN43@PlayerUpda:
  00409	c7 84 24 84 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv190[rsp], 1
$LN44@PlayerUpda:
  00414	0f b6 84 24 84
	01 00 00	 movzx	 eax, BYTE PTR tv190[rsp]
  0041c	88 05 00 00 00
	00		 mov	 BYTE PTR idleTransImminent, al

; 253  : 	if (!plrGrounded) {

  00422	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR plrGrounded
  00429	85 c0		 test	 eax, eax
  0042b	0f 85 cb 00 00
	00		 jne	 $LN6@PlayerUpda

; 254  : 		plrAnim->curAnimFrame *= nLastFrmJmp;

  00431	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR nLastFrmJmp
  00438	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR plrAnim
  0043f	0f b7 49 0a	 movzx	 ecx, WORD PTR [rcx+10]
  00443	0f af c8	 imul	 ecx, eax
  00446	8b c1		 mov	 eax, ecx
  00448	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR plrAnim
  0044f	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax

; 255  : 		StartNonLoopAnim3(plrAnim, jump, plrAnim->animFrameNo[jump] - 1 - jumped);

  00453	b8 02 00 00 00	 mov	 eax, 2
  00458	48 6b c0 04	 imul	 rax, rax, 4
  0045c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR plrAnim
  00463	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00466	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  0046a	ff c8		 dec	 eax
  0046c	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR jumped
  00473	2b c1		 sub	 eax, ecx
  00475	44 0f b7 c0	 movzx	 r8d, ax
  00479	66 ba 04 00	 mov	 dx, 4
  0047d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR plrAnim
  00484	e8 00 00 00 00	 call	 StartNonLoopAnim3

; 256  : 		if (!jumped) {

  00489	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR jumped
  00490	85 c0		 test	 eax, eax
  00492	75 39		 jne	 SHORT $LN8@PlayerUpda

; 257  : 			plrAnim->curAnimFrame = plrAnim->animFrameNo[jump] - 2;

  00494	b8 02 00 00 00	 mov	 eax, 2
  00499	48 6b c0 04	 imul	 rax, rax, 4
  0049d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR plrAnim
  004a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  004a7	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  004ab	83 e8 02	 sub	 eax, 2
  004ae	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR plrAnim
  004b5	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax

; 258  : 			plrAnim->animET = ANIM_UPDATE_TIME;

  004b9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR plrAnim
  004c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3daaaaab
  004c8	f3 0f 11 40 24	 movss	 DWORD PTR [rax+36], xmm0
$LN8@PlayerUpda:

; 259  : 		}
; 260  : 		plrAnim->animET *= nLastFrmJmp;

  004cd	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR nLastFrmJmp
  004d4	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  004d8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR plrAnim
  004df	f3 0f 10 48 24	 movss	 xmm1, DWORD PTR [rax+36]
  004e4	f3 0f 59 c8	 mulss	 xmm1, xmm0
  004e8	0f 28 c1	 movaps	 xmm0, xmm1
  004eb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR plrAnim
  004f2	f3 0f 11 40 24	 movss	 DWORD PTR [rax+36], xmm0

; 261  : 	}

  004f7	e9 4a 04 00 00	 jmp	 $LN7@PlayerUpda
$LN6@PlayerUpda:

; 262  : 	else if (pressingKey[SPACE_KEY] || !PlrFinAnim(attack1)) {

  004fc	b8 01 00 00 00	 mov	 eax, 1
  00501	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00505	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressingKey
  0050c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00510	85 c0		 test	 eax, eax
  00512	75 15		 jne	 SHORT $LN11@PlayerUpda
  00514	b9 05 00 00 00	 mov	 ecx, 5
  00519	e8 00 00 00 00	 call	 PlrFinAnim
  0051e	0f b6 c0	 movzx	 eax, al
  00521	85 c0		 test	 eax, eax
  00523	0f 85 7d 02 00
	00		 jne	 $LN9@PlayerUpda
$LN11@PlayerUpda:

; 263  : 		StartAnim(plrAnim, attack1);

  00529	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR plrAnim
  00530	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR animator$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\animations.h

; 30   : 	if (anim->animating == check) return;

  00538	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR animator$[rsp]
  00540	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00544	b9 05 00 00 00	 mov	 ecx, 5
  00549	0f b7 c9	 movzx	 ecx, cx
  0054c	3b c1		 cmp	 eax, ecx
  0054e	75 02		 jne	 SHORT $LN87@PlayerUpda
  00550	eb 11		 jmp	 SHORT $LN86@PlayerUpda
$LN87@PlayerUpda:

; 27   : 	anim->curAnimFrame = -1;

  00552	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00557	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR animator$[rsp]
  0055f	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax
$LN86@PlayerUpda:

; 43   : 	animator->animating = animation;

  00563	b8 05 00 00 00	 mov	 eax, 5
  00568	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR animator$[rsp]
  00570	66 89 41 08	 mov	 WORD PTR [rcx+8], ax

; 44   : 	animator->active = true;

  00574	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR animator$[rsp]
  0057c	c6 40 2c 01	 mov	 BYTE PTR [rax+44], 1
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c

; 264  : 		if (!movingX) {

  00580	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR movingX
  00587	85 c0		 test	 eax, eax
  00589	0f 85 64 01 00
	00		 jne	 $LN12@PlayerUpda
; File C:\Users\drago\source\repos\cGame - less comments\cGame\main.h

; 343  : 	QueryPerformanceCounter(&cTime);

  0058f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cTime
  00596	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 344  : 	return (float)((cTime.QuadPart - pTime.QuadPart) * 1000000 / frequency) / 1000000.0f * timeScale;

  0059c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR pTime
  005a3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR cTime
  005aa	48 2b c8	 sub	 rcx, rax
  005ad	48 8b c1	 mov	 rax, rcx
  005b0	48 69 c0 40 42
	0f 00		 imul	 rax, rax, 1000000	; 000f4240H
  005b7	48 99		 cdq
  005b9	48 f7 3d 00 00
	00 00		 idiv	 QWORD PTR frequency
  005c0	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  005c5	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@49742400
  005cd	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR timeScale
  005d5	f3 0f 11 44 24
	2c		 movss	 DWORD PTR $T12[rsp], xmm0
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c

; 265  : 			AddForceLimitVelX(*playerData, playerData->transform, attk1MoveAmnts[plrAnim->curAnimFrame] * deltaTime() * attack1MoveAmnt * playerData->transform.scale.x, playerSpeed);

  005db	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR plrAnim
  005e2	0f b7 40 0a	 movzx	 eax, WORD PTR [rax+10]
  005e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:attk1MoveAmnts
  005ed	f3 0f 10 44 24
	2c		 movss	 xmm0, DWORD PTR $T12[rsp]
  005f3	f3 0f 10 0c 81	 movss	 xmm1, DWORD PTR [rcx+rax*4]
  005f8	f3 0f 59 c8	 mulss	 xmm1, xmm0
  005fc	0f 28 c1	 movaps	 xmm0, xmm1
  005ff	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR attack1MoveAmnt
  00607	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  0060e	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [rax+4]
  00613	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  0061a	f3 0f 10 48 48	 movss	 xmm1, DWORD PTR [rax+72]
  0061f	f3 0f 58 c8	 addss	 xmm1, xmm0
  00623	0f 28 c1	 movaps	 xmm0, xmm1
  00626	f3 0f 11 44 24
	24		 movss	 DWORD PTR resultantVel$10[rsp], xmm0
  0062c	f3 0f 10 44 24
	24		 movss	 xmm0, DWORD PTR resultantVel$10[rsp]
  00632	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00639	76 0d		 jbe	 SHORT $LN45@PlayerUpda
  0063b	c7 84 24 88 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv256[rsp], 1
  00646	eb 0b		 jmp	 SHORT $LN46@PlayerUpda
$LN45@PlayerUpda:
  00648	c7 84 24 88 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv256[rsp], 0
$LN46@PlayerUpda:
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h

; 19   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  00653	f3 0f 10 44 24
	24		 movss	 xmm0, DWORD PTR resultantVel$10[rsp]
  00659	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00660	72 0d		 jb	 SHORT $LN95@PlayerUpda
  00662	c7 84 24 8c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv136[rsp], 1
  0066d	eb 0b		 jmp	 SHORT $LN96@PlayerUpda
$LN95@PlayerUpda:
  0066f	c7 84 24 8c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv136[rsp], 0
$LN96@PlayerUpda:
  0067a	f3 0f 2a 84 24
	8c 01 00 00	 cvtsi2ss xmm0, DWORD PTR tv136[rsp]
  00683	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0068b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00693	f3 0f 10 4c 24
	24		 movss	 xmm1, DWORD PTR resultantVel$10[rsp]
  00699	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0069d	0f 28 c1	 movaps	 xmm0, xmm1
  006a0	f3 0f 11 44 24
	30		 movss	 DWORD PTR $T13[rsp], xmm0
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c

; 265  : 			AddForceLimitVelX(*playerData, playerData->transform, attk1MoveAmnts[plrAnim->curAnimFrame] * deltaTime() * attack1MoveAmnt * playerData->transform.scale.x, playerSpeed);

  006a6	f3 0f 10 44 24
	30		 movss	 xmm0, DWORD PTR $T13[rsp]
  006ac	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR playerSpeed
  006b4	e8 00 00 00 00	 call	 FMin
  006b9	f3 0f 2a 8c 24
	88 01 00 00	 cvtsi2ss xmm1, DWORD PTR tv256[rsp]
  006c2	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  006ca	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f800000
  006d2	f3 0f 59 c1	 mulss	 xmm0, xmm1
  006d6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  006dd	f3 0f 11 40 48	 movss	 DWORD PTR [rax+72], xmm0
  006e2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  006e9	c6 00 01	 mov	 BYTE PTR [rax], 1
  006ec	c6 05 00 00 00
	00 01		 mov	 BYTE PTR shouldDraw, 1
$LN12@PlayerUpda:

; 266  : 		}
; 267  : 		if (plrAnim->curAnimFrame == ATTACK_DMG_ANIM_INDEX) {

  006f3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR plrAnim
  006fa	0f b7 40 0a	 movzx	 eax, WORD PTR [rax+10]
  006fe	83 f8 01	 cmp	 eax, 1
  00701	0f 85 81 00 00
	00		 jne	 $LN13@PlayerUpda

; 268  : 			if (!attack1ColNode) {

  00707	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR attack1ColNode, 0
  0070f	75 49		 jne	 SHORT $LN15@PlayerUpda

; 269  : 				SetPtsAttk1(attack1Col);

  00711	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR playerData
  00718	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:attack1ColOffsets
  0071f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:attack1Col
  00726	e8 00 00 00 00	 call	 SetColliderAABB

; 270  : 				attack1Ent = (attack1ColNode = CreateCollider2(attack1Col, playerAttackTag, dontColLayer))->entity;

  0072b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00731	ba 04 00 00 00	 mov	 edx, 4
  00736	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:attack1Col
  0073d	e8 00 00 00 00	 call	 CreateCollider2
  00742	48 89 05 00 00
	00 00		 mov	 QWORD PTR attack1ColNode, rax
  00749	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR attack1ColNode
  00750	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00753	48 89 05 00 00
	00 00		 mov	 QWORD PTR attack1Ent, rax
$LN15@PlayerUpda:

; 271  : 			}
; 272  : 			if (!frm1LstFrm) memset(monkTakenDmg, 0, sizeof(bool) * noOfEnemies);

  0075a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR frm1LstFrm
  00761	85 c0		 test	 eax, eax
  00763	75 21		 jne	 SHORT $LN16@PlayerUpda
  00765	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfEnemies
  0076b	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR tv279[rsp], rax
  00773	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR monkTakenDmg
  0077a	33 c0		 xor	 eax, eax
  0077c	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR tv279[rsp]
  00784	f3 aa		 rep stosb
$LN16@PlayerUpda:

; 273  : 		}

  00786	eb 19		 jmp	 SHORT $LN14@PlayerUpda
$LN13@PlayerUpda:

; 209  : 	if (!attack1ColNode) return;

  00788	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR attack1ColNode, 0
  00790	75 02		 jne	 SHORT $LN106@PlayerUpda
  00792	eb 0d		 jmp	 SHORT $LN105@PlayerUpda
$LN106@PlayerUpda:

; 210  : 	DestroyCollider(&attack1ColNode);

  00794	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:attack1ColNode
  0079b	e8 00 00 00 00	 call	 DestroyCollider
  007a0	90		 npad	 1
$LN105@PlayerUpda:
$LN14@PlayerUpda:

; 274  : 		else TryDestAttk1();
; 275  : 	}

  007a1	e9 a0 01 00 00	 jmp	 $LN10@PlayerUpda
$LN9@PlayerUpda:

; 209  : 	if (!attack1ColNode) return;

  007a6	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR attack1ColNode, 0
  007ae	75 02		 jne	 SHORT $LN109@PlayerUpda
  007b0	eb 0d		 jmp	 SHORT $LN108@PlayerUpda
$LN109@PlayerUpda:

; 210  : 	DestroyCollider(&attack1ColNode);

  007b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:attack1ColNode
  007b9	e8 00 00 00 00	 call	 DestroyCollider
  007be	90		 npad	 1
$LN108@PlayerUpda:

; 276  : 	else {
; 277  : 		TryDestAttk1();
; 278  : 		if (movingX) {

  007bf	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR movingX
  007c6	85 c0		 test	 eax, eax
  007c8	0f 84 80 00 00
	00		 je	 $LN17@PlayerUpda

; 279  : 			StartAnim(plrAnim, walk + pressingKey[VK_LSHIFT]);

  007ce	b8 01 00 00 00	 mov	 eax, 1
  007d3	48 69 c0 a0 00
	00 00		 imul	 rax, rax, 160		; 000000a0H
  007da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressingKey
  007e1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  007e5	ff c0		 inc	 eax
  007e7	66 89 84 24 50
	01 00 00	 mov	 WORD PTR animation$[rsp], ax
  007ef	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR plrAnim
  007f6	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR animator$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\animations.h

; 30   : 	if (anim->animating == check) return;

  007fe	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR animator$[rsp]
  00806	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  0080a	0f b7 8c 24 50
	01 00 00	 movzx	 ecx, WORD PTR animation$[rsp]
  00812	3b c1		 cmp	 eax, ecx
  00814	75 02		 jne	 SHORT $LN114@PlayerUpda
  00816	eb 11		 jmp	 SHORT $LN113@PlayerUpda
$LN114@PlayerUpda:

; 27   : 	anim->curAnimFrame = -1;

  00818	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0081d	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR animator$[rsp]
  00825	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax
$LN113@PlayerUpda:

; 43   : 	animator->animating = animation;

  00829	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR animator$[rsp]
  00831	0f b7 8c 24 50
	01 00 00	 movzx	 ecx, WORD PTR animation$[rsp]
  00839	66 89 48 08	 mov	 WORD PTR [rax+8], cx

; 44   : 	animator->active = true;

  0083d	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR animator$[rsp]
  00845	c6 40 2c 01	 mov	 BYTE PTR [rax+44], 1
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c

; 280  : 		}

  00849	e9 f8 00 00 00	 jmp	 $LN18@PlayerUpda
$LN17@PlayerUpda:

; 281  : 		else if (idleTransImminent && (plrAnim->curAnimFrame != plrAnim->animFrameNo[idleTransition] - 1 || plrAnim->animating != idleTransition)) {//TODO: fix

  0084e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR idleTransImminent
  00855	85 c0		 test	 eax, eax
  00857	0f 84 91 00 00
	00		 je	 $LN19@PlayerUpda
  0085d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR plrAnim
  00864	0f b7 40 0a	 movzx	 eax, WORD PTR [rax+10]
  00868	b9 02 00 00 00	 mov	 ecx, 2
  0086d	48 6b c9 03	 imul	 rcx, rcx, 3
  00871	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR plrAnim
  00878	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0087b	0f b7 0c 0a	 movzx	 ecx, WORD PTR [rdx+rcx]
  0087f	ff c9		 dec	 ecx
  00881	3b c1		 cmp	 eax, ecx
  00883	75 10		 jne	 SHORT $LN21@PlayerUpda
  00885	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR plrAnim
  0088c	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00890	83 f8 03	 cmp	 eax, 3
  00893	74 59		 je	 SHORT $LN19@PlayerUpda
$LN21@PlayerUpda:

; 282  : 			StartAnim(plrAnim, idleTransition);

  00895	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR plrAnim
  0089c	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR animator$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\animations.h

; 30   : 	if (anim->animating == check) return;

  008a4	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR animator$[rsp]
  008ac	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  008b0	b9 03 00 00 00	 mov	 ecx, 3
  008b5	0f b7 c9	 movzx	 ecx, cx
  008b8	3b c1		 cmp	 eax, ecx
  008ba	75 02		 jne	 SHORT $LN121@PlayerUpda
  008bc	eb 11		 jmp	 SHORT $LN120@PlayerUpda
$LN121@PlayerUpda:

; 27   : 	anim->curAnimFrame = -1;

  008be	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  008c3	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR animator$[rsp]
  008cb	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax
$LN120@PlayerUpda:

; 43   : 	animator->animating = animation;

  008cf	b8 03 00 00 00	 mov	 eax, 3
  008d4	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR animator$[rsp]
  008dc	66 89 41 08	 mov	 WORD PTR [rcx+8], ax

; 44   : 	animator->active = true;

  008e0	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR animator$[rsp]
  008e8	c6 40 2c 01	 mov	 BYTE PTR [rax+44], 1
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c

; 283  : 		}

  008ec	eb 58		 jmp	 SHORT $LN20@PlayerUpda
$LN19@PlayerUpda:

; 284  : 		else {
; 285  : 			StartAnim(plrAnim, idle);

  008ee	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR plrAnim
  008f5	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR animator$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\animations.h

; 30   : 	if (anim->animating == check) return;

  008fd	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR animator$[rsp]
  00905	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00909	33 c9		 xor	 ecx, ecx
  0090b	0f b7 c9	 movzx	 ecx, cx
  0090e	3b c1		 cmp	 eax, ecx
  00910	75 02		 jne	 SHORT $LN128@PlayerUpda
  00912	eb 11		 jmp	 SHORT $LN127@PlayerUpda
$LN128@PlayerUpda:

; 27   : 	anim->curAnimFrame = -1;

  00914	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00919	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR animator$[rsp]
  00921	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax
$LN127@PlayerUpda:

; 43   : 	animator->animating = animation;

  00925	33 c0		 xor	 eax, eax
  00927	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR animator$[rsp]
  0092f	66 89 41 08	 mov	 WORD PTR [rcx+8], ax

; 44   : 	animator->active = true;

  00933	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR animator$[rsp]
  0093b	c6 40 2c 01	 mov	 BYTE PTR [rax+44], 1
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c

; 286  : 			idleTransImminent = false;

  0093f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR idleTransImminent, 0
$LN20@PlayerUpda:
$LN18@PlayerUpda:
$LN10@PlayerUpda:
$LN7@PlayerUpda:

; 290  : 	negPlrPos = NegVector(playerData->transform.position);

  00946	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  0094d	48 8b 40 0c	 mov	 rax, QWORD PTR [rax+12]
  00951	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR vector$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h

; 81   : 	_this.x = -vector.x;

  00959	f3 0f 10 84 24
	08 01 00 00	 movss	 xmm0, DWORD PTR vector$[rsp]
  00962	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00969	f3 0f 11 84 24
	28 01 00 00	 movss	 DWORD PTR _this$21[rsp], xmm0

; 82   : 	_this.y = -vector.y;

  00972	f3 0f 10 84 24
	0c 01 00 00	 movss	 xmm0, DWORD PTR vector$[rsp+4]
  0097b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00982	f3 0f 11 84 24
	2c 01 00 00	 movss	 DWORD PTR _this$21[rsp+4], xmm0

; 83   : 	return _this;

  0098b	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR _this$21[rsp]
  00993	48 89 44 24 38	 mov	 QWORD PTR $T14[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c

; 290  : 	negPlrPos = NegVector(playerData->transform.position);

  00998	48 8b 44 24 38	 mov	 rax, QWORD PTR $T14[rsp]
  0099d	48 89 05 00 00
	00 00		 mov	 QWORD PTR negPlrPos, rax

; 291  : 	if (SqrMagnitude(AddVectors(camPosition, playerData->transform.position)) >= nugEpsilon) {

  009a4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  009ab	48 8b 40 0c	 mov	 rax, QWORD PTR [rax+12]
  009af	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR rhs$[rsp], rax
  009b7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR camPosition
  009be	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR lhs$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h

; 35   : 	_this.x = lhs.x + rhs.x;

  009c6	f3 0f 10 84 24
	a8 00 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp]
  009cf	f3 0f 58 84 24
	c8 00 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp]
  009d8	f3 0f 11 84 24
	e8 00 00 00	 movss	 DWORD PTR _this$20[rsp], xmm0

; 36   : 	_this.y = lhs.y + rhs.y;

  009e1	f3 0f 10 84 24
	ac 00 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  009ea	f3 0f 58 84 24
	cc 00 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp+4]
  009f3	f3 0f 11 84 24
	ec 00 00 00	 movss	 DWORD PTR _this$20[rsp+4], xmm0

; 37   : 	return _this;

  009fc	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR _this$20[rsp]
  00a04	48 89 44 24 40	 mov	 QWORD PTR $T15[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c

; 291  : 	if (SqrMagnitude(AddVectors(camPosition, playerData->transform.position)) >= nugEpsilon) {

  00a09	48 8b 44 24 40	 mov	 rax, QWORD PTR $T15[rsp]
  00a0e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR vector$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h

; 125  : 	return vector.x * vector.x + vector.y * vector.y;

  00a16	f3 0f 10 84 24
	88 00 00 00	 movss	 xmm0, DWORD PTR vector$[rsp]
  00a1f	f3 0f 59 84 24
	88 00 00 00	 mulss	 xmm0, DWORD PTR vector$[rsp]
  00a28	f3 0f 10 8c 24
	8c 00 00 00	 movss	 xmm1, DWORD PTR vector$[rsp+4]
  00a31	f3 0f 59 8c 24
	8c 00 00 00	 mulss	 xmm1, DWORD PTR vector$[rsp+4]
  00a3a	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a3e	f3 0f 11 44 24
	48		 movss	 DWORD PTR $T16[rsp], xmm0
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c

; 291  : 	if (SqrMagnitude(AddVectors(camPosition, playerData->transform.position)) >= nugEpsilon) {

  00a44	f3 0f 10 44 24
	48		 movss	 xmm0, DWORD PTR $T16[rsp]
  00a4a	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR nugEpsilon
  00a51	0f 82 b3 00 00
	00		 jb	 $LN22@PlayerUpda

; 292  : 		ChangeCameraPosition(CamLerp(x), CamLerp(y));

  00a57	e8 00 00 00 00	 call	 limitedDeltaTime
  00a5c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41200000
  00a64	f3 0f 11 44 24
	78		 movss	 DWORD PTR t$[rsp], xmm0
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h

; 57   : 	return a * (1.0f - t) + b * t;

  00a6a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a72	f3 0f 5c 44 24
	78		 subss	 xmm0, DWORD PTR t$[rsp]
  00a78	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR camPosition
  00a80	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00a84	0f 28 c1	 movaps	 xmm0, xmm1
  00a87	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR negPlrPos
  00a8f	f3 0f 59 4c 24
	78		 mulss	 xmm1, DWORD PTR t$[rsp]
  00a95	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a99	f3 0f 11 44 24
	58		 movss	 DWORD PTR $T17[rsp], xmm0
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c

; 292  : 		ChangeCameraPosition(CamLerp(x), CamLerp(y));

  00a9f	f3 0f 10 44 24
	58		 movss	 xmm0, DWORD PTR $T17[rsp]
  00aa5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR camPosition, xmm0
  00aad	e8 00 00 00 00	 call	 limitedDeltaTime
  00ab2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41200000
  00aba	f3 0f 11 44 24
	70		 movss	 DWORD PTR t$[rsp], xmm0
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h

; 57   : 	return a * (1.0f - t) + b * t;

  00ac0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ac8	f3 0f 5c 44 24
	70		 subss	 xmm0, DWORD PTR t$[rsp]
  00ace	f3 0f 10 0d 04
	00 00 00	 movss	 xmm1, DWORD PTR camPosition+4
  00ad6	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00ada	0f 28 c1	 movaps	 xmm0, xmm1
  00add	f3 0f 10 0d 04
	00 00 00	 movss	 xmm1, DWORD PTR negPlrPos+4
  00ae5	f3 0f 59 4c 24
	70		 mulss	 xmm1, DWORD PTR t$[rsp]
  00aeb	f3 0f 58 c1	 addss	 xmm0, xmm1
  00aef	f3 0f 11 44 24
	68		 movss	 DWORD PTR $T18[rsp], xmm0
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c

; 292  : 		ChangeCameraPosition(CamLerp(x), CamLerp(y));

  00af5	f3 0f 10 44 24
	68		 movss	 xmm0, DWORD PTR $T18[rsp]
  00afb	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR camPosition+4, xmm0
  00b03	c6 05 00 00 00
	00 01		 mov	 BYTE PTR shouldMoveCam, 1
$LN22@PlayerUpda:

; 293  : 	}
; 294  : 	if (playerImmuneET < immuneTime) {

  00b0a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR immuneTime
  00b12	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR playerImmuneET
  00b19	76 6b		 jbe	 SHORT $LN23@PlayerUpda
; File C:\Users\drago\source\repos\cGame - less comments\cGame\main.h

; 343  : 	QueryPerformanceCounter(&cTime);

  00b1b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cTime
  00b22	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 344  : 	return (float)((cTime.QuadPart - pTime.QuadPart) * 1000000 / frequency) / 1000000.0f * timeScale;

  00b28	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR pTime
  00b2f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR cTime
  00b36	48 2b c8	 sub	 rcx, rax
  00b39	48 8b c1	 mov	 rax, rcx
  00b3c	48 69 c0 40 42
	0f 00		 imul	 rax, rax, 1000000	; 000f4240H
  00b43	48 99		 cdq
  00b45	48 f7 3d 00 00
	00 00		 idiv	 QWORD PTR frequency
  00b4c	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  00b51	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@49742400
  00b59	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR timeScale
  00b61	f3 0f 11 44 24
	6c		 movss	 DWORD PTR $T19[rsp], xmm0
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c

; 295  : 		playerImmuneET += deltaTime();

  00b67	f3 0f 10 44 24
	6c		 movss	 xmm0, DWORD PTR $T19[rsp]
  00b6d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR playerImmuneET
  00b75	f3 0f 58 c8	 addss	 xmm1, xmm0
  00b79	0f 28 c1	 movaps	 xmm0, xmm1
  00b7c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR playerImmuneET, xmm0

; 296  : 	}

  00b84	eb 07		 jmp	 SHORT $LN24@PlayerUpda
$LN23@PlayerUpda:

; 297  : 	else {
; 298  : 		playerFullyImmune = false;

  00b86	c6 05 00 00 00
	00 00		 mov	 BYTE PTR playerFullyImmune, 0
$LN24@PlayerUpda:

; 299  : 	}/*
; 300  : 	printf("playing the %uth animation @ frame %u\n", plrAnim->animating, plrAnim->curAnimFrame);
; 301  : 	printf("the player is %sgrouned.\n", plrGrounded ? "" : "not ");*/
; 302  : 	nLastFrmJmp = !(lastFrmJmp = jumping);

  00b8d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR jumping
  00b94	88 05 00 00 00
	00		 mov	 BYTE PTR lastFrmJmp, al
  00b9a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR lastFrmJmp
  00ba1	85 c0		 test	 eax, eax
  00ba3	75 0d		 jne	 SHORT $LN47@PlayerUpda
  00ba5	c7 84 24 98 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv335[rsp], 1
  00bb0	eb 0b		 jmp	 SHORT $LN48@PlayerUpda
$LN47@PlayerUpda:
  00bb2	c7 84 24 98 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv335[rsp], 0
$LN48@PlayerUpda:
  00bbd	0f b6 84 24 98
	01 00 00	 movzx	 eax, BYTE PTR tv335[rsp]
  00bc5	88 05 00 00 00
	00		 mov	 BYTE PTR nLastFrmJmp, al

; 303  : 	frm1LstFrm = plrAnim->curAnimFrame == 1;

  00bcb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR plrAnim
  00bd2	0f b7 40 0a	 movzx	 eax, WORD PTR [rax+10]
  00bd6	83 f8 01	 cmp	 eax, 1
  00bd9	75 0d		 jne	 SHORT $LN49@PlayerUpda
  00bdb	c7 84 24 9c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv340[rsp], 1
  00be6	eb 0b		 jmp	 SHORT $LN50@PlayerUpda
$LN49@PlayerUpda:
  00be8	c7 84 24 9c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv340[rsp], 0
$LN50@PlayerUpda:
  00bf3	83 bc 24 9c 01
	00 00 00	 cmp	 DWORD PTR tv340[rsp], 0
  00bfb	75 0d		 jne	 SHORT $LN51@PlayerUpda
  00bfd	c7 84 24 a0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv342[rsp], 0
  00c08	eb 0b		 jmp	 SHORT $LN52@PlayerUpda
$LN51@PlayerUpda:
  00c0a	c7 84 24 a0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv342[rsp], 1
$LN52@PlayerUpda:
  00c15	0f b6 84 24 a0
	01 00 00	 movzx	 eax, BYTE PTR tv342[rsp]
  00c1d	88 05 00 00 00
	00		 mov	 BYTE PTR frm1LstFrm, al

; 304  : 	groundedLastFrm = plrGrounded;

  00c23	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR plrGrounded
  00c2a	88 05 00 00 00
	00		 mov	 BYTE PTR groundedLastFrm, al

; 305  : }

  00c30	48 8b cc	 mov	 rcx, rsp
  00c33	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PlayerUpdate$rtcFrameData
  00c3a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00c3f	48 81 c4 b0 01
	00 00		 add	 rsp, 432		; 000001b0H
  00c46	5f		 pop	 rdi
  00c47	c3		 ret	 0
PlayerUpdate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h
;	COMDAT NegVector
_TEXT	SEGMENT
_this$ = 40
vector$ = 80
NegVector PROC						; COMDAT

; 79   : inline Vector2 NegVector(Vector2 vector) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0000f	b9 08 00 00 00	 mov	 ecx, 8
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2E93F1C0_math@h
  00027	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 80   : 	Vector2 _this;
; 81   : 	_this.x = -vector.x;

  0002c	f3 0f 10 44 24
	50		 movss	 xmm0, DWORD PTR vector$[rsp]
  00032	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00039	f3 0f 11 44 24
	28		 movss	 DWORD PTR _this$[rsp], xmm0

; 82   : 	_this.y = -vector.y;

  0003f	f3 0f 10 44 24
	54		 movss	 xmm0, DWORD PTR vector$[rsp+4]
  00045	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0004c	f3 0f 11 44 24
	2c		 movss	 DWORD PTR _this$[rsp+4], xmm0

; 83   : 	return _this;

  00052	48 8b 44 24 28	 mov	 rax, QWORD PTR _this$[rsp]

; 84   : }

  00057	48 8b f8	 mov	 rdi, rax
  0005a	48 8b cc	 mov	 rcx, rsp
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:NegVector$rtcFrameData
  00064	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00069	48 8b c7	 mov	 rax, rdi
  0006c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00070	5f		 pop	 rdi
  00071	c3		 ret	 0
NegVector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h
;	COMDAT SqrMagnitude
_TEXT	SEGMENT
vector$ = 64
SqrMagnitude PROC					; COMDAT

; 124  : inline float SqrMagnitude(Vector2 vector) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2E93F1C0_math@h
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 125  : 	return vector.x * vector.x + vector.y * vector.y;

  00016	f3 0f 10 44 24
	40		 movss	 xmm0, DWORD PTR vector$[rsp]
  0001c	f3 0f 59 44 24
	40		 mulss	 xmm0, DWORD PTR vector$[rsp]
  00022	f3 0f 10 4c 24
	44		 movss	 xmm1, DWORD PTR vector$[rsp+4]
  00028	f3 0f 59 4c 24
	44		 mulss	 xmm1, DWORD PTR vector$[rsp+4]
  0002e	f3 0f 58 c1	 addss	 xmm0, xmm1

; 126  : }//a dot a = SqrMagnitude(a), but dotting the vector with itself may incur more stack allocation and memory jumps if the compiler decides against inlining the dotproduct function.

  00032	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00036	5f		 pop	 rdi
  00037	c3		 ret	 0
SqrMagnitude ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\main.h
;	COMDAT limitedDeltaTime
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
$T3 = 56
tv68 = 60
tv75 = 64
limitedDeltaTime PROC					; COMDAT

; 347  : inline float limitedDeltaTime() {

$LN13:
  00000	40 57		 push	 rdi
  00002	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E0493894_main@h
  0000d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 343  : 	QueryPerformanceCounter(&cTime);

  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cTime
  00019	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 344  : 	return (float)((cTime.QuadPart - pTime.QuadPart) * 1000000 / frequency) / 1000000.0f * timeScale;

  0001f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR pTime
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR cTime
  0002d	48 2b c8	 sub	 rcx, rax
  00030	48 8b c1	 mov	 rax, rcx
  00033	48 69 c0 40 42
	0f 00		 imul	 rax, rax, 1000000	; 000f4240H
  0003a	48 99		 cdq
  0003c	48 f7 3d 00 00
	00 00		 idiv	 QWORD PTR frequency
  00043	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  00048	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@49742400
  00050	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR timeScale
  00058	f3 0f 11 44 24
	30		 movss	 DWORD PTR $T1[rsp], xmm0

; 348  : 	return Min(deltaTime(), frameTime * MAX_FPS_MULTIPLIER);

  0005e	f3 0f 10 44 24
	30		 movss	 xmm0, DWORD PTR $T1[rsp]
  00064	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR frameTime
  0006c	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40400000
  00074	0f 2f c8	 comiss	 xmm1, xmm0
  00077	76 0a		 jbe	 SHORT $LN3@limitedDel
  00079	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  00081	eb 08		 jmp	 SHORT $LN4@limitedDel
$LN3@limitedDel:
  00083	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN4@limitedDel:

; 343  : 	QueryPerformanceCounter(&cTime);

  0008b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cTime
  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 344  : 	return (float)((cTime.QuadPart - pTime.QuadPart) * 1000000 / frequency) / 1000000.0f * timeScale;

  00098	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR pTime
  0009f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR cTime
  000a6	48 2b c8	 sub	 rcx, rax
  000a9	48 8b c1	 mov	 rax, rcx
  000ac	48 69 c0 40 42
	0f 00		 imul	 rax, rax, 1000000	; 000f4240H
  000b3	48 99		 cdq
  000b5	48 f7 3d 00 00
	00 00		 idiv	 QWORD PTR frequency
  000bc	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  000c1	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@49742400
  000c9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR timeScale
  000d1	f3 0f 11 44 24
	34		 movss	 DWORD PTR $T2[rsp], xmm0

; 348  : 	return Min(deltaTime(), frameTime * MAX_FPS_MULTIPLIER);

  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR frameTime
  000df	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40400000
  000e7	f3 0f 10 4c 24
	34		 movss	 xmm1, DWORD PTR $T2[rsp]
  000ed	0f 2f c8	 comiss	 xmm1, xmm0
  000f0	76 0a		 jbe	 SHORT $LN5@limitedDel
  000f2	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  000fa	eb 08		 jmp	 SHORT $LN6@limitedDel
$LN5@limitedDel:
  000fc	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN6@limitedDel:

; 343  : 	QueryPerformanceCounter(&cTime);

  00104	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cTime
  0010b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 344  : 	return (float)((cTime.QuadPart - pTime.QuadPart) * 1000000 / frequency) / 1000000.0f * timeScale;

  00111	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR pTime
  00118	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR cTime
  0011f	48 2b c8	 sub	 rcx, rax
  00122	48 8b c1	 mov	 rax, rcx
  00125	48 69 c0 40 42
	0f 00		 imul	 rax, rax, 1000000	; 000f4240H
  0012c	48 99		 cdq
  0012e	48 f7 3d 00 00
	00 00		 idiv	 QWORD PTR frequency
  00135	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  0013a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@49742400
  00142	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR timeScale
  0014a	f3 0f 11 44 24
	38		 movss	 DWORD PTR $T3[rsp], xmm0

; 348  : 	return Min(deltaTime(), frameTime * MAX_FPS_MULTIPLIER);

  00150	f3 0f 10 44 24
	38		 movss	 xmm0, DWORD PTR $T3[rsp]
  00156	f3 0f 2a 4c 24
	3c		 cvtsi2ss xmm1, DWORD PTR tv68[rsp]
  0015c	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00160	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR frameTime
  00168	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40400000
  00170	f3 0f 2a 54 24
	40		 cvtsi2ss xmm2, DWORD PTR tv75[rsp]
  00176	f3 0f 59 ca	 mulss	 xmm1, xmm2
  0017a	f3 0f 58 c1	 addss	 xmm0, xmm1

; 349  : }

  0017e	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00182	5f		 pop	 rdi
  00183	c3		 ret	 0
limitedDeltaTime ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\animations.h
;	COMDAT ResetAnim
_TEXT	SEGMENT
anim$ = 48
ResetAnim PROC						; COMDAT

; 26   : inline void ResetAnim(Animator* anim) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__565DCB0D_animations@h
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 27   : 	anim->curAnimFrame = -1;

  00016	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR anim$[rsp]
  00020	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax

; 28   : }

  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	5f		 pop	 rdi
  00029	c3		 ret	 0
ResetAnim ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\animations.h
;	COMDAT CheckResetAnim
_TEXT	SEGMENT
anim$ = 48
check$ = 56
CheckResetAnim PROC					; COMDAT

; 29   : inline void CheckResetAnim(Animator* anim, ushort check) {

$LN6:
  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__565DCB0D_animations@h
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 30   : 	if (anim->animating == check) return;

  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR anim$[rsp]
  00020	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00024	0f b7 4c 24 38	 movzx	 ecx, WORD PTR check$[rsp]
  00029	3b c1		 cmp	 eax, ecx
  0002b	75 02		 jne	 SHORT $LN2@CheckReset
  0002d	eb 0e		 jmp	 SHORT $LN1@CheckReset
$LN2@CheckReset:

; 27   : 	anim->curAnimFrame = -1;

  0002f	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00034	48 8b 4c 24 30	 mov	 rcx, QWORD PTR anim$[rsp]
  00039	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax
$LN1@CheckReset:

; 31   : 	ResetAnim(anim);
; 32   : }

  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5f		 pop	 rdi
  00042	c3		 ret	 0
CheckResetAnim ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\animations.h
;	COMDAT FinishedAnim
_TEXT	SEGMENT
tv77 = 32
tv79 = 36
animator$ = 64
animation$ = 72
FinishedAnim PROC					; COMDAT

; 33   : inline bool FinishedAnim(Animator *animator, ushort animation) {

$LN7:
  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__565DCB0D_animations@h
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 34   : 	return animator->animating != animation || animator->curAnimFrame == animator->animFrameNo[animation] - 1;

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR animator$[rsp]
  00020	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00024	0f b7 4c 24 48	 movzx	 ecx, WORD PTR animation$[rsp]
  00029	3b c1		 cmp	 eax, ecx
  0002b	75 2a		 jne	 SHORT $LN3@FinishedAn
  0002d	48 8b 44 24 40	 mov	 rax, QWORD PTR animator$[rsp]
  00032	0f b7 40 0a	 movzx	 eax, WORD PTR [rax+10]
  00036	0f b7 4c 24 48	 movzx	 ecx, WORD PTR animation$[rsp]
  0003b	48 8b 54 24 40	 mov	 rdx, QWORD PTR animator$[rsp]
  00040	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00043	0f b7 0c 4a	 movzx	 ecx, WORD PTR [rdx+rcx*2]
  00047	ff c9		 dec	 ecx
  00049	3b c1		 cmp	 eax, ecx
  0004b	74 0a		 je	 SHORT $LN3@FinishedAn
  0004d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
  00055	eb 08		 jmp	 SHORT $LN4@FinishedAn
$LN3@FinishedAn:
  00057	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
$LN4@FinishedAn:
  0005f	83 7c 24 20 00	 cmp	 DWORD PTR tv77[rsp], 0
  00064	75 0a		 jne	 SHORT $LN5@FinishedAn
  00066	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv79[rsp], 0
  0006e	eb 08		 jmp	 SHORT $LN6@FinishedAn
$LN5@FinishedAn:
  00070	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv79[rsp], 1
$LN6@FinishedAn:
  00078	0f b6 44 24 24	 movzx	 eax, BYTE PTR tv79[rsp]

; 35   : }

  0007d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00081	5f		 pop	 rdi
  00082	c3		 ret	 0
FinishedAnim ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\animations.h
;	COMDAT FinishedAnim2
_TEXT	SEGMENT
isAnim$ = 32
tv68 = 36
tv70 = 40
tv80 = 44
tv82 = 48
animator$ = 80
animation$ = 88
stopIndex$ = 96
FinishedAnim2 PROC					; COMDAT

; 37   : inline bool FinishedAnim2(Animator *animator, ushort animation, ushort stopIndex) {

$LN11:
  00000	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  00006	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00010	57		 push	 rdi
  00011	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__565DCB0D_animations@h
  0001c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 38   : 	bool isAnim = animator->animating == animation;

  00021	48 8b 44 24 50	 mov	 rax, QWORD PTR animator$[rsp]
  00026	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  0002a	0f b7 4c 24 58	 movzx	 ecx, WORD PTR animation$[rsp]
  0002f	3b c1		 cmp	 eax, ecx
  00031	75 0a		 jne	 SHORT $LN3@FinishedAn
  00033	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  0003b	eb 08		 jmp	 SHORT $LN4@FinishedAn
$LN3@FinishedAn:
  0003d	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN4@FinishedAn:
  00045	83 7c 24 24 00	 cmp	 DWORD PTR tv68[rsp], 0
  0004a	75 0a		 jne	 SHORT $LN5@FinishedAn
  0004c	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
  00054	eb 08		 jmp	 SHORT $LN6@FinishedAn
$LN5@FinishedAn:
  00056	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
$LN6@FinishedAn:
  0005e	0f b6 44 24 28	 movzx	 eax, BYTE PTR tv70[rsp]
  00063	88 44 24 20	 mov	 BYTE PTR isAnim$[rsp], al

; 39   : 	return animator->animating != animation || animator->curAnimFrame == stopIndex;

  00067	48 8b 44 24 50	 mov	 rax, QWORD PTR animator$[rsp]
  0006c	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00070	0f b7 4c 24 58	 movzx	 ecx, WORD PTR animation$[rsp]
  00075	3b c1		 cmp	 eax, ecx
  00077	75 1c		 jne	 SHORT $LN7@FinishedAn
  00079	48 8b 44 24 50	 mov	 rax, QWORD PTR animator$[rsp]
  0007e	0f b7 40 0a	 movzx	 eax, WORD PTR [rax+10]
  00082	0f b7 4c 24 60	 movzx	 ecx, WORD PTR stopIndex$[rsp]
  00087	3b c1		 cmp	 eax, ecx
  00089	74 0a		 je	 SHORT $LN7@FinishedAn
  0008b	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv80[rsp], 0
  00093	eb 08		 jmp	 SHORT $LN8@FinishedAn
$LN7@FinishedAn:
  00095	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv80[rsp], 1
$LN8@FinishedAn:
  0009d	83 7c 24 2c 00	 cmp	 DWORD PTR tv80[rsp], 0
  000a2	75 0a		 jne	 SHORT $LN9@FinishedAn
  000a4	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  000ac	eb 08		 jmp	 SHORT $LN10@FinishedAn
$LN9@FinishedAn:
  000ae	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN10@FinishedAn:
  000b6	0f b6 44 24 30	 movzx	 eax, BYTE PTR tv82[rsp]

; 40   : }

  000bb	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000bf	5f		 pop	 rdi
  000c0	c3		 ret	 0
FinishedAnim2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\animations.h
;	COMDAT StartAnim
_TEXT	SEGMENT
animator$ = 48
animation$ = 56
StartAnim PROC						; COMDAT

; 41   : inline void StartAnim(Animator* animator, ushort animation) {

$LN8:
  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__565DCB0D_animations@h
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 30   : 	if (anim->animating == check) return;

  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR animator$[rsp]
  00020	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00024	0f b7 4c 24 38	 movzx	 ecx, WORD PTR animation$[rsp]
  00029	3b c1		 cmp	 eax, ecx
  0002b	75 02		 jne	 SHORT $LN4@StartAnim
  0002d	eb 0e		 jmp	 SHORT $LN3@StartAnim
$LN4@StartAnim:

; 27   : 	anim->curAnimFrame = -1;

  0002f	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00034	48 8b 4c 24 30	 mov	 rcx, QWORD PTR animator$[rsp]
  00039	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax
$LN3@StartAnim:

; 42   : 	CheckResetAnim(animator, animation);
; 43   : 	animator->animating = animation;

  0003d	48 8b 44 24 30	 mov	 rax, QWORD PTR animator$[rsp]
  00042	0f b7 4c 24 38	 movzx	 ecx, WORD PTR animation$[rsp]
  00047	66 89 48 08	 mov	 WORD PTR [rax+8], cx

; 44   : 	animator->active = true;

  0004b	48 8b 44 24 30	 mov	 rax, QWORD PTR animator$[rsp]
  00050	c6 40 2c 01	 mov	 BYTE PTR [rax+44], 1

; 45   : }

  00054	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00058	5f		 pop	 rdi
  00059	c3		 ret	 0
StartAnim ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\animations.h
;	COMDAT StartNonLoopAnim3
_TEXT	SEGMENT
tv73 = 32
animator$ = 64
animation$ = 72
stopIndex$ = 80
StartNonLoopAnim3 PROC					; COMDAT

; 58   : inline void StartNonLoopAnim3(Animator* animator, ushort animation, ushort stopIndex) {

$LN20:
  00000	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  00006	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00010	57		 push	 rdi
  00011	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__565DCB0D_animations@h
  0001c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 30   : 	if (anim->animating == check) return;

  00021	48 8b 44 24 40	 mov	 rax, QWORD PTR animator$[rsp]
  00026	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  0002a	0f b7 4c 24 48	 movzx	 ecx, WORD PTR animation$[rsp]
  0002f	3b c1		 cmp	 eax, ecx
  00031	75 02		 jne	 SHORT $LN6@StartNonLo
  00033	eb 0e		 jmp	 SHORT $LN5@StartNonLo
$LN6@StartNonLo:

; 27   : 	anim->curAnimFrame = -1;

  00035	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR animator$[rsp]
  0003f	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax
$LN5@StartNonLo:

; 59   : 	CheckResetAnim(animator, animation);
; 60   : 	animator->active = !FinishedAnim2(animator, animation, stopIndex);

  00043	44 0f b7 44 24
	50		 movzx	 r8d, WORD PTR stopIndex$[rsp]
  00049	0f b7 54 24 48	 movzx	 edx, WORD PTR animation$[rsp]
  0004e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR animator$[rsp]
  00053	e8 00 00 00 00	 call	 FinishedAnim2
  00058	0f b6 c0	 movzx	 eax, al
  0005b	85 c0		 test	 eax, eax
  0005d	75 0a		 jne	 SHORT $LN3@StartNonLo
  0005f	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
  00067	eb 08		 jmp	 SHORT $LN4@StartNonLo
$LN3@StartNonLo:
  00069	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
$LN4@StartNonLo:
  00071	48 8b 44 24 40	 mov	 rax, QWORD PTR animator$[rsp]
  00076	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR tv73[rsp]
  0007b	88 48 2c	 mov	 BYTE PTR [rax+44], cl

; 61   : 	animator->animating = animation;

  0007e	48 8b 44 24 40	 mov	 rax, QWORD PTR animator$[rsp]
  00083	0f b7 4c 24 48	 movzx	 ecx, WORD PTR animation$[rsp]
  00088	66 89 48 08	 mov	 WORD PTR [rax+8], cx

; 62   : }

  0008c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00090	5f		 pop	 rdi
  00091	c3		 ret	 0
StartNonLoopAnim3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h
;	COMDAT Lerp
_TEXT	SEGMENT
a$ = 64
b$ = 72
t$ = 80
Lerp	PROC						; COMDAT

; 56   : inline float Lerp(float a, float b, float t) {

$LN3:
  00000	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  00006	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  0000c	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  00012	57		 push	 rdi
  00013	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__46B7CB64_math@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 57   : 	return a * (1.0f - t) + b * t;

  00023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0002b	f3 0f 5c 44 24
	50		 subss	 xmm0, DWORD PTR t$[rsp]
  00031	f3 0f 10 4c 24
	40		 movss	 xmm1, DWORD PTR a$[rsp]
  00037	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0003b	0f 28 c1	 movaps	 xmm0, xmm1
  0003e	f3 0f 10 4c 24
	48		 movss	 xmm1, DWORD PTR b$[rsp]
  00044	f3 0f 59 4c 24
	50		 mulss	 xmm1, DWORD PTR t$[rsp]
  0004a	f3 0f 58 c1	 addss	 xmm0, xmm1

; 58   : }

  0004e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00052	5f		 pop	 rdi
  00053	c3		 ret	 0
Lerp	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c
_TEXT	SEGMENT
i$1 = 32
tv83 = 36
PlayerFinalize PROC

; 183  : void PlayerFinalize() {

$LN6:
  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__460EF0CE_EntityManager@c
  0000d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 184  : 	DeleteEntity(playerEntity, true);

  00012	b2 01		 mov	 dl, 1
  00014	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR playerEntity
  0001b	e8 00 00 00 00	 call	 DeleteEntity
  00020	90		 npad	 1

; 185  : 	for (ushort i = 0; i < playerData->animator->noOfAnims; i++) glDeleteTextures(playerData->animator->animFrameNo[i], playerData->animator->frameTextures[i]);

  00021	33 c0		 xor	 eax, eax
  00023	66 89 44 24 20	 mov	 WORD PTR i$1[rsp], ax
  00028	eb 0d		 jmp	 SHORT $LN4@PlayerFina
$LN2@PlayerFina:
  0002a	0f b7 44 24 20	 movzx	 eax, WORD PTR i$1[rsp]
  0002f	66 ff c0	 inc	 ax
  00032	66 89 44 24 20	 mov	 WORD PTR i$1[rsp], ax
$LN4@PlayerFina:
  00037	0f b7 44 24 20	 movzx	 eax, WORD PTR i$1[rsp]
  0003c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR playerData
  00043	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  00047	0f b7 49 22	 movzx	 ecx, WORD PTR [rcx+34]
  0004b	3b c1		 cmp	 eax, ecx
  0004d	7d 44		 jge	 SHORT $LN3@PlayerFina
  0004f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  00056	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0005a	0f b7 4c 24 20	 movzx	 ecx, WORD PTR i$1[rsp]
  0005f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00063	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR playerData
  0006a	48 8b 52 28	 mov	 rdx, QWORD PTR [rdx+40]
  0006e	44 0f b7 44 24
	20		 movzx	 r8d, WORD PTR i$1[rsp]
  00074	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00077	42 0f b7 14 42	 movzx	 edx, WORD PTR [rdx+r8*2]
  0007c	89 54 24 24	 mov	 DWORD PTR tv83[rsp], edx
  00080	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00084	8b 44 24 24	 mov	 eax, DWORD PTR tv83[rsp]
  00088	8b c8		 mov	 ecx, eax
  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glDeleteTextures
  00090	90		 npad	 1
  00091	eb 97		 jmp	 SHORT $LN2@PlayerFina
$LN3@PlayerFina:

; 186  : }

  00093	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00097	5f		 pop	 rdi
  00098	c3		 ret	 0
PlayerFinalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c
;	COMDAT TryDestAttk1
_TEXT	SEGMENT
TryDestAttk1 PROC					; COMDAT

; 208  : inline void TryDestAttk1() {

$LN4:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__460EF0CE_EntityManager@c
  0000d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 209  : 	if (!attack1ColNode) return;

  00012	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR attack1ColNode, 0
  0001a	75 02		 jne	 SHORT $LN2@TryDestAtt
  0001c	eb 0d		 jmp	 SHORT $LN1@TryDestAtt
$LN2@TryDestAtt:

; 210  : 	DestroyCollider(&attack1ColNode);

  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:attack1ColNode
  00025	e8 00 00 00 00	 call	 DestroyCollider
  0002a	90		 npad	 1
$LN1@TryDestAtt:

; 211  : }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5f		 pop	 rdi
  00030	c3		 ret	 0
TryDestAttk1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\Player.c
_TEXT	SEGMENT
animation$ = 48
PlrFinAnim PROC

; 215  : static bool PlrFinAnim(int animation) {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	57		 push	 rdi
  00005	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__460EF0CE_EntityManager@c
  00010	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 216  : 	return FinishedAnim(plrAnim, animation);

  00015	0f b7 54 24 30	 movzx	 edx, WORD PTR animation$[rsp]
  0001a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR plrAnim
  00021	e8 00 00 00 00	 call	 FinishedAnim

; 217  : }

  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5f		 pop	 rdi
  0002b	c3		 ret	 0
PlrFinAnim ENDP
_TEXT	ENDS
END
