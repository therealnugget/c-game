; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35211.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	pressingKey
PUBLIC	timeScale
PUBLIC	pressedKey
PUBLIC	vecSize
PUBLIC	vSyncCount
PUBLIC	??_C@_06HKHHAOPL@broken@			; `string'
PUBLIC	??_C@_0BB@GIFJGILP@cannot?5read?5file@		; `string'
PUBLIC	??_C@_08FJBPFDBJ@?$CDshader?5@			; `string'
PUBLIC	??_C@_06HLKHCFCI@vertex@			; `string'
PUBLIC	??_C@_08IEIKBDDE@fragment@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_0BN@HPODFHAK@failed?5to?5compile?5?$CFs?5shader?6@ ; `string'
PUBLIC	??_C@_0BF@LBNLFPA@shader?5is?5broken?6?$CFs?6@	; `string'
PUBLIC	??_C@_0BB@EKFBNKE@saves?1save_1?4txt@		; `string'
PUBLIC	??_C@_0CF@JPPIGLOJ@?6Loading?5save?5file?5took?5?$CFf?5seco@ ; `string'
PUBLIC	??_C@_0FN@GDBHHMPF@Hello?0?5my?5name?5is?5Kevin?0?5I?5have@ ; `string'
PUBLIC	??_C@_0BH@PCNKIOJF@your?5program?5is?5broken@	; `string'
PUBLIC	??_C@_0DB@OIADNLIG@?$CFd?5texture?5slots?5are?5available?5@ ; `string'
PUBLIC	??_C@_1DC@DMAGFLJM@?$AA?4?$AA?4?$AA?1?$AAx?$AA6?$AA4?$AA?1?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?1@ ; `string'
PUBLIC	??_C@_1BE@BFMNEOPM@?$AAc?$AAG?$AAa?$AAm?$AAe?$AA?4?$AAe?$AAx?$AAe@ ; `string'
PUBLIC	fullScreenET
PUBLIC	ss
PUBLIC	startingFrame
EXTRN	__imp_glGetIntegerv:PROC
EXTRN	__imp_glewInit:PROC
EXTRN	__imp_GetKeyState:PROC
EXTRN	__imp_glfwWindowShouldClose:PROC
EXTRN	__imp___glewLinkProgram:QWORD
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp___glewDeleteShader:QWORD
EXTRN	__imp_glDrawElements:PROC
EXTRN	__imp_CreateProcessW:PROC
EXTRN	__imp___glewGetProgramInfoLog:QWORD
EXTRN	__imp__time64:PROC
EXTRN	__imp_glfwGetPrimaryMonitor:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_glHint:PROC
EXTRN	__imp___glewShaderSource:QWORD
EXTRN	__imp___glewDeleteProgram:QWORD
EXTRN	__imp___glewAttachShader:QWORD
EXTRN	__imp___glewBufferData:QWORD
EXTRN	__imp_glfwMakeContextCurrent:PROC
EXTRN	__imp_glfwWindowHint:PROC
EXTRN	__imp_Sleep:PROC
EXTRN	__imp_glBlendFunc:PROC
EXTRN	__imp_glfwCreateWindow:PROC
EXTRN	__imp_puts:PROC
EXTRN	__imp_rand:PROC
EXTRN	__imp_glfwInit:PROC
EXTRN	__imp_glfwPollEvents:PROC
EXTRN	__imp_glfwSetWindowMonitor:PROC
EXTRN	__imp_glfwTerminate:PROC
EXTRN	__imp___glewGetProgramiv:QWORD
EXTRN	__imp___glewUniform2f:QWORD
EXTRN	__imp___glewValidateProgram:QWORD
EXTRN	__imp___glewGetShaderInfoLog:QWORD
EXTRN	__imp_glfwGetVideoMode:PROC
EXTRN	__imp_glEnable:PROC
EXTRN	__imp___glewCreateProgram:QWORD
EXTRN	__imp_srand:PROC
EXTRN	__imp_glfwGetWindowAttrib:PROC
EXTRN	__imp___glewCreateShader:QWORD
EXTRN	__imp___glewCompileShader:QWORD
EXTRN	__imp___glewGetShaderiv:QWORD
EXTRN	__imp_glClear:PROC
EXTRN	__imp_glfwSwapInterval:PROC
EXTRN	__imp_exit:PROC
EXTRN	__imp_glfwSwapBuffers:PROC
pressingKey DB	0feH DUP (?)
	ALIGN	4

pressedKey DB	0feH DUP (?)
COMM	pressedControl:BYTE
	ALIGN	8

ss	DQ	01H DUP (?)
COMM	playerData:QWORD
COMM	playerFullyImmune:BYTE
COMM	player:BYTE:060H
COMM	playerImmuneET:DWORD
COMM	plrImmune:QWORD
COMM	notFocussed:BYTE
COMM	hb_Bar:BYTE:018H
_DATA	ENDS
;	COMDAT ??_C@_1BE@BFMNEOPM@?$AAc?$AAG?$AAa?$AAm?$AAe?$AA?4?$AAe?$AAx?$AAe@
CONST	SEGMENT
??_C@_1BE@BFMNEOPM@?$AAc?$AAG?$AAa?$AAm?$AAe?$AA?4?$AAe?$AAx?$AAe@ DB 'c', 00H
	DB	'G', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '.', 00H, 'e', 00H, 'x'
	DB	00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@DMAGFLJM@?$AA?4?$AA?4?$AA?1?$AAx?$AA6?$AA4?$AA?1?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?1@
CONST	SEGMENT
??_C@_1DC@DMAGFLJM@?$AA?4?$AA?4?$AA?1?$AAx?$AA6?$AA4?$AA?1?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?1@ DB '.'
	DB	00H, '.', 00H, '/', 00H, 'x', 00H, '6', 00H, '4', 00H, '/', 00H
	DB	'R', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H, 'e'
	DB	00H, '/', 00H, 'c', 00H, 'G', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	'.', 00H, 'e', 00H, 'x', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@OIADNLIG@?$CFd?5texture?5slots?5are?5available?5@
CONST	SEGMENT
??_C@_0DB@OIADNLIG@?$CFd?5texture?5slots?5are?5available?5@ DB '%d textur'
	DB	'e slots are available on this machine.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PCNKIOJF@your?5program?5is?5broken@
CONST	SEGMENT
??_C@_0BH@PCNKIOJF@your?5program?5is?5broken@ DB 'your program is broken', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FN@GDBHHMPF@Hello?0?5my?5name?5is?5Kevin?0?5I?5have@
CONST	SEGMENT
??_C@_0FN@GDBHHMPF@Hello?0?5my?5name?5is?5Kevin?0?5I?5have@ DB 'Hello, my'
	DB	' name is Kevin, I have Changnesia. -- a reference from the po'
	DB	'pular show "community"', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JPPIGLOJ@?6Loading?5save?5file?5took?5?$CFf?5seco@
CONST	SEGMENT
??_C@_0CF@JPPIGLOJ@?6Loading?5save?5file?5took?5?$CFf?5seco@ DB 0aH, 'Loa'
	DB	'ding save file took %f seconds.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EKFBNKE@saves?1save_1?4txt@
CONST	SEGMENT
??_C@_0BB@EKFBNKE@saves?1save_1?4txt@ DB 'saves/save_1.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LBNLFPA@shader?5is?5broken?6?$CFs?6@
CONST	SEGMENT
??_C@_0BF@LBNLFPA@shader?5is?5broken?6?$CFs?6@ DB 'shader is broken', 0aH
	DB	'%s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HPODFHAK@failed?5to?5compile?5?$CFs?5shader?6@
CONST	SEGMENT
??_C@_0BN@HPODFHAK@failed?5to?5compile?5?$CFs?5shader?6@ DB 'failed to co'
	DB	'mpile %s shader', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IEIKBDDE@fragment@
CONST	SEGMENT
??_C@_08IEIKBDDE@fragment@ DB 'fragment', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HLKHCFCI@vertex@
CONST	SEGMENT
??_C@_06HLKHCFCI@vertex@ DB 'vertex', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FJBPFDBJ@?$CDshader?5@
CONST	SEGMENT
??_C@_08FJBPFDBJ@?$CDshader?5@ DB '#shader ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GIFJGILP@cannot?5read?5file@
CONST	SEGMENT
??_C@_0BB@GIFJGILP@cannot?5read?5file@ DB 'cannot read file', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HKHHAOPL@broken@
CONST	SEGMENT
??_C@_06HKHHAOPL@broken@ DB 'broken', 00H		; `string'
timeScale DD	03f800000r			; 1
	ORG $+2
vecSize	DQ	0000000000000008H
vSyncCount DD	01H
fullScreenET DD	03f800000r			; 1
startingFrame DD 03f800000r			; 1
__4C2AD0C7_winpackagefamily@h DB 01H
__9DED9ED1_winapifamily@h DB 01H
__0B1C67B3_gl@h DB 01H
__D7C03EE9_glu@h DB 01H
__20F17275_glew@h DB 01H
__8C83BECC_concurrencysal@h DB 01H
__608E3340_sal@h DB 01H
__FB67E29A_vadefs@h DB 01H
__1D1B619C_vcruntime@h DB 01H
__735960E1_corecrt@h DB 01H
__955456CD_stddef@h DB 01H
__836A8CFC_stdint@h DB 01H
__0A1327A7_glfw3@h DB 01H
__AFFFEBA2_GL stuff@h DB 01H
__60B45B40_corecrt_stdio_config@h DB 01H
__CFA3741E_corecrt_wstdio@h DB 01H
__B3FE3303_stdio@h DB 01H
__211DB995_corecrt_malloc@h DB 01H
__99AED4FB_corecrt_search@h DB 01H
__8B813BF6_corecrt_wstdlib@h DB 01H
__3D1CA2C3_limits@h DB 01H
__E8FB0A68_stdlib@h DB 01H
__9E5BC8DA_corecrt_wtime@h DB 01H
__1FF36214_time@h DB 01H
__F2638511_stdbool@h DB 01H
__1D9A7FA2_corecrt_math@h DB 01H
__2E93F1C0_math@h DB 01H
__7570C268_vectors@h DB 01H
__12FEDF4E_sdkddkver@h DB 01H
__9BAEE128_excpt@h DB 01H
__B7B53233_stdarg@h DB 01H
__6B04FCB3_specstrings_undef@h DB 01H
__F4027AF7_specstrings_strict@h DB 01H
__B90340D4_sdv_driverspecs@h DB 01H
__BFFF5AD3_driverspecs@h DB 01H
__32847078_specstrings@h DB 01H
__108B2620_corecrt_wctype@h DB 01H
__6CD6613D_ctype@h DB 01H
__30902A1F_kernelspecs@h DB 01H
__376FD5CA_basetsd@h DB 01H
__13DE2371_errno@h DB 01H
__8C6AE390_vcruntime_string@h DB 01H
__8ACB2152_corecrt_memcpy_s@h DB 01H
__EA6C9D17_corecrt_memory@h DB 01H
__0DF2AF52_corecrt_wstring@h DB 01H
__6E889ECC_string@h DB 01H
__9BEDF4DE_guiddef@h DB 01H
__51BFD2FE_pshpack4@h DB 01H
__31652CEA_poppack@h DB 01H
__5532AE4C_pshpack2@h DB 01H
__58A52B9A_pshpack8@h DB 01H
__57741015_pshpack1@h DB 01H
__CDE68C90_apiset@h DB 01H
__0BF06E8D_ktmtypes@h DB 01H
__40C200C0_winnt@h DB 01H
__9336F789_minwindef@h DB 01H
__55136115_windef@h DB 01H
__32205BF0_apisetcconv@h DB 01H
__B48FDEA0_minwinbase@h DB 01H
__3551B028_apiquery2@h DB 01H
__65BE04AA_processenv@h DB 01H
__4767CA46_fileapi@h DB 01H
__282E6C4B_fileapifromapp@h DB 01H
__393AF12C_debugapi@h DB 01H
__EBC502B8_utilapiset@h DB 01H
__1EAD8C69_handleapi@h DB 01H
__D8EF9B29_errhandlingapi@h DB 01H
__97FC1204_fibersapi@h DB 01H
__27448220_namedpipeapi@h DB 01H
__6EA33B2A_profileapi@h DB 01H
__EAC6F673_heapapi@h DB 01H
__D64EEA5A_ioapiset@h DB 01H
__144BD4B6_synchapi@h DB 01H
__03B1C640_interlockedapi@h DB 01H
__DC64CB38_processthreadsapi@h DB 01H
__D719B518_sysinfoapi@h DB 01H
__410385B1_memoryapi@h DB 01H
__C1AD45EF_enclaveapi@h DB 01H
__F4C3AA32_threadpoollegacyapiset@h DB 01H
__AC5A7A9F_threadpoolapiset@h DB 01H
__F5254B21_jobapi@h DB 01H
__BCEA6EE8_jobapi2@h DB 01H
__D18ACE72_wow64apiset@h DB 01H
__669B0D4A_libloaderapi@h DB 01H
__645F7034_securitybaseapi@h DB 01H
__67E58557_namespaceapi@h DB 01H
__599D9D3A_systemtopologyapi@h DB 01H
__2337E373_processtopologyapi@h DB 01H
__02BFF239_securityappcontainer@h DB 01H
__9C196272_realtimeapiset@h DB 01H
__5AB313A4_winerror@h DB 01H
__B7E7187B_timezoneapi@h DB 01H
__6DE9EB6F_winbase@h DB 01H
__56B2AFF2_wingdi@h DB 01H
__BA1161A9_tvout@h DB 01H
__0501A018_winuser@h DB 01H
__EF12FA99_datetimeapi@h DB 01H
__8FA7C3CA_winnls@h DB 01H
__390F0C47_stringapiset@h DB 01H
__28605B0A_wincontypes@h DB 01H
__BFBDE86D_consoleapi@h DB 01H
__C3CAFBF0_consoleapi2@h DB 01H
__C20891C7_consoleapi3@h DB 01H
__717C98B6_wincon@h DB 01H
__2884C177_verrsrc@h DB 01H
__A3FD3A34_winver@h DB 01H
__6F8AD9F1_reason@h DB 01H
__4C90FD6F_winreg@h DB 01H
__68AFEBAD_wnnc@h DB 01H
__5A7AB086_winnetwk@h DB 01H
__859C3CD3_cderr@h DB 01H
__81B12F1A_dde@h DB 01H
__DD3AF97A_ddeml@h DB 01H
__E6B47715_dlgs@h DB 01H
__944BD57D_lzexpand@h DB 01H
__E4B2DFC7_mmsyscom@h DB 01H
__5287D88F_mciapi@h DB 01H
__DBDC1384_mmiscapi@h DB 01H
__1A78C0D7_mmiscapi2@h DB 01H
__0D05975C_playsoundapi@h DB 01H
__757A63A9_mmeapi@h DB 01H
__6326AB05_timeapi@h DB 01H
__77D483B2_joystickapi@h DB 01H
__59CF7431_mmsystem@h DB 01H
__CEAC417E_nb30@h DB 01H
__3BA1A118_rpcdcep@h DB 01H
__74064437_rpcdce@h DB 01H
__90546602_rpcnsi@h DB 01H
__83114A2C_rpcnterr@h DB 01H
__CA67519E_rpcasync@h DB 01H
__D8CEBCD8_rpc@h DB 01H
__9F43AC2D_shellapi@h DB 01H
__6C8D3703_winperf@h DB 01H
__AB40A29E_inaddr@h DB 01H
__40D4FEA5_winsock@h DB 01H
__51394074_bcrypt@h DB 01H
__F177C154_ncrypt@h DB 01H
__1445529E_dpapi@h DB 01H
__5743FB20_wincrypt@h DB 01H
__97CA12BF_winefs@h DB 01H
__6DF63719_rpcnsip@h DB 01H
__031EFCA1_rpcsal@h DB 01H
__BA08D1DA_rpcndr@h DB 01H
__3A941F83_wtypesbase@h DB 01H
__C244FEE1_wtypes@h DB 01H
__FB7C5F97_winioctl@h DB 01H
__4B65E4AC_winsmcrd@h DB 01H
__1EA80168_winscard@h DB 01H
__516FC0F9_prsht@h DB 01H
__88BA11C6_winspool@h DB 01H
__18DB4C56_unknwnbase@h DB 01H
__1AE6FA1A_objidlbase@h DB 01H
__7F98E437_cguid@h DB 01H
__6B2DFB49_combaseapi@h DB 01H
__CB0E8B37_unknwn@h DB 01H
__D981EF0A_objidl@h DB 01H
__37089EB8_oaidl@h DB 01H
__CA2DDD8B_propidlbase@h DB 01H
__39ED323E_coml2api@h DB 01H
__78E82682_oleidl@h DB 01H
__97883CFE_servprov@h DB 01H
__CE01DDB9_msxml@h DB 01H
__A4784895_urlmon@h DB 01H
__325F1C97_propidl@h DB 01H
__D3D43343_objbase@h DB 01H
__B3A2AF1B_oleauto@h DB 01H
__5722A8AA_ole2@h DB 01H
__590A450A_commdlg@h DB 01H
__2FE8A10C_stralign@h DB 01H
__34558472_winsvc@h DB 01H
__058845F1_mcx@h DB 01H
__7F16006B_ime_cmodes@h DB 01H
__0A3AF599_imm@h DB 01H
__11B87C25_Windows@h DB 01H
__DD0D2CA2_main@h DB 01H
__9378A798_Debug@h DB 01H
__29DBA756_animations@h DB 01H
__A6D01AF2_Physics@h DB 01H
__1408441D_Mesh@h DB 01H
__7CA6EAD6_EntityManager@h DB 01H
__FAAF98CA_Player@h DB 01H
__489EAD04_files@h DB 01H
__60BF1C41_scene 1@h DB 01H
__7BF3DF52_math@h DB 01H
__260A2221_corecrt_share@h DB 01H
__EB642103_corecrt_wio@h DB 01H
__A881FA52_corecrt_io@h DB 01H
__3BA8B0DC_io@h DB 01H
__94624A77_Dictionary@h DB 01H
__4ADFF52A_main@c DB 01H
$S1	DD	00H
	DD	01H
maxNugRand DQ	0000000100000000H
PUBLIC	main
PUBLIC	AllocPtrPtr
PUBLIC	SetFullScreen
PUBLIC	ChangeFullScreen
PUBLIC	CreateShader
PUBLIC	ParseShader
PUBLIC	pressing
PUBLIC	deltaTime
PUBLIC	AllocNullStr
pastDT	DD	01H DUP (?)
curDT	DD	01H DUP (?)
COMM	?fullScreen@?1??ChangeFullScreen@@9@9:BYTE							; `ChangeFullScreen'::`2'::fullScreen
cumDT	DD	01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN58
	DD	imagerel $LN58+3328
	DD	imagerel $unwind$main
$pdata$AllocPtrPtr DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$AllocPtrPtr
$pdata$OpenFileUnsafe DD imagerel OpenFileUnsafe
	DD	imagerel OpenFileUnsafe+241
	DD	imagerel $unwind$OpenFileUnsafe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SetFullScreen DD imagerel $LN5
	DD	imagerel $LN5+137
	DD	imagerel $unwind$SetFullScreen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ChangeFullScreen DD imagerel $LN8
	DD	imagerel $LN8+182
	DD	imagerel $unwind$ChangeFullScreen
pdata	ENDS
pdata	SEGMENT
$pdata$CreateShader DD imagerel $LN6
	DD	imagerel $LN6+389
	DD	imagerel $unwind$CreateShader
$pdata$CompileShader DD imagerel CompileShader
	DD	imagerel CompileShader+551
	DD	imagerel $unwind$CompileShader
$pdata$ParseShader DD imagerel $LN28
	DD	imagerel $LN28+1003
	DD	imagerel $unwind$ParseShader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$pressing DD imagerel $LN7
	DD	imagerel $LN7+94
	DD	imagerel $unwind$pressing
pdata	ENDS
pdata	SEGMENT
$pdata$ThrowError DD imagerel ThrowError
	DD	imagerel ThrowError+52
	DD	imagerel $unwind$ThrowError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deltaTime DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$deltaTime
pdata	ENDS
pdata	SEGMENT
$pdata$strnlen_s DD imagerel strnlen_s
	DD	imagerel strnlen_s+78
	DD	imagerel $unwind$strnlen_s
$pdata$time DD	imagerel time
	DD	imagerel time+39
	DD	imagerel $unwind$time
$pdata$AllocNullStr DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$AllocNullStr
;	COMDAT xdata
xdata	SEGMENT
$unwind$deltaTime DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pressing DD 020901H
	DD	070055209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ChangeFullScreen DD 020601H
	DD	070029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SetFullScreen DD 020901H
	DD	070059209H
xdata	ENDS
xdata	SEGMENT
$unwind$main DD	032c19H
	DD	0200109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0f8H
$unwind$AllocPtrPtr DD 020f01H
	DD	0700b320fH
$unwind$OpenFileUnsafe DD 033819H
	DD	024010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$CreateShader DD 023419H
	DD	0700bb20fH
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$CompileShader DD 033b19H
	DD	0160111H
	DD	0700aH
	DD	imagerel __GSHandlerCheck
	DD	0a8H
$unwind$ParseShader DD 033d19H
	DD	02a0112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0148H
$unwind$ThrowError DD 020a01H
	DD	07006320aH
$unwind$strnlen_s DD 020f01H
	DD	0700b520fH
$unwind$time DD	020a01H
	DD	07006320aH
$unwind$AllocNullStr DD 020e01H
	DD	0700a320eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ParseShader
	DD	035H
	DD	03d2H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:CompileShader
	DD	033H
	DD	020eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:CreateShader
	DD	02fH
	DD	0172H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:OpenFileUnsafe
	DD	030H
	DD	0d8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	024H
	DD	0ce7H
main$rtcName$0 DB 066H
	DB	072H
	DB	065H
	DB	071H
	DB	075H
	DB	065H
	DB	06eH
	DB	063H
	DB	079H
	DB	048H
	DB	06fH
	DB	06cH
	DB	064H
	DB	065H
	DB	072H
	DB	00H
main$rtcName$1 DB 068H
	DB	069H
	DB	06eH
	DB	074H
	DB	054H
	DB	061H
	DB	072H
	DB	067H
	DB	065H
	DB	074H
	DB	073H
	DB	00H
	ORG $+4
main$rtcName$2 DB 074H
	DB	065H
	DB	078H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	053H
	DB	06cH
	DB	06fH
	DB	074H
	DB	073H
	DB	00H
	ORG $+3
main$rtcVarDesc DD 0a4H
	DD	04H
	DQ	FLAT:main$rtcName$2
	DD	068H
	DD	010H
	DQ	FLAT:main$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:main$rtcName$0
	ORG $+144
main$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:main$rtcVarDesc
OpenFileUnsafe$rtcName$0 DB 073H
	DB	069H
	DB	00H
	ORG $+1
OpenFileUnsafe$rtcName$1 DB 070H
	DB	069H
	DB	00H
	ORG $+9
OpenFileUnsafe$rtcVarDesc DD 0e8H
	DD	018H
	DQ	FLAT:OpenFileUnsafe$rtcName$1
	DD	060H
	DD	068H
	DQ	FLAT:OpenFileUnsafe$rtcName$0
	ORG $+96
OpenFileUnsafe$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:OpenFileUnsafe$rtcVarDesc
CreateShader$rtcName$0 DB 06cH
	DB	06fH
	DB	067H
	DB	00H
	ORG $+12
CreateShader$rtcVarDesc DD 034H
	DD	04H
	DQ	FLAT:CreateShader$rtcName$0
	ORG $+48
CreateShader$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:CreateShader$rtcVarDesc
CompileShader$rtcName$0 DB 072H
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
CompileShader$rtcName$1 DB 06cH
	DB	065H
	DB	06eH
	DB	067H
	DB	074H
	DB	068H
	DB	00H
	ORG $+1
CompileShader$rtcVarDesc DD 054H
	DD	04H
	DQ	FLAT:CompileShader$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:CompileShader$rtcName$0
	ORG $+96
CompileShader$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:CompileShader$rtcVarDesc
ParseShader$rtcName$0 DB 066H
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+3
ParseShader$rtcName$1 DB 073H
	DB	069H
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	04cH
	DB	069H
	DB	06eH
	DB	065H
	DB	00H
	ORG $+1
ParseShader$rtcName$2 DB 074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+7
ParseShader$rtcVarDesc DD 0f8H
	DD	010H
	DQ	FLAT:ParseShader$rtcName$2
	DD	050H
	DD	064H
	DQ	FLAT:ParseShader$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:ParseShader$rtcName$0
	ORG $+144
ParseShader$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:ParseShader$rtcVarDesc
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.c
_TEXT	SEGMENT
alloc$ = 48
strLen$ = 56
AllocNullStr PROC

; 209  : void AllocNullStr(char** alloc, int strLen) {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00015	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 210  : 	*alloc = malloc(sizeof(char) * strLen);

  0001a	48 63 44 24 38	 movsxd	 rax, DWORD PTR strLen$[rsp]
  0001f	48 8b c8	 mov	 rcx, rax
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR alloc$[rsp]
  0002d	48 89 01	 mov	 QWORD PTR [rcx], rax

; 211  : 	**alloc = '\0';

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR alloc$[rsp]
  00035	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00038	c6 00 00	 mov	 BYTE PTR [rax], 0

; 212  : }

  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
AllocNullStr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\time.h
_TEXT	SEGMENT
_Time$ = 48
time	PROC

; 551  :         {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1FF36214_time@h
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 552  :             return _time64(_Time);

  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64

; 553  :         }

  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5f		 pop	 rdi
  00026	c3		 ret	 0
time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\string.h
_TEXT	SEGMENT
tv68 = 32
_String$ = 64
_MaxCount$ = 72
strnlen_s PROC

; 371  :     {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6E889ECC_string@h
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 372  :         return _String == 0 ? 0 : strnlen(_String, _MaxCount);

  0001b	48 83 7c 24 40
	00		 cmp	 QWORD PTR _String$[rsp], 0
  00021	75 0b		 jne	 SHORT $LN3@strnlen_s
  00023	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR tv68[rsp], 0
  0002c	eb 15		 jmp	 SHORT $LN4@strnlen_s
$LN3@strnlen_s:
  0002e	48 8b 54 24 48	 mov	 rdx, QWORD PTR _MaxCount$[rsp]
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _String$[rsp]
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strnlen
  0003e	48 89 44 24 20	 mov	 QWORD PTR tv68[rsp], rax
$LN4@strnlen_s:
  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR tv68[rsp]

; 373  :     }

  00048	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
strnlen_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h
;	COMDAT deltaTime
_TEXT	SEGMENT
deltaTime PROC						; COMDAT

; 342  : inline float deltaTime() {

$LN3:
  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD0D2CA2_main@h
  0000d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 343  : 	QueryPerformanceCounter(&cTime);

  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cTime
  00019	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 344  : 	return (float)((cTime.QuadPart - pTime.QuadPart) * 1000000 / frequency) / 1000000.0f * timeScale;

  0001f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR pTime
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR cTime
  0002d	48 2b c8	 sub	 rcx, rax
  00030	48 8b c1	 mov	 rax, rcx
  00033	48 69 c0 40 42
	0f 00		 imul	 rax, rax, 1000000	; 000f4240H
  0003a	48 99		 cdq
  0003c	48 f7 3d 00 00
	00 00		 idiv	 QWORD PTR frequency
  00043	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  00048	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@49742400
  00050	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR timeScale

; 345  : }

  00058	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
deltaTime ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Debug.h
_TEXT	SEGMENT
message$ = 48
ThrowError PROC

; 30   : static inline void ThrowError(const char* message) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9378A798_Debug@h
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 31   : 	printf("%s\n", message);

  00016	48 8b 54 24 30	 mov	 rdx, QWORD PTR message$[rsp]
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03OFAPEBGM@?$CFs?6@
  00022	e8 00 00 00 00	 call	 printf

; 32   : #ifndef IGNORE_ERRORS
; 33   : 	DebugBreak();

  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DebugBreak
  0002d	90		 npad	 1

; 34   : #endif
; 35   : }

  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5f		 pop	 rdi
  00033	c3		 ret	 0
ThrowError ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.c
;	COMDAT pressing
_TEXT	SEGMENT
tv69 = 32
tv71 = 36
key$ = 64
pressing PROC						; COMDAT

; 60   : inline bool pressing(int key) {

$LN7:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	57		 push	 rdi
  00005	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00010	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 61   : 	return (GetKeyState(key) | 1) == -127;

  00015	8b 4c 24 40	 mov	 ecx, DWORD PTR key$[rsp]
  00019	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetKeyState
  0001f	98		 cwde
  00020	83 c8 01	 or	 eax, 1
  00023	83 f8 81	 cmp	 eax, -127		; ffffffffffffff81H
  00026	75 0a		 jne	 SHORT $LN3@pressing
  00028	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv69[rsp], 1
  00030	eb 08		 jmp	 SHORT $LN4@pressing
$LN3@pressing:
  00032	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv69[rsp], 0
$LN4@pressing:
  0003a	83 7c 24 20 00	 cmp	 DWORD PTR tv69[rsp], 0
  0003f	75 0a		 jne	 SHORT $LN5@pressing
  00041	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
  00049	eb 08		 jmp	 SHORT $LN6@pressing
$LN5@pressing:
  0004b	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
$LN6@pressing:
  00053	0f b6 44 24 24	 movzx	 eax, BYTE PTR tv71[rsp]

; 62   : }

  00058	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
pressing ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\string.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\string.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.c
_TEXT	SEGMENT
fptr$ = 40
singleLine$ = 80
i$ = 196
shader$ = 200
vertexStr$ = 208
fragmentStr$ = 216
shaderLength$ = 224
shaderType$ = 228
lineLen$ = 232
isSwitch$ = 236
$T6 = 288
$T7 = 296
_String$ = 304
tv192 = 312
tv195 = 320
__$ArrayPad$ = 328
__$ReturnAddress$ = 352
filePath$ = 360
ParseShader PROC

; 75   : ShaderProgramSource ParseShader(char* filePath) {

$LN28:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec 50 01
	00 00		 sub	 rsp, 336		; 00000150H
  00012	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00017	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR [rsp+352]
  0002b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00032	48 33 c4	 xor	 rax, rsp
  00035	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 76   : 	FILE *fptr = NULL;

  00049	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR fptr$[rsp], 0

; 77   : 	fopen_s(&fptr, filePath, "r");

  00052	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01KDCPPGHE@r@
  00059	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR filePath$[rsp]
  00061	48 8d 4c 24 28	 lea	 rcx, QWORD PTR fptr$[rsp]
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen_s

; 78   : 	if (fptr == NULL) {

  0006c	48 83 7c 24 28
	00		 cmp	 QWORD PTR fptr$[rsp], 0
  00072	75 14		 jne	 SHORT $LN10@ParseShade

; 79   : 		puts("cannot read file");

  00074	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@GIFJGILP@cannot?5read?5file@
  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_puts

; 80   : 		DebugBreak();

  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DebugBreak
  00087	90		 npad	 1
$LN10@ParseShade:

; 81   : 	}
; 82   : 	char singleLine[SHADER_MAX_LINE_CHAR];
; 83   : 	int i;
; 84   : 	const char* shader = "#shader ";

  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08FJBPFDBJ@?$CDshader?5@
  0008f	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR shader$[rsp], rax

; 85   : 	const char* vertexStr = "vertex";

  00097	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06HLKHCFCI@vertex@
  0009e	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR vertexStr$[rsp], rax

; 86   : 	const char* fragmentStr = "fragment";

  000a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08IEIKBDDE@fragment@
  000ad	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR fragmentStr$[rsp], rax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\string.h

; 372  :         return _String == 0 ? 0 : strnlen(_String, _MaxCount);

  000b5	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR shader$[rsp], 0
  000be	75 0e		 jne	 SHORT $LN21@ParseShade
  000c0	48 c7 84 24 38
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv192[rsp], 0
  000cc	eb 1b		 jmp	 SHORT $LN22@ParseShade
$LN21@ParseShade:
  000ce	ba 08 00 00 00	 mov	 edx, 8
  000d3	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR shader$[rsp]
  000db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strnlen
  000e1	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv192[rsp], rax
$LN22@ParseShade:
  000e9	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR tv192[rsp]
  000f1	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR $T6[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.c

; 87   : 	byte shaderLength = strnlen_s(shader, sizeof(shader));

  000f9	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR $T6[rsp]
  00101	88 84 24 e0 00
	00 00		 mov	 BYTE PTR shaderLength$[rsp], al

; 88   : 	ss = malloc(sizeof(char*) * 2);

  00108	b9 10 00 00 00	 mov	 ecx, 16
  0010d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00113	48 89 05 00 00
	00 00		 mov	 QWORD PTR ss, rax

; 89   : 	ShaderType shaderType;
; 90   : 	USHORT lineLen;
; 91   : 	bool isSwitch;
; 92   : 	for (i = 0; i < 2; i++) {

  0011a	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  00125	eb 10		 jmp	 SHORT $LN4@ParseShade
$LN2@ParseShade:
  00127	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  0012e	ff c0		 inc	 eax
  00130	89 84 24 c4 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN4@ParseShade:
  00137	83 bc 24 c4 00
	00 00 02	 cmp	 DWORD PTR i$[rsp], 2
  0013f	7d 36		 jge	 SHORT $LN3@ParseShade

; 93   : 		ss[i] = malloc(SHADER_MAX_CHAR);

  00141	b9 c4 09 00 00	 mov	 ecx, 2500		; 000009c4H
  00146	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0014c	48 63 8c 24 c4
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  00154	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ss
  0015b	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax

; 94   : 		*ss[i] = '\0';

  0015f	48 63 84 24 c4
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00167	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ss
  0016e	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00172	c6 00 00	 mov	 BYTE PTR [rax], 0

; 95   : 	}

  00175	eb b0		 jmp	 SHORT $LN2@ParseShade
$LN3@ParseShade:

; 96   : 	shaderType = none;

  00177	c7 84 24 e4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR shaderType$[rsp], -1
$LN27@ParseShade:
$LN5@ParseShade:

; 97   : 	while (!feof(fptr)) {

  00182	48 8b 4c 24 28	 mov	 rcx, QWORD PTR fptr$[rsp]
  00187	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_feof
  0018d	85 c0		 test	 eax, eax
  0018f	0f 85 e1 01 00
	00		 jne	 $LN6@ParseShade

; 98   : 		fgets(singleLine, SHADER_MAX_LINE_CHAR, fptr);

  00195	4c 8b 44 24 28	 mov	 r8, QWORD PTR fptr$[rsp]
  0019a	ba 64 00 00 00	 mov	 edx, 100		; 00000064H
  0019f	48 8d 4c 24 50	 lea	 rcx, QWORD PTR singleLine$[rsp]
  001a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fgets

; 99   : 		isSwitch = true;

  001aa	c6 84 24 ec 00
	00 00 01	 mov	 BYTE PTR isSwitch$[rsp], 1

; 100  : 		lineLen = strnlen_s(singleLine, sizeof(singleLine));

  001b2	48 8d 44 24 50	 lea	 rax, QWORD PTR singleLine$[rsp]
  001b7	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR _String$[rsp], rax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\string.h

; 372  :         return _String == 0 ? 0 : strnlen(_String, _MaxCount);

  001bf	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR _String$[rsp], 0
  001c8	75 0e		 jne	 SHORT $LN25@ParseShade
  001ca	48 c7 84 24 40
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv195[rsp], 0
  001d6	eb 1b		 jmp	 SHORT $LN26@ParseShade
$LN25@ParseShade:
  001d8	ba 64 00 00 00	 mov	 edx, 100		; 00000064H
  001dd	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR _String$[rsp]
  001e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strnlen
  001eb	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv195[rsp], rax
$LN26@ParseShade:
  001f3	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR tv195[rsp]
  001fb	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR $T7[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.c

; 100  : 		lineLen = strnlen_s(singleLine, sizeof(singleLine));

  00203	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR $T7[rsp]
  0020b	66 89 84 24 e8
	00 00 00	 mov	 WORD PTR lineLen$[rsp], ax

; 101  : 		for (i = 0; i < lineLen - 1|| i == 0; i++) {

  00213	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  0021e	eb 10		 jmp	 SHORT $LN9@ParseShade
$LN7@ParseShade:
  00220	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  00227	ff c0		 inc	 eax
  00229	89 84 24 c4 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN9@ParseShade:
  00230	0f b7 84 24 e8
	00 00 00	 movzx	 eax, WORD PTR lineLen$[rsp]
  00238	ff c8		 dec	 eax
  0023a	39 84 24 c4 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  00241	7c 0e		 jl	 SHORT $LN11@ParseShade
  00243	83 bc 24 c4 00
	00 00 00	 cmp	 DWORD PTR i$[rsp], 0
  0024b	0f 85 d3 00 00
	00		 jne	 $LN8@ParseShade
$LN11@ParseShade:

; 102  : 			//printf("%d, %d, %d, %d|\n", singleLine[i] == shader[i], singleLine[i] == vertexStr[i - shaderLength], singleLine[i] == fragmentStr[i - shaderLength], i);
; 103  : 			if (singleLine[i] == shader[i]) {

  00251	48 63 84 24 c4
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00259	0f be 44 04 50	 movsx	 eax, BYTE PTR singleLine$[rsp+rax]
  0025e	48 63 8c 24 c4
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  00266	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR shader$[rsp]
  0026e	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  00272	3b c1		 cmp	 eax, ecx
  00274	75 02		 jne	 SHORT $LN12@ParseShade

; 104  : 				continue;

  00276	eb a8		 jmp	 SHORT $LN7@ParseShade
$LN12@ParseShade:

; 105  : 			}
; 106  : 			if (i == 0) {

  00278	83 bc 24 c4 00
	00 00 00	 cmp	 DWORD PTR i$[rsp], 0
  00280	75 0d		 jne	 SHORT $LN13@ParseShade

; 107  : 				isSwitch = false;

  00282	c6 84 24 ec 00
	00 00 00	 mov	 BYTE PTR isSwitch$[rsp], 0

; 108  : 				break;

  0028a	e9 95 00 00 00	 jmp	 $LN8@ParseShade
$LN13@ParseShade:

; 109  : 			}
; 110  : 			if (singleLine[i] == vertexStr[i - shaderLength]) {

  0028f	48 63 84 24 c4
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00297	0f be 44 04 50	 movsx	 eax, BYTE PTR singleLine$[rsp+rax]
  0029c	0f b6 8c 24 e0
	00 00 00	 movzx	 ecx, BYTE PTR shaderLength$[rsp]
  002a4	8b 94 24 c4 00
	00 00		 mov	 edx, DWORD PTR i$[rsp]
  002ab	2b d1		 sub	 edx, ecx
  002ad	8b ca		 mov	 ecx, edx
  002af	48 63 c9	 movsxd	 rcx, ecx
  002b2	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR vertexStr$[rsp]
  002ba	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  002be	3b c1		 cmp	 eax, ecx
  002c0	75 10		 jne	 SHORT $LN14@ParseShade

; 111  : 				shaderType = vertex;

  002c2	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR shaderType$[rsp], 0

; 112  : 				continue;

  002cd	e9 4e ff ff ff	 jmp	 $LN7@ParseShade
$LN14@ParseShade:

; 113  : 			}
; 114  : 			if (singleLine[i] == fragmentStr[i - shaderLength]) {

  002d2	48 63 84 24 c4
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  002da	0f be 44 04 50	 movsx	 eax, BYTE PTR singleLine$[rsp+rax]
  002df	0f b6 8c 24 e0
	00 00 00	 movzx	 ecx, BYTE PTR shaderLength$[rsp]
  002e7	8b 94 24 c4 00
	00 00		 mov	 edx, DWORD PTR i$[rsp]
  002ee	2b d1		 sub	 edx, ecx
  002f0	8b ca		 mov	 ecx, edx
  002f2	48 63 c9	 movsxd	 rcx, ecx
  002f5	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR fragmentStr$[rsp]
  002fd	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  00301	3b c1		 cmp	 eax, ecx
  00303	75 10		 jne	 SHORT $LN15@ParseShade

; 115  : 				shaderType = fragment;

  00305	c7 84 24 e4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR shaderType$[rsp], 1

; 116  : 				continue;

  00310	e9 0b ff ff ff	 jmp	 $LN7@ParseShade
$LN15@ParseShade:

; 117  : 			}
; 118  : 			isSwitch = false;

  00315	c6 84 24 ec 00
	00 00 00	 mov	 BYTE PTR isSwitch$[rsp], 0

; 119  : 			break;

  0031d	eb 05		 jmp	 SHORT $LN8@ParseShade

; 120  : 		}

  0031f	e9 fc fe ff ff	 jmp	 $LN7@ParseShade
$LN8@ParseShade:

; 121  : 		if (isSwitch || shaderType == none) {

  00324	0f b6 84 24 ec
	00 00 00	 movzx	 eax, BYTE PTR isSwitch$[rsp]
  0032c	85 c0		 test	 eax, eax
  0032e	75 0a		 jne	 SHORT $LN17@ParseShade
  00330	83 bc 24 e4 00
	00 00 ff	 cmp	 DWORD PTR shaderType$[rsp], -1
  00338	75 13		 jne	 SHORT $LN16@ParseShade
$LN17@ParseShade:

; 122  : 			puts("\n");

  0033a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6@
  00341	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_puts
  00347	90		 npad	 1

; 123  : 			continue;

  00348	e9 35 fe ff ff	 jmp	 $LN5@ParseShade
$LN16@ParseShade:

; 124  : 		}
; 125  : 		strcat_s(ss[shaderType], SHADER_MAX_CHAR, singleLine);

  0034d	48 63 84 24 e4
	00 00 00	 movsxd	 rax, DWORD PTR shaderType$[rsp]
  00355	4c 8d 44 24 50	 lea	 r8, QWORD PTR singleLine$[rsp]
  0035a	ba c4 09 00 00	 mov	 edx, 2500		; 000009c4H
  0035f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ss
  00366	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0036a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcat_s
  00370	90		 npad	 1

; 126  : 	}

  00371	e9 0c fe ff ff	 jmp	 $LN27@ParseShade
$LN6@ParseShade:

; 127  : 	ShaderProgramSource this;
; 128  : 	this.vertexSource = ss[0];

  00376	b8 08 00 00 00	 mov	 eax, 8
  0037b	48 6b c0 00	 imul	 rax, rax, 0
  0037f	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR __$ReturnAddress$[rsp]
  00387	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ss
  0038e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00392	48 89 01	 mov	 QWORD PTR [rcx], rax

; 129  : 	this.fragmentSource = ss[1];

  00395	b8 08 00 00 00	 mov	 eax, 8
  0039a	48 6b c0 01	 imul	 rax, rax, 1
  0039e	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR __$ReturnAddress$[rsp]
  003a6	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ss
  003ad	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003b1	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 130  : 	return this;

  003b5	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 131  : }

  003bd	48 8b f8	 mov	 rdi, rax
  003c0	48 8b cc	 mov	 rcx, rsp
  003c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ParseShader$rtcFrameData
  003ca	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  003cf	48 8b c7	 mov	 rax, rdi
  003d2	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  003da	48 33 cc	 xor	 rcx, rsp
  003dd	e8 00 00 00 00	 call	 __security_check_cookie
  003e2	48 81 c4 50 01
	00 00		 add	 rsp, 336		; 00000150H
  003e9	5f		 pop	 rdi
  003ea	c3		 ret	 0
ParseShader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\string.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.c
_TEXT	SEGMENT
id$ = 32
result$ = 52
length$5 = 84
message$6 = 104
t$7 = 112
res$8 = 120
len$9 = 128
$T10 = 144
tv89 = 152
tv148 = 160
__$ArrayPad$ = 168
type$ = 192
src$ = 200
CompileShader PROC

; 132  : static unsigned int CompileShader(unsigned int type, const char* src) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	57		 push	 rdi
  0000a	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  00011	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00016	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR [rsp+192]
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c4	 xor	 rax, rsp
  00033	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00042	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 133  : 	unsigned int id = glCreateShader(type);

  00047	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR type$[rsp]
  0004e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewCreateShader
  00055	ff 10		 call	 QWORD PTR [rax]
  00057	89 44 24 20	 mov	 DWORD PTR id$[rsp], eax

; 134  : 	glShaderSource(id, 1, &src, NULL);

  0005b	45 33 c9	 xor	 r9d, r9d
  0005e	4c 8d 84 24 c8
	00 00 00	 lea	 r8, QWORD PTR src$[rsp]
  00066	ba 01 00 00 00	 mov	 edx, 1
  0006b	8b 4c 24 20	 mov	 ecx, DWORD PTR id$[rsp]
  0006f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewShaderSource
  00076	ff 10		 call	 QWORD PTR [rax]

; 135  : 	glCompileShader(id);

  00078	8b 4c 24 20	 mov	 ecx, DWORD PTR id$[rsp]
  0007c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewCompileShader
  00083	ff 10		 call	 QWORD PTR [rax]

; 136  : 	int result;
; 137  : 	glGetShaderiv(id, GL_COMPILE_STATUS, &result);

  00085	4c 8d 44 24 34	 lea	 r8, QWORD PTR result$[rsp]
  0008a	ba 81 8b 00 00	 mov	 edx, 35713		; 00008b81H
  0008f	8b 4c 24 20	 mov	 ecx, DWORD PTR id$[rsp]
  00093	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewGetShaderiv
  0009a	ff 10		 call	 QWORD PTR [rax]

; 138  : 	if (result == GL_FALSE) {

  0009c	83 7c 24 34 00	 cmp	 DWORD PTR result$[rsp], 0
  000a1	0f 85 4e 01 00
	00		 jne	 $LN2@CompileSha

; 139  : 		int length;
; 140  : 		glGetShaderiv(id, GL_INFO_LOG_LENGTH, &length);

  000a7	4c 8d 44 24 54	 lea	 r8, QWORD PTR length$5[rsp]
  000ac	ba 84 8b 00 00	 mov	 edx, 35716		; 00008b84H
  000b1	8b 4c 24 20	 mov	 ecx, DWORD PTR id$[rsp]
  000b5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewGetShaderiv
  000bc	ff 10		 call	 QWORD PTR [rax]

; 141  : 		char* message = malloc(sizeof(char) * length);

  000be	48 63 44 24 54	 movsxd	 rax, DWORD PTR length$5[rsp]
  000c3	48 8b c8	 mov	 rcx, rax
  000c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000cc	48 89 44 24 68	 mov	 QWORD PTR message$6[rsp], rax

; 142  : 		glGetShaderInfoLog(id, length, &length, message);

  000d1	4c 8b 4c 24 68	 mov	 r9, QWORD PTR message$6[rsp]
  000d6	4c 8d 44 24 54	 lea	 r8, QWORD PTR length$5[rsp]
  000db	8b 54 24 54	 mov	 edx, DWORD PTR length$5[rsp]
  000df	8b 4c 24 20	 mov	 ecx, DWORD PTR id$[rsp]
  000e3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewGetShaderInfoLog
  000ea	ff 10		 call	 QWORD PTR [rax]

; 143  : 		const char* t = type == GL_VERTEX_SHADER ? "vertex" : "fragment";

  000ec	81 bc 24 c0 00
	00 00 31 8b 00
	00		 cmp	 DWORD PTR type$[rsp], 35633 ; 00008b31H
  000f7	75 11		 jne	 SHORT $LN4@CompileSha
  000f9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06HLKHCFCI@vertex@
  00100	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv89[rsp], rax
  00108	eb 0f		 jmp	 SHORT $LN5@CompileSha
$LN4@CompileSha:
  0010a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08IEIKBDDE@fragment@
  00111	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv89[rsp], rax
$LN5@CompileSha:
  00119	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv89[rsp]
  00121	48 89 44 24 70	 mov	 QWORD PTR t$7[rsp], rax

; 144  : 		char *res = NULL;

  00126	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR res$8[rsp], 0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\string.h

; 372  :         return _String == 0 ? 0 : strnlen(_String, _MaxCount);

  0012f	48 83 7c 24 70
	00		 cmp	 QWORD PTR t$7[rsp], 0
  00135	75 0e		 jne	 SHORT $LN8@CompileSha
  00137	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv148[rsp], 0
  00143	eb 18		 jmp	 SHORT $LN9@CompileSha
$LN8@CompileSha:
  00145	ba 08 00 00 00	 mov	 edx, 8
  0014a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR t$7[rsp]
  0014f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strnlen
  00155	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv148[rsp], rax
$LN9@CompileSha:
  0015d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv148[rsp]
  00165	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR $T10[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.c

; 145  : 		char len = strnlen_s(t, sizeof(t)) + 1;

  0016d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR $T10[rsp]
  00175	48 ff c0	 inc	 rax
  00178	88 84 24 80 00
	00 00		 mov	 BYTE PTR len$9[rsp], al

; 146  : 		res = malloc(sizeof(char) * len);

  0017f	48 0f be 84 24
	80 00 00 00	 movsx	 rax, BYTE PTR len$9[rsp]
  00188	48 8b c8	 mov	 rcx, rax
  0018b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00191	48 89 44 24 78	 mov	 QWORD PTR res$8[rsp], rax

; 147  : 		strcpy_s(res, len, t);

  00196	48 0f be 84 24
	80 00 00 00	 movsx	 rax, BYTE PTR len$9[rsp]
  0019f	4c 8b 44 24 70	 mov	 r8, QWORD PTR t$7[rsp]
  001a4	48 8b d0	 mov	 rdx, rax
  001a7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR res$8[rsp]
  001ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcpy_s

; 148  : 		printf("failed to compile %s shader\n", res);

  001b2	48 8b 54 24 78	 mov	 rdx, QWORD PTR res$8[rsp]
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@HPODFHAK@failed?5to?5compile?5?$CFs?5shader?6@
  001be	e8 00 00 00 00	 call	 printf

; 149  : 		puts(message);

  001c3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR message$6[rsp]
  001c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_puts

; 150  : 		glDeleteShader(id);

  001ce	8b 4c 24 20	 mov	 ecx, DWORD PTR id$[rsp]
  001d2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewDeleteShader
  001d9	ff 10		 call	 QWORD PTR [rax]

; 151  : 		free(message);

  001db	48 8b 4c 24 68	 mov	 rcx, QWORD PTR message$6[rsp]
  001e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 152  : 		free(res);

  001e6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR res$8[rsp]
  001eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 153  : 		return 0;

  001f1	33 c0		 xor	 eax, eax
  001f3	eb 04		 jmp	 SHORT $LN1@CompileSha
$LN2@CompileSha:

; 154  : 	}
; 155  : 	return id;

  001f5	8b 44 24 20	 mov	 eax, DWORD PTR id$[rsp]
$LN1@CompileSha:

; 156  : }

  001f9	48 8b f8	 mov	 rdi, rax
  001fc	48 8b cc	 mov	 rcx, rsp
  001ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:CompileShader$rtcFrameData
  00206	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0020b	48 8b c7	 mov	 rax, rdi
  0020e	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00216	48 33 cc	 xor	 rcx, rsp
  00219	e8 00 00 00 00	 call	 __security_check_cookie
  0021e	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  00225	5f		 pop	 rdi
  00226	c3		 ret	 0
CompileShader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Debug.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.c
_TEXT	SEGMENT
program$ = 32
vs$ = 36
fs$ = 40
log$ = 52
logInfo$4 = 72
__$ArrayPad$ = 88
vertexShader$ = 112
fragmentShader$ = 120
CreateShader PROC

; 157  : unsigned int CreateShader(const char* vertexShader, const char* fragmentShader) {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000f	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00014	b9 10 00 00 00	 mov	 ecx, 16
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  00025	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002c	48 33 c4	 xor	 rax, rsp
  0002f	48 89 44 24 58	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 158  : 	unsigned int program = glCreateProgram();

  00040	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewCreateProgram
  00047	ff 10		 call	 QWORD PTR [rax]
  00049	89 44 24 20	 mov	 DWORD PTR program$[rsp], eax

; 159  : 	unsigned int vs = CompileShader(GL_VERTEX_SHADER, vertexShader);

  0004d	48 8b 54 24 70	 mov	 rdx, QWORD PTR vertexShader$[rsp]
  00052	b9 31 8b 00 00	 mov	 ecx, 35633		; 00008b31H
  00057	e8 00 00 00 00	 call	 CompileShader
  0005c	89 44 24 24	 mov	 DWORD PTR vs$[rsp], eax

; 160  : 	unsigned int fs = CompileShader(GL_FRAGMENT_SHADER, fragmentShader);

  00060	48 8b 54 24 78	 mov	 rdx, QWORD PTR fragmentShader$[rsp]
  00065	b9 30 8b 00 00	 mov	 ecx, 35632		; 00008b30H
  0006a	e8 00 00 00 00	 call	 CompileShader
  0006f	89 44 24 28	 mov	 DWORD PTR fs$[rsp], eax

; 161  : 	glAttachShader(program, vs);

  00073	8b 54 24 24	 mov	 edx, DWORD PTR vs$[rsp]
  00077	8b 4c 24 20	 mov	 ecx, DWORD PTR program$[rsp]
  0007b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewAttachShader
  00082	ff 10		 call	 QWORD PTR [rax]

; 162  : 	glAttachShader(program, fs);

  00084	8b 54 24 28	 mov	 edx, DWORD PTR fs$[rsp]
  00088	8b 4c 24 20	 mov	 ecx, DWORD PTR program$[rsp]
  0008c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewAttachShader
  00093	ff 10		 call	 QWORD PTR [rax]

; 163  : 	glLinkProgram(program);

  00095	8b 4c 24 20	 mov	 ecx, DWORD PTR program$[rsp]
  00099	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewLinkProgram
  000a0	ff 10		 call	 QWORD PTR [rax]

; 164  : 	int log;
; 165  : 	glGetProgramiv(program, GL_LINK_STATUS, &log);

  000a2	4c 8d 44 24 34	 lea	 r8, QWORD PTR log$[rsp]
  000a7	ba 82 8b 00 00	 mov	 edx, 35714		; 00008b82H
  000ac	8b 4c 24 20	 mov	 ecx, DWORD PTR program$[rsp]
  000b0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewGetProgramiv
  000b7	ff 10		 call	 QWORD PTR [rax]

; 166  : 	if (log == GL_FALSE) {

  000b9	83 7c 24 34 00	 cmp	 DWORD PTR log$[rsp], 0
  000be	75 72		 jne	 SHORT $LN2@CreateShad

; 167  : 		glGetProgramiv(program, GL_INFO_LOG_LENGTH, &log);

  000c0	4c 8d 44 24 34	 lea	 r8, QWORD PTR log$[rsp]
  000c5	ba 84 8b 00 00	 mov	 edx, 35716		; 00008b84H
  000ca	8b 4c 24 20	 mov	 ecx, DWORD PTR program$[rsp]
  000ce	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewGetProgramiv
  000d5	ff 10		 call	 QWORD PTR [rax]

; 168  : 		char* logInfo = malloc(sizeof(char) * log);

  000d7	48 63 44 24 34	 movsxd	 rax, DWORD PTR log$[rsp]
  000dc	48 8b c8	 mov	 rcx, rax
  000df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000e5	48 89 44 24 48	 mov	 QWORD PTR logInfo$4[rsp], rax

; 169  : 		glGetProgramInfoLog(program, log, NULL, logInfo);

  000ea	4c 8b 4c 24 48	 mov	 r9, QWORD PTR logInfo$4[rsp]
  000ef	45 33 c0	 xor	 r8d, r8d
  000f2	8b 54 24 34	 mov	 edx, DWORD PTR log$[rsp]
  000f6	8b 4c 24 20	 mov	 ecx, DWORD PTR program$[rsp]
  000fa	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewGetProgramInfoLog
  00101	ff 10		 call	 QWORD PTR [rax]

; 170  : 		printf("shader is broken\n%s\n", logInfo);

  00103	48 8b 54 24 48	 mov	 rdx, QWORD PTR logInfo$4[rsp]
  00108	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@LBNLFPA@shader?5is?5broken?6?$CFs?6@
  0010f	e8 00 00 00 00	 call	 printf
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Debug.h

; 31   : 	printf("%s\n", message);

  00114	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06HKHHAOPL@broken@
  0011b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03OFAPEBGM@?$CFs?6@
  00122	e8 00 00 00 00	 call	 printf

; 32   : #ifndef IGNORE_ERRORS
; 33   : 	DebugBreak();

  00127	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DebugBreak
  0012d	90		 npad	 1
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.c

; 172  : 		return 0;

  0012e	33 c0		 xor	 eax, eax
  00130	eb 2b		 jmp	 SHORT $LN1@CreateShad
$LN2@CreateShad:

; 173  : 	}
; 174  : 	glValidateProgram(program);

  00132	8b 4c 24 20	 mov	 ecx, DWORD PTR program$[rsp]
  00136	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewValidateProgram
  0013d	ff 10		 call	 QWORD PTR [rax]

; 175  : 	glDeleteShader(vs);

  0013f	8b 4c 24 24	 mov	 ecx, DWORD PTR vs$[rsp]
  00143	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewDeleteShader
  0014a	ff 10		 call	 QWORD PTR [rax]

; 176  : 	glDeleteShader(fs);

  0014c	8b 4c 24 28	 mov	 ecx, DWORD PTR fs$[rsp]
  00150	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewDeleteShader
  00157	ff 10		 call	 QWORD PTR [rax]

; 177  : 	return program;

  00159	8b 44 24 20	 mov	 eax, DWORD PTR program$[rsp]
$LN1@CreateShad:

; 178  : }

  0015d	48 8b f8	 mov	 rdi, rax
  00160	48 8b cc	 mov	 rcx, rsp
  00163	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:CreateShader$rtcFrameData
  0016a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0016f	48 8b c7	 mov	 rax, rdi
  00172	48 8b 4c 24 58	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00177	48 33 cc	 xor	 rcx, rsp
  0017a	e8 00 00 00 00	 call	 __security_check_cookie
  0017f	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00183	5f		 pop	 rdi
  00184	c3		 ret	 0
CreateShader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.c
;	COMDAT ChangeFullScreen
_TEXT	SEGMENT
tv74 = 64
tv78 = 72
ChangeFullScreen PROC					; COMDAT

; 179  : inline void ChangeFullScreen() {

$LN8:
  00000	40 57		 push	 rdi
  00002	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  0000d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 180  : 	static bool fullScreen;
; 181  : 	glfwSetWindowMonitor(window, (fullScreen = !fullScreen) ? monitor : NULL, 0, 0, mode->width, mode->height, mode->refreshRate);

  00012	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?fullScreen@?1??ChangeFullScreen@@9@9 ; `ChangeFullScreen'::`2'::fullScreen
  00019	85 c0		 test	 eax, eax
  0001b	75 0a		 jne	 SHORT $LN4@ChangeFull
  0001d	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  00025	eb 08		 jmp	 SHORT $LN5@ChangeFull
$LN4@ChangeFull:
  00027	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN5@ChangeFull:
  0002f	0f b6 44 24 40	 movzx	 eax, BYTE PTR tv74[rsp]
  00034	88 05 00 00 00
	00		 mov	 BYTE PTR ?fullScreen@?1??ChangeFullScreen@@9@9, al ; `ChangeFullScreen'::`2'::fullScreen
  0003a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?fullScreen@?1??ChangeFullScreen@@9@9 ; `ChangeFullScreen'::`2'::fullScreen
  00041	85 c0		 test	 eax, eax
  00043	74 0e		 je	 SHORT $LN6@ChangeFull
  00045	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR monitor
  0004c	48 89 44 24 48	 mov	 QWORD PTR tv78[rsp], rax
  00051	eb 09		 jmp	 SHORT $LN7@ChangeFull
$LN6@ChangeFull:
  00053	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv78[rsp], 0
$LN7@ChangeFull:
  0005c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR mode
  00063	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00066	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0006a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR mode
  00071	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00074	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00078	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR mode
  0007f	8b 00		 mov	 eax, DWORD PTR [rax]
  00081	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00085	45 33 c9	 xor	 r9d, r9d
  00088	45 33 c0	 xor	 r8d, r8d
  0008b	48 8b 54 24 48	 mov	 rdx, QWORD PTR tv78[rsp]
  00090	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR window
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwSetWindowMonitor

; 182  : 	glfwSwapInterval(vSyncCount);

  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR vSyncCount
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwSwapInterval

; 183  : 	if (!fullScreen) return;

  000a9	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?fullScreen@?1??ChangeFullScreen@@9@9 ; `ChangeFullScreen'::`2'::fullScreen

; 184  : }

  000b0	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000b4	5f		 pop	 rdi
  000b5	c3		 ret	 0
ChangeFullScreen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.c
;	COMDAT SetFullScreen
_TEXT	SEGMENT
tv74 = 64
fullScreen$ = 96
SetFullScreen PROC					; COMDAT

; 185  : inline void SetFullScreen(bool fullScreen) {

$LN5:
  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	57		 push	 rdi
  00005	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00010	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 186  : 	glfwSetWindowMonitor(window, fullScreen ? monitor : NULL, 0, 0, mode->width, mode->height, mode->refreshRate);

  00015	0f b6 44 24 60	 movzx	 eax, BYTE PTR fullScreen$[rsp]
  0001a	85 c0		 test	 eax, eax
  0001c	74 0e		 je	 SHORT $LN3@SetFullScr
  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR monitor
  00025	48 89 44 24 40	 mov	 QWORD PTR tv74[rsp], rax
  0002a	eb 09		 jmp	 SHORT $LN4@SetFullScr
$LN3@SetFullScr:
  0002c	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv74[rsp], 0
$LN4@SetFullScr:
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR mode
  0003c	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  0003f	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00043	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR mode
  0004a	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0004d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00051	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR mode
  00058	8b 00		 mov	 eax, DWORD PTR [rax]
  0005a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0005e	45 33 c9	 xor	 r9d, r9d
  00061	45 33 c0	 xor	 r8d, r8d
  00064	48 8b 54 24 40	 mov	 rdx, QWORD PTR tv74[rsp]
  00069	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR window
  00070	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwSetWindowMonitor

; 187  : 	glfwSwapInterval(vSyncCount);

  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR vSyncCount
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwSwapInterval
  00082	90		 npad	 1

; 188  : }

  00083	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00087	5f		 pop	 rdi
  00088	c3		 ret	 0
SetFullScreen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.c
_TEXT	SEGMENT
si$ = 96
pi$ = 232
__$ArrayPad$ = 272
path$ = 304
OpenFileUnsafe PROC

; 198  : static inline void OpenFileUnsafe(wchar_t *path) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 20 01
	00 00		 sub	 rsp, 288		; 00000120H
  0000d	48 8d 7c 24 50	 lea	 rdi, QWORD PTR [rsp+80]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR [rsp+304]
  00026	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002d	48 33 c4	 xor	 rax, rsp
  00030	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 199  : 	STARTUPINFO si = { sizeof(STARTUPINFO) };

  00044	c7 44 24 60 68
	00 00 00	 mov	 DWORD PTR si$[rsp], 104	; 00000068H
  0004c	48 8d 44 24 68	 lea	 rax, QWORD PTR si$[rsp+8]
  00051	48 8b f8	 mov	 rdi, rax
  00054	33 c0		 xor	 eax, eax
  00056	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  0005b	f3 aa		 rep stosb

; 200  : 	PROCESS_INFORMATION pi;
; 201  : 	si.cb = sizeof(si);

  0005d	c7 44 24 60 68
	00 00 00	 mov	 DWORD PTR si$[rsp], 104	; 00000068H

; 202  : 	ZeroMemory(&pi, sizeof(pi));

  00065	48 8d 84 24 e8
	00 00 00	 lea	 rax, QWORD PTR pi$[rsp]
  0006d	48 8b f8	 mov	 rdi, rax
  00070	33 c0		 xor	 eax, eax
  00072	b9 18 00 00 00	 mov	 ecx, 24
  00077	f3 aa		 rep stosb

; 203  : 	CreateProcess(path, NULL, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi);

  00079	48 8d 84 24 e8
	00 00 00	 lea	 rax, QWORD PTR pi$[rsp]
  00081	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00086	48 8d 44 24 60	 lea	 rax, QWORD PTR si$[rsp]
  0008b	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00090	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR [rsp+56], 0
  00099	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  000a2	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  000aa	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  000b2	45 33 c9	 xor	 r9d, r9d
  000b5	45 33 c0	 xor	 r8d, r8d
  000b8	33 d2		 xor	 edx, edx
  000ba	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  000c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateProcessW
  000c8	90		 npad	 1

; 204  : }

  000c9	48 8b cc	 mov	 rcx, rsp
  000cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:OpenFileUnsafe$rtcFrameData
  000d3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000d8	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000e0	48 33 cc	 xor	 rcx, rsp
  000e3	e8 00 00 00 00	 call	 __security_check_cookie
  000e8	48 81 c4 20 01
	00 00		 add	 rsp, 288		; 00000120H
  000ef	5f		 pop	 rdi
  000f0	c3		 ret	 0
OpenFileUnsafe ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.c
_TEXT	SEGMENT
dst$ = 48
cnt$ = 56
AllocPtrPtr PROC

; 206  : void AllocPtrPtr(void ***dst, size_t cnt) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 207  : 	*dst = malloc(sizeof(void **) * cnt);

  0001b	b8 08 00 00 00	 mov	 eax, 8
  00020	48 f7 64 24 38	 mul	 QWORD PTR cnt$[rsp]
  00025	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  0002c	48 0f 42 c1	 cmovb	 rax, rcx
  00030	48 8b c8	 mov	 rcx, rax
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00039	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dst$[rsp]
  0003e	48 89 01	 mov	 QWORD PTR [rcx], rax

; 208  : }

  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5f		 pop	 rdi
  00046	c3		 ret	 0
AllocPtrPtr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.c
_TEXT	SEGMENT
frequencyHolder$6 = 56
save$7 = 72
deltaT$8 = 80
hintTargets$9 = 104
targetsLen$10 = 132
i$11 = 136
title$12 = 144
longFrameWaitTime$ = 152
textureSlots$13 = 164
tv295 = 192
tv297 = 196
tv309 = 200
tv311 = 204
tv323 = 208
tv325 = 212
tv337 = 216
tv339 = 220
tv427 = 224
tv429 = 228
tv462 = 232
tv494 = 236
tv496 = 240
__$ArrayPad$ = 248
main	PROC

; 224  : {

$LN58:
  00000	40 57		 push	 rdi
  00002	48 81 ec 00 01
	00 00		 sub	 rsp, 256		; 00000100H
  00009	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  0000e	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00033	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 225  : 	stbi_set_flip_vertically_on_load(1);

  00038	b9 01 00 00 00	 mov	 ecx, 1
  0003d	e8 00 00 00 00	 call	 stbi_set_flip_vertically_on_load

; 226  : 	srand(time(NULL));

  00042	33 c9		 xor	 ecx, ecx
  00044	e8 00 00 00 00	 call	 time
  00049	8b c8		 mov	 ecx, eax
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_srand
  00051	90		 npad	 1

; 227  : 	{
; 228  : 		LARGE_INTEGER frequencyHolder;
; 229  : 		QueryPerformanceFrequency(&frequencyHolder);

  00052	48 8d 4c 24 38	 lea	 rcx, QWORD PTR frequencyHolder$6[rsp]
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceFrequency

; 230  : 		frequency = frequencyHolder.QuadPart;

  0005d	48 8b 44 24 38	 mov	 rax, QWORD PTR frequencyHolder$6[rsp]
  00062	48 89 05 00 00
	00 00		 mov	 QWORD PTR frequency, rax

; 231  : 		QueryPerformanceCounter(&pTime);

  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pTime
  00070	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 232  : 		char* save = ReadSaveFile("saves/save_1.txt", SAVE_FILE_MAX_LINE_CHAR);

  00076	ba ee 02 00 00	 mov	 edx, 750		; 000002eeH
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@EKFBNKE@saves?1save_1?4txt@
  00082	e8 00 00 00 00	 call	 ReadSaveFile
  00087	48 89 44 24 48	 mov	 QWORD PTR save$7[rsp], rax

; 233  : 		float deltaT = deltaTime();

  0008c	e8 00 00 00 00	 call	 deltaTime
  00091	f3 0f 11 44 24
	50		 movss	 DWORD PTR deltaT$8[rsp], xmm0

; 234  : 		printf("\nLoading save file took %f seconds.\n", deltaT);

  00097	f3 0f 5a 44 24
	50		 cvtss2sd xmm0, DWORD PTR deltaT$8[rsp]
  0009d	0f 28 c8	 movaps	 xmm1, xmm0
  000a0	66 48 0f 7e ca	 movq	 rdx, xmm1
  000a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@JPPIGLOJ@?6Loading?5save?5file?5took?5?$CFf?5seco@
  000ac	e8 00 00 00 00	 call	 printf

; 235  : 		free(save);

  000b1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR save$7[rsp]
  000b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 236  : 		GLenum hintTargets[4] = {

  000bc	c7 44 24 68 52
	0c 00 00	 mov	 DWORD PTR hintTargets$9[rsp], 3154 ; 00000c52H
  000c4	c7 44 24 6c 53
	0c 00 00	 mov	 DWORD PTR hintTargets$9[rsp+4], 3155 ; 00000c53H
  000cc	c7 44 24 70 ef
	84 00 00	 mov	 DWORD PTR hintTargets$9[rsp+8], 34031 ; 000084efH
  000d4	c7 44 24 74 8b
	8b 00 00	 mov	 DWORD PTR hintTargets$9[rsp+12], 35723 ; 00008b8bH

; 237  : 			GL_LINE_SMOOTH_HINT,
; 238  : 			GL_POLYGON_SMOOTH_HINT,
; 239  : 			GL_TEXTURE_COMPRESSION_HINT,
; 240  : 			GL_FRAGMENT_SHADER_DERIVATIVE_HINT,
; 241  : 		};
; 242  : 		ushort targetsLen = lengthOf(hintTargets), i;

  000dc	b8 04 00 00 00	 mov	 eax, 4
  000e1	66 89 84 24 84
	00 00 00	 mov	 WORD PTR targetsLen$10[rsp], ax

; 243  : 		for (i = 0; i < targetsLen; i++) {

  000e9	33 c0		 xor	 eax, eax
  000eb	66 89 84 24 88
	00 00 00	 mov	 WORD PTR i$11[rsp], ax
  000f3	eb 13		 jmp	 SHORT $LN4@main
$LN2@main:
  000f5	0f b7 84 24 88
	00 00 00	 movzx	 eax, WORD PTR i$11[rsp]
  000fd	66 ff c0	 inc	 ax
  00100	66 89 84 24 88
	00 00 00	 mov	 WORD PTR i$11[rsp], ax
$LN4@main:
  00108	0f b7 84 24 88
	00 00 00	 movzx	 eax, WORD PTR i$11[rsp]
  00110	0f b7 8c 24 84
	00 00 00	 movzx	 ecx, WORD PTR targetsLen$10[rsp]
  00118	3b c1		 cmp	 eax, ecx
  0011a	7d 2f		 jge	 SHORT $LN3@main

; 244  : 			glHint(hintTargets[i], GL_FASTEST);

  0011c	0f b7 84 24 88
	00 00 00	 movzx	 eax, WORD PTR i$11[rsp]
  00124	ba 01 11 00 00	 mov	 edx, 4353		; 00001101H
  00129	8b 4c 84 68	 mov	 ecx, DWORD PTR hintTargets$9[rsp+rax*4]
  0012d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glHint

; 245  : 			if (i >= RAND_ENTROPY_FACTOR) {

  00133	0f b7 84 24 88
	00 00 00	 movzx	 eax, WORD PTR i$11[rsp]
  0013b	83 f8 0a	 cmp	 eax, 10
  0013e	7c 02		 jl	 SHORT $LN10@main

; 246  : 				continue;

  00140	eb b3		 jmp	 SHORT $LN2@main
$LN10@main:

; 247  : 			}
; 248  : 			rand();

  00142	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  00148	90		 npad	 1

; 249  : 		}

  00149	eb aa		 jmp	 SHORT $LN2@main
$LN3@main:

; 250  : 		if (targetsLen < RAND_ENTROPY_FACTOR) {

  0014b	0f b7 84 24 84
	00 00 00	 movzx	 eax, WORD PTR targetsLen$10[rsp]
  00153	83 f8 0a	 cmp	 eax, 10
  00156	7d 45		 jge	 SHORT $LN11@main

; 251  : 			for (i = 0; i < (RAND_ENTROPY_FACTOR - targetsLen); i++) {

  00158	33 c0		 xor	 eax, eax
  0015a	66 89 84 24 88
	00 00 00	 mov	 WORD PTR i$11[rsp], ax
  00162	eb 13		 jmp	 SHORT $LN7@main
$LN5@main:
  00164	0f b7 84 24 88
	00 00 00	 movzx	 eax, WORD PTR i$11[rsp]
  0016c	66 ff c0	 inc	 ax
  0016f	66 89 84 24 88
	00 00 00	 mov	 WORD PTR i$11[rsp], ax
$LN7@main:
  00177	0f b7 84 24 88
	00 00 00	 movzx	 eax, WORD PTR i$11[rsp]
  0017f	0f b7 8c 24 84
	00 00 00	 movzx	 ecx, WORD PTR targetsLen$10[rsp]
  00187	ba 0a 00 00 00	 mov	 edx, 10
  0018c	2b d1		 sub	 edx, ecx
  0018e	8b ca		 mov	 ecx, edx
  00190	3b c1		 cmp	 eax, ecx
  00192	7d 09		 jge	 SHORT $LN6@main

; 252  : 				rand();

  00194	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  0019a	90		 npad	 1

; 253  : 			}

  0019b	eb c7		 jmp	 SHORT $LN5@main
$LN6@main:
$LN11@main:

; 254  : 		}
; 255  : 	}
; 256  : 	glfwInit();

  0019d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwInit

; 257  : 	monitor = glfwGetPrimaryMonitor();

  001a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwGetPrimaryMonitor
  001a9	48 89 05 00 00
	00 00		 mov	 QWORD PTR monitor, rax

; 258  : 	mode = glfwGetVideoMode(glfwGetPrimaryMonitor());

  001b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwGetPrimaryMonitor
  001b6	48 8b c8	 mov	 rcx, rax
  001b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwGetVideoMode
  001bf	48 89 05 00 00
	00 00		 mov	 QWORD PTR mode, rax

; 259  : 	//glfwWindowHint(GLFW_MAXIMIZED, true);
; 260  : 	glfwWindowHint(GLFW_CENTER_CURSOR, GLFW_FALSE);

  001c6	33 d2		 xor	 edx, edx
  001c8	b9 09 00 02 00	 mov	 ecx, 131081		; 00020009H
  001cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwWindowHint
  001d3	90		 npad	 1

; 261  : 	{
; 262  : 		const char* title = "Hello, my name is Kevin, I have Changnesia. -- a reference from the popular show \"community\"";

  001d4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0FN@GDBHHMPF@Hello?0?5my?5name?5is?5Kevin?0?5I?5have@
  001db	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR title$12[rsp], rax

; 263  : 		window = glfwCreateWindow(mode->width, mode->height, title, NULL, NULL);//need to startup with null for monitor parameter because otherwise window takes longer to start

  001e3	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  001ec	45 33 c9	 xor	 r9d, r9d
  001ef	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR title$12[rsp]
  001f7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR mode
  001fe	8b 50 04	 mov	 edx, DWORD PTR [rax+4]
  00201	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR mode
  00208	8b 08		 mov	 ecx, DWORD PTR [rax]
  0020a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwCreateWindow
  00210	48 89 05 00 00
	00 00		 mov	 QWORD PTR window, rax

; 264  : 	}
; 265  : 	glfwMakeContextCurrent(window);

  00217	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR window
  0021e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwMakeContextCurrent

; 266  : 	SetFullScreen(false);

  00224	33 c9		 xor	 ecx, ecx
  00226	e8 00 00 00 00	 call	 SetFullScreen

; 267  : 	refreshRate = (float)mode->refreshRate;

  0022b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR mode
  00232	f3 0f 2a 40 14	 cvtsi2ss xmm0, DWORD PTR [rax+20]
  00237	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR refreshRate, xmm0

; 268  : 	cumDT = (pastDT = frameTime = 1.0f / refreshRate * timeScale) * NO_AVG_DT_FRAMES;

  0023f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00247	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR refreshRate
  0024f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR timeScale
  00257	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR frameTime, xmm0
  0025f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR frameTime
  00267	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR pastDT, xmm0
  0026f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR pastDT
  00277	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41200000
  0027f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR cumDT, xmm0

; 269  : 	const DWORD longFrameWaitTime = (DWORD)(frameTime * 1000.0f) * RESUME_LATENCY;

  00287	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR frameTime
  0028f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@447a0000
  00297	f3 48 0f 2c c0	 cvttss2si rax, xmm0
  0029c	89 84 24 98 00
	00 00		 mov	 DWORD PTR longFrameWaitTime$[rsp], eax

; 270  : 	if (glewInit() != GLEW_OK) ThrowError("your program is broken");

  002a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glewInit
  002a9	85 c0		 test	 eax, eax
  002ab	74 0d		 je	 SHORT $LN12@main
  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@PCNKIOJF@your?5program?5is?5broken@
  002b4	e8 00 00 00 00	 call	 ThrowError
  002b9	90		 npad	 1
$LN12@main:

; 271  : 	{
; 272  : 		GLint textureSlots;
; 273  : 		glGetIntegerv(GL_MAX_TEXTURE_IMAGE_UNITS, &textureSlots);

  002ba	48 8d 94 24 a4
	00 00 00	 lea	 rdx, QWORD PTR textureSlots$13[rsp]
  002c2	b9 72 88 00 00	 mov	 ecx, 34930		; 00008872H
  002c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glGetIntegerv

; 274  : 		printf("%d texture slots are available on this machine.\n", textureSlots);

  002cd	8b 94 24 a4 00
	00 00		 mov	 edx, DWORD PTR textureSlots$13[rsp]
  002d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@OIADNLIG@?$CFd?5texture?5slots?5are?5available?5@
  002db	e8 00 00 00 00	 call	 printf
  002e0	90		 npad	 1

; 275  : 	}
; 276  : 	PhysicsInit();

  002e1	e8 00 00 00 00	 call	 PhysicsInit

; 277  : 	EntityInitialize();

  002e6	e8 00 00 00 00	 call	 EntityInitialize

; 278  : 	MeshInitialize();

  002eb	e8 00 00 00 00	 call	 MeshInitialize

; 279  : 	TerrainInit();

  002f0	e8 00 00 00 00	 call	 TerrainInit

; 280  : 	SceneInit();

  002f5	e8 00 00 00 00	 call	 SceneInit

; 281  : 	PlayerInit();

  002fa	e8 00 00 00 00	 call	 PlayerInit

; 282  : 	MeshStartup();

  002ff	e8 00 00 00 00	 call	 MeshStartup

; 283  : 	glEnable(GL_BLEND);

  00304	b9 e2 0b 00 00	 mov	 ecx, 3042		; 00000be2H
  00309	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glEnable

; 284  : 	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

  0030f	ba 03 03 00 00	 mov	 edx, 771		; 00000303H
  00314	b9 02 03 00 00	 mov	 ecx, 770		; 00000302H
  00319	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glBlendFunc
  0031f	90		 npad	 1
$LN57@main:
$LN8@main:

; 285  : 	//glUseProgram(0);
; 286  : 	//InitGPUTimeCheck();
; 287  : 	//printf("cellsize is (%f, %f).\n", cellSize.x, cellSize.y);
; 288  : 	while (!glfwWindowShouldClose(window)) {

  00320	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR window
  00327	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwWindowShouldClose
  0032d	85 c0		 test	 eax, eax
  0032f	0f 85 7d 09 00
	00		 jne	 $LN9@main

; 289  : 		//StartGPUTimeCheck();
; 290  : #ifndef RUN_IN_BACKGROUND
; 291  : 		if (!glfwGetWindowAttrib(window, GLFW_FOCUSED)) Idle(continue);

  00335	ba 01 00 02 00	 mov	 edx, 131073		; 00020001H
  0033a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR window
  00341	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwGetWindowAttrib
  00347	85 c0		 test	 eax, eax
  00349	75 1c		 jne	 SHORT $LN13@main
  0034b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwPollEvents
  00351	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR longFrameWaitTime$[rsp]
  00358	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep
  0035e	c6 05 00 00 00
	00 01		 mov	 BYTE PTR notFocussed, 1
  00365	eb b9		 jmp	 SHORT $LN8@main
$LN13@main:

; 292  : #endif
; 293  : 		if (!timeScale) Idle(\

  00367	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR timeScale
  0036f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00376	0f 8a 1f 01 00
	00		 jp	 $LN14@main
  0037c	0f 85 19 01 00
	00		 jne	 $LN14@main
  00382	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwPollEvents
  00388	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR longFrameWaitTime$[rsp]
  0038f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep
  00395	c6 05 00 00 00
	00 01		 mov	 BYTE PTR notFocussed, 1
  0039c	b9 51 00 00 00	 mov	 ecx, 81			; 00000051H
  003a1	e8 00 00 00 00	 call	 pressing
  003a6	b9 01 00 00 00	 mov	 ecx, 1
  003ab	48 6b c9 51	 imul	 rcx, rcx, 81		; 00000051H
  003af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressingKey
  003b6	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  003b9	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  003be	e8 00 00 00 00	 call	 pressing
  003c3	b9 01 00 00 00	 mov	 ecx, 1
  003c8	48 69 c9 a2 00
	00 00		 imul	 rcx, rcx, 162		; 000000a2H
  003cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressingKey
  003d6	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  003d9	b9 a3 00 00 00	 mov	 ecx, 163		; 000000a3H
  003de	e8 00 00 00 00	 call	 pressing
  003e3	b9 01 00 00 00	 mov	 ecx, 1
  003e8	48 69 c9 a3 00
	00 00		 imul	 rcx, rcx, 163		; 000000a3H
  003ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressingKey
  003f6	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  003f9	b8 01 00 00 00	 mov	 eax, 1
  003fe	48 6b c0 51	 imul	 rax, rax, 81		; 00000051H
  00402	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressingKey
  00409	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0040d	85 c0		 test	 eax, eax
  0040f	74 28		 je	 SHORT $LN15@main
  00411	b8 01 00 00 00	 mov	 eax, 1
  00416	48 6b c0 51	 imul	 rax, rax, 81		; 00000051H
  0041a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressedKey
  00421	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00425	85 c0		 test	 eax, eax
  00427	75 10		 jne	 SHORT $LN15@main
  00429	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR pressedControl
  00430	85 c0		 test	 eax, eax
  00432	74 05		 je	 SHORT $LN15@main
  00434	e9 79 08 00 00	 jmp	 $LN9@main
$LN15@main:
  00439	b9 51 00 00 00	 mov	 ecx, 81			; 00000051H
  0043e	e8 00 00 00 00	 call	 pressing
  00443	b9 01 00 00 00	 mov	 ecx, 1
  00448	48 6b c9 51	 imul	 rcx, rcx, 81		; 00000051H
  0044c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressedKey
  00453	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00456	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  0045b	e8 00 00 00 00	 call	 pressing
  00460	b9 01 00 00 00	 mov	 ecx, 1
  00465	48 69 c9 a2 00
	00 00		 imul	 rcx, rcx, 162		; 000000a2H
  0046c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressedKey
  00473	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00476	b9 a3 00 00 00	 mov	 ecx, 163		; 000000a3H
  0047b	e8 00 00 00 00	 call	 pressing
  00480	b9 01 00 00 00	 mov	 ecx, 1
  00485	48 69 c9 a3 00
	00 00		 imul	 rcx, rcx, 163		; 000000a3H
  0048c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressedKey
  00493	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00496	e9 ed 04 00 00	 jmp	 $cont$59
$LN14@main:

; 294  : 			CheckQuitKeyStatus();\
; 295  : 			CheckQuitStatus();\
; 296  : 			CheckQuitPastKey();\
; 297  : 			goto cont
; 298  : 		);
; 299  : 		if (notFocussed) {

  0049b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR notFocussed
  004a2	85 c0		 test	 eax, eax
  004a4	74 14		 je	 SHORT $LN16@main

; 300  : 			QueryPerformanceCounter(&pTime);

  004a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pTime
  004ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 301  : 			notFocussed = false;

  004b3	c6 05 00 00 00
	00 00		 mov	 BYTE PTR notFocussed, 0
$LN16@main:

; 302  : 		}
; 303  : 		//glUseProgram(shader);
; 304  : 		//glBindVertexArray(vao);
; 305  : 		//glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);
; 306  : 		glClear(GL_COLOR_BUFFER_BIT);

  004ba	b9 00 40 00 00	 mov	 ecx, 16384		; 00004000H
  004bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glClear

; 307  : 		glDrawElements(GL_TRIANGLES, curIndiciesLoc, GL_UNSIGNED_INT, NULL);

  004c5	45 33 c9	 xor	 r9d, r9d
  004c8	41 b8 05 14 00
	00		 mov	 r8d, 5125		; 00001405H
  004ce	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR curIndiciesLoc
  004d4	b9 04 00 00 00	 mov	 ecx, 4
  004d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glDrawElements

; 308  : 		glfwSwapBuffers(window);

  004df	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR window
  004e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwSwapBuffers

; 309  : 		glfwPollEvents();

  004ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwPollEvents

; 310  : 		SetKey(K_KEY);

  004f2	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  004f7	e8 00 00 00 00	 call	 pressing
  004fc	b9 01 00 00 00	 mov	 ecx, 1
  00501	48 6b c9 4b	 imul	 rcx, rcx, 75		; 0000004bH
  00505	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressingKey
  0050c	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 311  : 		SetKey(J_KEY);

  0050f	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00514	e8 00 00 00 00	 call	 pressing
  00519	b9 01 00 00 00	 mov	 ecx, 1
  0051e	48 6b c9 4a	 imul	 rcx, rcx, 74		; 0000004aH
  00522	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressingKey
  00529	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 312  : 		SetKey(SPACE_KEY);

  0052c	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00531	e8 00 00 00 00	 call	 pressing
  00536	b9 01 00 00 00	 mov	 ecx, 1
  0053b	48 6b c9 20	 imul	 rcx, rcx, 32		; 00000020H
  0053f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressingKey
  00546	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 313  : 		SetKey(R_KEY);

  00549	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0054e	e8 00 00 00 00	 call	 pressing
  00553	b9 01 00 00 00	 mov	 ecx, 1
  00558	48 6b c9 52	 imul	 rcx, rcx, 82		; 00000052H
  0055c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressingKey
  00563	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 314  : 		SetKey(VK_RETURN);

  00566	b9 0d 00 00 00	 mov	 ecx, 13
  0056b	e8 00 00 00 00	 call	 pressing
  00570	b9 01 00 00 00	 mov	 ecx, 1
  00575	48 6b c9 0d	 imul	 rcx, rcx, 13
  00579	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressingKey
  00580	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 315  : 		SetKey(VK_MENU);

  00583	b9 12 00 00 00	 mov	 ecx, 18
  00588	e8 00 00 00 00	 call	 pressing
  0058d	b9 01 00 00 00	 mov	 ecx, 1
  00592	48 6b c9 12	 imul	 rcx, rcx, 18
  00596	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressingKey
  0059d	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 316  : 		CheckQuitKeyStatus();

  005a0	b9 51 00 00 00	 mov	 ecx, 81			; 00000051H
  005a5	e8 00 00 00 00	 call	 pressing
  005aa	b9 01 00 00 00	 mov	 ecx, 1
  005af	48 6b c9 51	 imul	 rcx, rcx, 81		; 00000051H
  005b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressingKey
  005ba	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  005bd	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  005c2	e8 00 00 00 00	 call	 pressing
  005c7	b9 01 00 00 00	 mov	 ecx, 1
  005cc	48 69 c9 a2 00
	00 00		 imul	 rcx, rcx, 162		; 000000a2H
  005d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressingKey
  005da	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  005dd	b9 a3 00 00 00	 mov	 ecx, 163		; 000000a3H
  005e2	e8 00 00 00 00	 call	 pressing
  005e7	b9 01 00 00 00	 mov	 ecx, 1
  005ec	48 69 c9 a3 00
	00 00		 imul	 rcx, rcx, 163		; 000000a3H
  005f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressingKey
  005fa	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 317  : 		pressingKey[UP_ARROW] = pressing(UP_ARROW) || pressing(W_KEY);

  005fd	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  00602	e8 00 00 00 00	 call	 pressing
  00607	0f b6 c0	 movzx	 eax, al
  0060a	85 c0		 test	 eax, eax
  0060c	75 1e		 jne	 SHORT $LN29@main
  0060e	b9 57 00 00 00	 mov	 ecx, 87			; 00000057H
  00613	e8 00 00 00 00	 call	 pressing
  00618	0f b6 c0	 movzx	 eax, al
  0061b	85 c0		 test	 eax, eax
  0061d	75 0d		 jne	 SHORT $LN29@main
  0061f	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv295[rsp], 0
  0062a	eb 0b		 jmp	 SHORT $LN30@main
$LN29@main:
  0062c	c7 84 24 c0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv295[rsp], 1
$LN30@main:
  00637	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR tv295[rsp], 0
  0063f	75 0d		 jne	 SHORT $LN31@main
  00641	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv297[rsp], 0
  0064c	eb 0b		 jmp	 SHORT $LN32@main
$LN31@main:
  0064e	c7 84 24 c4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv297[rsp], 1
$LN32@main:
  00659	b8 01 00 00 00	 mov	 eax, 1
  0065e	48 6b c0 26	 imul	 rax, rax, 38		; 00000026H
  00662	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressingKey
  00669	0f b6 94 24 c4
	00 00 00	 movzx	 edx, BYTE PTR tv297[rsp]
  00671	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 318  : 		pressingKey[D_KEY] = pressing(D_KEY) || pressing(RIGHT_ARROW);

  00674	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00679	e8 00 00 00 00	 call	 pressing
  0067e	0f b6 c0	 movzx	 eax, al
  00681	85 c0		 test	 eax, eax
  00683	75 1e		 jne	 SHORT $LN33@main
  00685	b9 27 00 00 00	 mov	 ecx, 39			; 00000027H
  0068a	e8 00 00 00 00	 call	 pressing
  0068f	0f b6 c0	 movzx	 eax, al
  00692	85 c0		 test	 eax, eax
  00694	75 0d		 jne	 SHORT $LN33@main
  00696	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv309[rsp], 0
  006a1	eb 0b		 jmp	 SHORT $LN34@main
$LN33@main:
  006a3	c7 84 24 c8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv309[rsp], 1
$LN34@main:
  006ae	83 bc 24 c8 00
	00 00 00	 cmp	 DWORD PTR tv309[rsp], 0
  006b6	75 0d		 jne	 SHORT $LN35@main
  006b8	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv311[rsp], 0
  006c3	eb 0b		 jmp	 SHORT $LN36@main
$LN35@main:
  006c5	c7 84 24 cc 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv311[rsp], 1
$LN36@main:
  006d0	b8 01 00 00 00	 mov	 eax, 1
  006d5	48 6b c0 44	 imul	 rax, rax, 68		; 00000044H
  006d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressingKey
  006e0	0f b6 94 24 cc
	00 00 00	 movzx	 edx, BYTE PTR tv311[rsp]
  006e8	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 319  : 		pressingKey[A_KEY] = pressing(A_KEY) || pressing(LEFT_ARROW);

  006eb	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  006f0	e8 00 00 00 00	 call	 pressing
  006f5	0f b6 c0	 movzx	 eax, al
  006f8	85 c0		 test	 eax, eax
  006fa	75 1e		 jne	 SHORT $LN37@main
  006fc	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00701	e8 00 00 00 00	 call	 pressing
  00706	0f b6 c0	 movzx	 eax, al
  00709	85 c0		 test	 eax, eax
  0070b	75 0d		 jne	 SHORT $LN37@main
  0070d	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv323[rsp], 0
  00718	eb 0b		 jmp	 SHORT $LN38@main
$LN37@main:
  0071a	c7 84 24 d0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv323[rsp], 1
$LN38@main:
  00725	83 bc 24 d0 00
	00 00 00	 cmp	 DWORD PTR tv323[rsp], 0
  0072d	75 0d		 jne	 SHORT $LN39@main
  0072f	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv325[rsp], 0
  0073a	eb 0b		 jmp	 SHORT $LN40@main
$LN39@main:
  0073c	c7 84 24 d4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv325[rsp], 1
$LN40@main:
  00747	b8 01 00 00 00	 mov	 eax, 1
  0074c	48 6b c0 41	 imul	 rax, rax, 65		; 00000041H
  00750	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressingKey
  00757	0f b6 94 24 d4
	00 00 00	 movzx	 edx, BYTE PTR tv325[rsp]
  0075f	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 320  : 		pressingKey[VK_LSHIFT] = pressing(VK_LSHIFT) || pressing(VK_RSHIFT);

  00762	b9 a0 00 00 00	 mov	 ecx, 160		; 000000a0H
  00767	e8 00 00 00 00	 call	 pressing
  0076c	0f b6 c0	 movzx	 eax, al
  0076f	85 c0		 test	 eax, eax
  00771	75 1e		 jne	 SHORT $LN41@main
  00773	b9 a1 00 00 00	 mov	 ecx, 161		; 000000a1H
  00778	e8 00 00 00 00	 call	 pressing
  0077d	0f b6 c0	 movzx	 eax, al
  00780	85 c0		 test	 eax, eax
  00782	75 0d		 jne	 SHORT $LN41@main
  00784	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv337[rsp], 0
  0078f	eb 0b		 jmp	 SHORT $LN42@main
$LN41@main:
  00791	c7 84 24 d8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv337[rsp], 1
$LN42@main:
  0079c	83 bc 24 d8 00
	00 00 00	 cmp	 DWORD PTR tv337[rsp], 0
  007a4	75 0d		 jne	 SHORT $LN43@main
  007a6	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv339[rsp], 0
  007b1	eb 0b		 jmp	 SHORT $LN44@main
$LN43@main:
  007b3	c7 84 24 dc 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv339[rsp], 1
$LN44@main:
  007be	b8 01 00 00 00	 mov	 eax, 1
  007c3	48 69 c0 a0 00
	00 00		 imul	 rax, rax, 160		; 000000a0H
  007ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressingKey
  007d1	0f b6 94 24 dc
	00 00 00	 movzx	 edx, BYTE PTR tv339[rsp]
  007d9	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 321  : 		startingFrame = (float)false;

  007dc	0f 57 c0	 xorps	 xmm0, xmm0
  007df	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR startingFrame, xmm0

; 322  : 		cumDT += (curDT = deltaTime()) - pastDT;

  007e7	e8 00 00 00 00	 call	 deltaTime
  007ec	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR curDT, xmm0
  007f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR curDT
  007fc	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR pastDT
  00804	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR cumDT
  0080c	f3 0f 58 c8	 addss	 xmm1, xmm0
  00810	0f 28 c1	 movaps	 xmm0, xmm1
  00813	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR cumDT, xmm0

; 323  : 		pastDT = curDT;

  0081b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR curDT
  00823	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR pastDT, xmm0

; 324  : 		avgDT = cumDT / (float)NO_AVG_DT_FRAMES;

  0082b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR cumDT
  00833	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41200000
  0083b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR avgDT, xmm0

; 325  : 		//printf("%d\n", rand());
; 326  : 		PlayerUpdate();

  00843	e8 00 00 00 00	 call	 PlayerUpdate

; 327  : 		SceneUpdate();

  00848	e8 00 00 00 00	 call	 SceneUpdate

; 328  : 		if (entityHead) UpdateEntities();//needs to be called AFTER every update which could have a regular transformation in it.

  0084d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR entityHead, 0
  00855	74 06		 je	 SHORT $LN17@main
  00857	e8 00 00 00 00	 call	 UpdateEntities
  0085c	90		 npad	 1
$LN17@main:

; 329  : 		if (squishHead) UpdateSquishables();//needs to be called AFTER every update which could have a squish transformation in it.

  0085d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR squishHead, 0
  00865	74 06		 je	 SHORT $LN18@main
  00867	e8 00 00 00 00	 call	 UpdateSquishables
  0086c	90		 npad	 1
$LN18@main:

; 330  : 		if (sliderHead) UpdateSliders();//needs to be called AFTER every update which could have a slider transformation in it.

  0086d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR sliderHead, 0
  00875	74 06		 je	 SHORT $LN19@main
  00877	e8 00 00 00 00	 call	 UpdateSliders
  0087c	90		 npad	 1
$LN19@main:

; 331  : 		/*sprintf(temp, "%f", deltaTime());
; 332  : 		strcat(temp, "\n");
; 333  : 		print(temp);
; 334  : 		temp[0] = '\0';*/
; 335  : 		//printf("deltatime is %f\n", deltaTime());
; 336  : 		if (fullScreenET > .2f)

  0087d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR fullScreenET
  00885	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3e4ccccd
  0088c	76 72		 jbe	 SHORT $LN20@main

; 337  : 		{
; 338  : 			if (IsHoldKey1PressKey2(VK_MENU, VK_RETURN)) {

  0088e	b8 01 00 00 00	 mov	 eax, 1
  00893	48 6b c0 12	 imul	 rax, rax, 18
  00897	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressingKey
  0089e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  008a2	85 c0		 test	 eax, eax
  008a4	74 58		 je	 SHORT $LN22@main
  008a6	b8 01 00 00 00	 mov	 eax, 1
  008ab	48 6b c0 12	 imul	 rax, rax, 18
  008af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressedKey
  008b6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  008ba	85 c0		 test	 eax, eax
  008bc	74 40		 je	 SHORT $LN22@main
  008be	b8 01 00 00 00	 mov	 eax, 1
  008c3	48 6b c0 0d	 imul	 rax, rax, 13
  008c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressingKey
  008ce	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  008d2	85 c0		 test	 eax, eax
  008d4	74 28		 je	 SHORT $LN22@main
  008d6	b8 01 00 00 00	 mov	 eax, 1
  008db	48 6b c0 0d	 imul	 rax, rax, 13
  008df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressedKey
  008e6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  008ea	85 c0		 test	 eax, eax
  008ec	75 10		 jne	 SHORT $LN22@main

; 339  : 				ChangeFullScreen();

  008ee	e8 00 00 00 00	 call	 ChangeFullScreen

; 340  : 				fullScreenET = 0;

  008f3	0f 57 c0	 xorps	 xmm0, xmm0
  008f6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR fullScreenET, xmm0
$LN22@main:

; 341  : 			}
; 342  : 		}

  008fe	eb 1c		 jmp	 SHORT $LN21@main
$LN20@main:

; 343  : 		else fullScreenET += deltaTime();

  00900	e8 00 00 00 00	 call	 deltaTime
  00905	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR fullScreenET
  0090d	f3 0f 58 c8	 addss	 xmm1, xmm0
  00911	0f 28 c1	 movaps	 xmm0, xmm1
  00914	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR fullScreenET, xmm0
$LN21@main:

; 344  : 		if (shouldMoveCam) {

  0091c	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR shouldMoveCam
  00923	85 c0		 test	 eax, eax
  00925	74 27		 je	 SHORT $LN23@main

; 345  : 			shouldMoveCam = false;

  00927	c6 05 00 00 00
	00 00		 mov	 BYTE PTR shouldMoveCam, 0

; 346  : 			glUniform2f(camPosLoc, camPosition.x, camPosition.y);

  0092e	f3 0f 10 15 04
	00 00 00	 movss	 xmm2, DWORD PTR camPosition+4
  00936	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR camPosition
  0093e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR camPosLoc
  00944	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewUniform2f
  0094b	ff 10		 call	 QWORD PTR [rax]
  0094d	90		 npad	 1
$LN23@main:

; 347  : 		}
; 348  : 		if (shouldDraw) {

  0094e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR shouldDraw
  00955	85 c0		 test	 eax, eax
  00957	74 29		 je	 SHORT $LN24@main

; 349  : 			glBufferData(GL_ARRAY_BUFFER, verticesSize, vertices, GL_DYNAMIC_DRAW);

  00959	41 b9 e8 88 00
	00		 mov	 r9d, 35048		; 000088e8H
  0095f	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR vertices
  00966	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR verticesSize
  0096d	b9 92 88 00 00	 mov	 ecx, 34962		; 00008892H
  00972	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewBufferData
  00979	ff 10		 call	 QWORD PTR [rax]

; 350  : 			shouldDraw = false;

  0097b	c6 05 00 00 00
	00 00		 mov	 BYTE PTR shouldDraw, 0
$LN24@main:

; 351  : 		}
; 352  : 		//Sleep(frameWaitTime);
; 353  : 		/*EndGPUTimeCheck();
; 354  : 		printf("took %f seconds\n", fabsf((float)(result * 1000000 / frequency)) / 1000000.0f);*/
; 355  : 		glCheckError();

  00982	e8 00 00 00 00	 call	 glCheckError
  00987	90		 npad	 1
$cont$59:

; 356  : 	cont:
; 357  : 		pressedControl = PressingN_Pressed(VK_LCONTROL) || PressingN_Pressed(VK_RCONTROL);

  00988	b8 01 00 00 00	 mov	 eax, 1
  0098d	48 69 c0 a2 00
	00 00		 imul	 rax, rax, 162		; 000000a2H
  00994	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressingKey
  0099b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0099f	85 c0		 test	 eax, eax
  009a1	74 1b		 je	 SHORT $LN45@main
  009a3	b8 01 00 00 00	 mov	 eax, 1
  009a8	48 69 c0 a2 00
	00 00		 imul	 rax, rax, 162		; 000000a2H
  009af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressedKey
  009b6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  009ba	85 c0		 test	 eax, eax
  009bc	75 43		 jne	 SHORT $LN47@main
$LN45@main:
  009be	b8 01 00 00 00	 mov	 eax, 1
  009c3	48 69 c0 a3 00
	00 00		 imul	 rax, rax, 163		; 000000a3H
  009ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressingKey
  009d1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  009d5	85 c0		 test	 eax, eax
  009d7	74 1b		 je	 SHORT $LN46@main
  009d9	b8 01 00 00 00	 mov	 eax, 1
  009de	48 69 c0 a3 00
	00 00		 imul	 rax, rax, 163		; 000000a3H
  009e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressedKey
  009ec	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  009f0	85 c0		 test	 eax, eax
  009f2	75 0d		 jne	 SHORT $LN47@main
$LN46@main:
  009f4	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv427[rsp], 0
  009ff	eb 0b		 jmp	 SHORT $LN48@main
$LN47@main:
  00a01	c7 84 24 e0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv427[rsp], 1
$LN48@main:
  00a0c	83 bc 24 e0 00
	00 00 00	 cmp	 DWORD PTR tv427[rsp], 0
  00a14	75 0d		 jne	 SHORT $LN49@main
  00a16	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv429[rsp], 0
  00a21	eb 0b		 jmp	 SHORT $LN50@main
$LN49@main:
  00a23	c7 84 24 e4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv429[rsp], 1
$LN50@main:
  00a2e	0f b6 84 24 e4
	00 00 00	 movzx	 eax, BYTE PTR tv429[rsp]
  00a36	88 05 00 00 00
	00		 mov	 BYTE PTR pressedControl, al

; 358  : 		if (PressingN_NotPressed(R_KEY) && pressedControl) {

  00a3c	b8 01 00 00 00	 mov	 eax, 1
  00a41	48 6b c0 52	 imul	 rax, rax, 82		; 00000052H
  00a45	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressingKey
  00a4c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00a50	85 c0		 test	 eax, eax
  00a52	74 41		 je	 SHORT $LN25@main
  00a54	b8 01 00 00 00	 mov	 eax, 1
  00a59	48 6b c0 52	 imul	 rax, rax, 82		; 00000052H
  00a5d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressedKey
  00a64	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00a68	85 c0		 test	 eax, eax
  00a6a	75 29		 jne	 SHORT $LN25@main
  00a6c	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR pressedControl
  00a73	85 c0		 test	 eax, eax
  00a75	74 1e		 je	 SHORT $LN25@main

; 359  : 			OpenFileUnsafe(L"../x64/Release/cGame.exe");//no need for error checking if i just let this silently cause a bug, then i can execute both directories faster. Also, this is a billion times faster than a system call.

  00a77	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@DMAGFLJM@?$AA?4?$AA?4?$AA?1?$AAx?$AA6?$AA4?$AA?1?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?1@
  00a7e	e8 00 00 00 00	 call	 OpenFileUnsafe

; 360  : 			OpenFileUnsafe(L"cGame.exe");

  00a83	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@BFMNEOPM@?$AAc?$AAG?$AAa?$AAm?$AAe?$AA?4?$AAe?$AAx?$AAe@
  00a8a	e8 00 00 00 00	 call	 OpenFileUnsafe
  00a8f	90		 npad	 1

; 361  : 			break;

  00a90	e9 1d 02 00 00	 jmp	 $LN9@main
$LN25@main:

; 362  : 		}
; 363  : 		if (PressingN_NotPressed(Q_KEY) && pressedControl) break;

  00a95	b8 01 00 00 00	 mov	 eax, 1
  00a9a	48 6b c0 51	 imul	 rax, rax, 81		; 00000051H
  00a9e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressingKey
  00aa5	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00aa9	85 c0		 test	 eax, eax
  00aab	74 28		 je	 SHORT $LN26@main
  00aad	b8 01 00 00 00	 mov	 eax, 1
  00ab2	48 6b c0 51	 imul	 rax, rax, 81		; 00000051H
  00ab6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressedKey
  00abd	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00ac1	85 c0		 test	 eax, eax
  00ac3	75 10		 jne	 SHORT $LN26@main
  00ac5	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR pressedControl
  00acc	85 c0		 test	 eax, eax
  00ace	74 05		 je	 SHORT $LN26@main
  00ad0	e9 dd 01 00 00	 jmp	 $LN9@main
$LN26@main:

; 364  : 		if (pressing(VK_ESCAPE) && !pressedKey[VK_ESCAPE]) {

  00ad5	b9 1b 00 00 00	 mov	 ecx, 27
  00ada	e8 00 00 00 00	 call	 pressing
  00adf	0f b6 c0	 movzx	 eax, al
  00ae2	85 c0		 test	 eax, eax
  00ae4	74 54		 je	 SHORT $LN27@main
  00ae6	b8 01 00 00 00	 mov	 eax, 1
  00aeb	48 6b c0 1b	 imul	 rax, rax, 27
  00aef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressedKey
  00af6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00afa	85 c0		 test	 eax, eax
  00afc	75 3c		 jne	 SHORT $LN27@main

; 365  : 			PauseGame();

  00afe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR timeScale
  00b06	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00b0d	7a 0f		 jp	 SHORT $LN51@main
  00b0f	75 0d		 jne	 SHORT $LN51@main
  00b11	c7 84 24 e8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv462[rsp], 1
  00b1c	eb 0b		 jmp	 SHORT $LN52@main
$LN51@main:
  00b1e	c7 84 24 e8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv462[rsp], 0
$LN52@main:
  00b29	f3 0f 2a 84 24
	e8 00 00 00	 cvtsi2ss xmm0, DWORD PTR tv462[rsp]
  00b32	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR timeScale, xmm0
$LN27@main:

; 366  : 		}
; 367  : 		SetPastKey(R_KEY);

  00b3a	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00b3f	e8 00 00 00 00	 call	 pressing
  00b44	b9 01 00 00 00	 mov	 ecx, 1
  00b49	48 6b c9 52	 imul	 rcx, rcx, 82		; 00000052H
  00b4d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressedKey
  00b54	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 368  : 		SetPastKey(SPACE_KEY);

  00b57	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00b5c	e8 00 00 00 00	 call	 pressing
  00b61	b9 01 00 00 00	 mov	 ecx, 1
  00b66	48 6b c9 20	 imul	 rcx, rcx, 32		; 00000020H
  00b6a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressedKey
  00b71	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 369  : 		SetPastKey(VK_ESCAPE);

  00b74	b9 1b 00 00 00	 mov	 ecx, 27
  00b79	e8 00 00 00 00	 call	 pressing
  00b7e	b9 01 00 00 00	 mov	 ecx, 1
  00b83	48 6b c9 1b	 imul	 rcx, rcx, 27
  00b87	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressedKey
  00b8e	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 370  : 		SetPastKey(VK_MENU);

  00b91	b9 12 00 00 00	 mov	 ecx, 18
  00b96	e8 00 00 00 00	 call	 pressing
  00b9b	b9 01 00 00 00	 mov	 ecx, 1
  00ba0	48 6b c9 12	 imul	 rcx, rcx, 18
  00ba4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressedKey
  00bab	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 371  : 		SetPastKey(VK_RETURN);

  00bae	b9 0d 00 00 00	 mov	 ecx, 13
  00bb3	e8 00 00 00 00	 call	 pressing
  00bb8	b9 01 00 00 00	 mov	 ecx, 1
  00bbd	48 6b c9 0d	 imul	 rcx, rcx, 13
  00bc1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressedKey
  00bc8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 372  : 		pressedKey[UP_ARROW] = pressing(UP_ARROW) || pressing(W_KEY);

  00bcb	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  00bd0	e8 00 00 00 00	 call	 pressing
  00bd5	0f b6 c0	 movzx	 eax, al
  00bd8	85 c0		 test	 eax, eax
  00bda	75 1e		 jne	 SHORT $LN53@main
  00bdc	b9 57 00 00 00	 mov	 ecx, 87			; 00000057H
  00be1	e8 00 00 00 00	 call	 pressing
  00be6	0f b6 c0	 movzx	 eax, al
  00be9	85 c0		 test	 eax, eax
  00beb	75 0d		 jne	 SHORT $LN53@main
  00bed	c7 84 24 ec 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv494[rsp], 0
  00bf8	eb 0b		 jmp	 SHORT $LN54@main
$LN53@main:
  00bfa	c7 84 24 ec 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv494[rsp], 1
$LN54@main:
  00c05	83 bc 24 ec 00
	00 00 00	 cmp	 DWORD PTR tv494[rsp], 0
  00c0d	75 0d		 jne	 SHORT $LN55@main
  00c0f	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv496[rsp], 0
  00c1a	eb 0b		 jmp	 SHORT $LN56@main
$LN55@main:
  00c1c	c7 84 24 f0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv496[rsp], 1
$LN56@main:
  00c27	b8 01 00 00 00	 mov	 eax, 1
  00c2c	48 6b c0 26	 imul	 rax, rax, 38		; 00000026H
  00c30	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pressedKey
  00c37	0f b6 94 24 f0
	00 00 00	 movzx	 edx, BYTE PTR tv496[rsp]
  00c3f	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 373  : 		CheckQuitPastKey();

  00c42	b9 51 00 00 00	 mov	 ecx, 81			; 00000051H
  00c47	e8 00 00 00 00	 call	 pressing
  00c4c	b9 01 00 00 00	 mov	 ecx, 1
  00c51	48 6b c9 51	 imul	 rcx, rcx, 81		; 00000051H
  00c55	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressedKey
  00c5c	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00c5f	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  00c64	e8 00 00 00 00	 call	 pressing
  00c69	b9 01 00 00 00	 mov	 ecx, 1
  00c6e	48 69 c9 a2 00
	00 00		 imul	 rcx, rcx, 162		; 000000a2H
  00c75	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressedKey
  00c7c	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00c7f	b9 a3 00 00 00	 mov	 ecx, 163		; 000000a3H
  00c84	e8 00 00 00 00	 call	 pressing
  00c89	b9 01 00 00 00	 mov	 ecx, 1
  00c8e	48 69 c9 a3 00
	00 00		 imul	 rcx, rcx, 163		; 000000a3H
  00c95	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:pressedKey
  00c9c	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 374  : 		QueryPerformanceCounter(&pTime);

  00c9f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pTime
  00ca6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter
  00cac	90		 npad	 1

; 375  : 	}

  00cad	e9 6e f6 ff ff	 jmp	 $LN57@main
$LN9@main:

; 376  : 	glDeleteProgram(shader);

  00cb2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR shader
  00cb8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewDeleteProgram
  00cbf	ff 10		 call	 QWORD PTR [rax]

; 377  : 	glfwTerminate();

  00cc1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwTerminate

; 378  : 	exit(0);

  00cc7	33 c9		 xor	 ecx, ecx
  00cc9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  00ccf	90		 npad	 1

; 379  : 	return 0;

  00cd0	33 c0		 xor	 eax, eax
$LN28@main:

; 380  : }

  00cd2	48 8b f8	 mov	 rdi, rax
  00cd5	48 8b cc	 mov	 rcx, rsp
  00cd8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:main$rtcFrameData
  00cdf	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00ce4	48 8b c7	 mov	 rax, rdi
  00ce7	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00cef	48 33 cc	 xor	 rcx, rsp
  00cf2	e8 00 00 00 00	 call	 __security_check_cookie
  00cf7	48 81 c4 00 01
	00 00		 add	 rsp, 256		; 00000100H
  00cfe	5f		 pop	 rdi
  00cff	c3		 ret	 0
main	ENDP
_TEXT	ENDS
END
