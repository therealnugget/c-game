; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35211.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	oneVector
PUBLIC	noOfEnemies
PUBLIC	??_C@_0BG@MLFGPCLE@there?5are?5?$CFu?5enemies?6@ ; `string'
PUBLIC	??_C@_0N@CHFDBEHE@monk?1sprites@		; `string'
PUBLIC	??_C@_0BH@MABOBLII@images?1monk?1player?4png@	; `string'
PUBLIC	??_C@_0CO@NDPFACJE@images?1Retro?5Inventory?1Original@ ; `string'
PUBLIC	??_C@_0DE@GAHGBOII@images?1Retro?5Inventory?1Original@ ; `string'
PUBLIC	??_C@_0BF@CMJMJICG@images?1terrain?10?4png@	; `string'
PUBLIC	healthBarYOffset
PUBLIC	attkDst
PUBLIC	walkDst
PUBLIC	enemyAttkColOffsets
PUBLIC	elapsedTime
PUBLIC	noOfTerrains
PUBLIC	origEnemyScale
COMM	enemyAttkColPts:QWORD
COMM	curAnim:QWORD
COMM	healthBarPos:QWORD
COMM	terrainNodes:QWORD
COMM	enemyNodes:QWORD
COMM	agro:QWORD
COMM	forceToAdd:DWORD
COMM	updateTime:BYTE
COMM	isAgroed:BYTE
COMM	directionX:DWORD
COMM	data:QWORD
COMM	debugBoxSize:QWORD
COMM	curTransform:QWORD
COMM	agroAnim:DWORD
COMM	currentAlive:BYTE
COMM	setMeshDissolve:QWORD
COMM	opAttkNodes:QWORD
COMM	curEnemy:QWORD
COMM	terrains:QWORD
COMM	curEnemyIndex:DWORD
COMM	blue:QWORD:04H
COMM	debugMesh:QWORD:02H
COMM	enemies:QWORD
COMM	opAttkEnts:QWORD
COMM	dissolved:BYTE
COMM	resetTime:BYTE
COMM	curHB:QWORD
COMM	minAgro:DWORD
COMM	changeInPos:DWORD
_DATA	ENDS
;	COMDAT ??_C@_0BF@CMJMJICG@images?1terrain?10?4png@
CONST	SEGMENT
??_C@_0BF@CMJMJICG@images?1terrain?10?4png@ DB 'images/terrain/0.png', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@GAHGBOII@images?1Retro?5Inventory?1Original@
CONST	SEGMENT
??_C@_0DE@GAHGBOII@images?1Retro?5Inventory?1Original@ DB 'images/Retro I'
	DB	'nventory/Original/Health_03_Bar01.png', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NDPFACJE@images?1Retro?5Inventory?1Original@
CONST	SEGMENT
??_C@_0CO@NDPFACJE@images?1Retro?5Inventory?1Original@ DB 'images/Retro I'
	DB	'nventory/Original/Health_03.png', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MABOBLII@images?1monk?1player?4png@
CONST	SEGMENT
??_C@_0BH@MABOBLII@images?1monk?1player?4png@ DB 'images/monk/player.png', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CHFDBEHE@monk?1sprites@
CONST	SEGMENT
??_C@_0N@CHFDBEHE@monk?1sprites@ DB 'monk/sprites', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MLFGPCLE@there?5are?5?$CFu?5enemies?6@
CONST	SEGMENT
??_C@_0BG@MLFGPCLE@there?5are?5?$CFu?5enemies?6@ DB 'there are %u enemies'
	DB	0aH, 00H					; `string'
oneVector DD	03f800000r			; 1
	DD	03f800000r			; 1
noOfEnemies DD	0aH
elapsedTime DD	040a00000r			; 5
enemyAttkColOffsets DD 0bdf5c28fr		; -0.12
	DD	0bef5c28fr			; -0.48
	DD	03e4ccccdr			; 0.2
	DD	03f000000r			; 0.5
__4C2AD0C7_winpackagefamily@h DB 01H
__9DED9ED1_winapifamily@h DB 01H
__0B1C67B3_gl@h DB 01H
__D7C03EE9_glu@h DB 01H
__20F17275_glew@h DB 01H
__8C83BECC_concurrencysal@h DB 01H
__608E3340_sal@h DB 01H
__FB67E29A_vadefs@h DB 01H
__1D1B619C_vcruntime@h DB 01H
__735960E1_corecrt@h DB 01H
__955456CD_stddef@h DB 01H
__836A8CFC_stdint@h DB 01H
__0A1327A7_glfw3@h DB 01H
__AFFFEBA2_GL stuff@h DB 01H
__F2638511_stdbool@h DB 01H
__1D9A7FA2_corecrt_math@h DB 01H
__2E93F1C0_math@h DB 01H
__7570C268_vectors@h DB 01H
__12FEDF4E_sdkddkver@h DB 01H
__9BAEE128_excpt@h DB 01H
__B7B53233_stdarg@h DB 01H
__6B04FCB3_specstrings_undef@h DB 01H
__F4027AF7_specstrings_strict@h DB 01H
__B90340D4_sdv_driverspecs@h DB 01H
__BFFF5AD3_driverspecs@h DB 01H
__32847078_specstrings@h DB 01H
__108B2620_corecrt_wctype@h DB 01H
__6CD6613D_ctype@h DB 01H
__30902A1F_kernelspecs@h DB 01H
__376FD5CA_basetsd@h DB 01H
__13DE2371_errno@h DB 01H
__8C6AE390_vcruntime_string@h DB 01H
__8ACB2152_corecrt_memcpy_s@h DB 01H
__EA6C9D17_corecrt_memory@h DB 01H
__0DF2AF52_corecrt_wstring@h DB 01H
__6E889ECC_string@h DB 01H
__9BEDF4DE_guiddef@h DB 01H
__51BFD2FE_pshpack4@h DB 01H
__31652CEA_poppack@h DB 01H
__5532AE4C_pshpack2@h DB 01H
__58A52B9A_pshpack8@h DB 01H
__57741015_pshpack1@h DB 01H
__CDE68C90_apiset@h DB 01H
__0BF06E8D_ktmtypes@h DB 01H
__40C200C0_winnt@h DB 01H
__9336F789_minwindef@h DB 01H
__55136115_windef@h DB 01H
__32205BF0_apisetcconv@h DB 01H
__B48FDEA0_minwinbase@h DB 01H
__3551B028_apiquery2@h DB 01H
__65BE04AA_processenv@h DB 01H
__4767CA46_fileapi@h DB 01H
__282E6C4B_fileapifromapp@h DB 01H
__393AF12C_debugapi@h DB 01H
__EBC502B8_utilapiset@h DB 01H
__1EAD8C69_handleapi@h DB 01H
__D8EF9B29_errhandlingapi@h DB 01H
__97FC1204_fibersapi@h DB 01H
__27448220_namedpipeapi@h DB 01H
__6EA33B2A_profileapi@h DB 01H
__EAC6F673_heapapi@h DB 01H
__D64EEA5A_ioapiset@h DB 01H
__144BD4B6_synchapi@h DB 01H
__03B1C640_interlockedapi@h DB 01H
__DC64CB38_processthreadsapi@h DB 01H
__D719B518_sysinfoapi@h DB 01H
__410385B1_memoryapi@h DB 01H
__C1AD45EF_enclaveapi@h DB 01H
__F4C3AA32_threadpoollegacyapiset@h DB 01H
__AC5A7A9F_threadpoolapiset@h DB 01H
__F5254B21_jobapi@h DB 01H
__BCEA6EE8_jobapi2@h DB 01H
__D18ACE72_wow64apiset@h DB 01H
__669B0D4A_libloaderapi@h DB 01H
__645F7034_securitybaseapi@h DB 01H
__67E58557_namespaceapi@h DB 01H
__599D9D3A_systemtopologyapi@h DB 01H
__2337E373_processtopologyapi@h DB 01H
__02BFF239_securityappcontainer@h DB 01H
__9C196272_realtimeapiset@h DB 01H
__5AB313A4_winerror@h DB 01H
__B7E7187B_timezoneapi@h DB 01H
__6DE9EB6F_winbase@h DB 01H
__56B2AFF2_wingdi@h DB 01H
__BA1161A9_tvout@h DB 01H
__0501A018_winuser@h DB 01H
__EF12FA99_datetimeapi@h DB 01H
__8FA7C3CA_winnls@h DB 01H
__390F0C47_stringapiset@h DB 01H
__28605B0A_wincontypes@h DB 01H
__BFBDE86D_consoleapi@h DB 01H
__C3CAFBF0_consoleapi2@h DB 01H
__C20891C7_consoleapi3@h DB 01H
__717C98B6_wincon@h DB 01H
__2884C177_verrsrc@h DB 01H
__A3FD3A34_winver@h DB 01H
__6F8AD9F1_reason@h DB 01H
__4C90FD6F_winreg@h DB 01H
__68AFEBAD_wnnc@h DB 01H
__5A7AB086_winnetwk@h DB 01H
__859C3CD3_cderr@h DB 01H
__81B12F1A_dde@h DB 01H
__DD3AF97A_ddeml@h DB 01H
__E6B47715_dlgs@h DB 01H
__944BD57D_lzexpand@h DB 01H
__E4B2DFC7_mmsyscom@h DB 01H
__5287D88F_mciapi@h DB 01H
__DBDC1384_mmiscapi@h DB 01H
__1A78C0D7_mmiscapi2@h DB 01H
__0D05975C_playsoundapi@h DB 01H
__757A63A9_mmeapi@h DB 01H
__6326AB05_timeapi@h DB 01H
__77D483B2_joystickapi@h DB 01H
__59CF7431_mmsystem@h DB 01H
__CEAC417E_nb30@h DB 01H
__3BA1A118_rpcdcep@h DB 01H
__74064437_rpcdce@h DB 01H
__90546602_rpcnsi@h DB 01H
__83114A2C_rpcnterr@h DB 01H
__CA67519E_rpcasync@h DB 01H
__D8CEBCD8_rpc@h DB 01H
__9F43AC2D_shellapi@h DB 01H
__6C8D3703_winperf@h DB 01H
__AB40A29E_inaddr@h DB 01H
__40D4FEA5_winsock@h DB 01H
__51394074_bcrypt@h DB 01H
__F177C154_ncrypt@h DB 01H
__1445529E_dpapi@h DB 01H
__5743FB20_wincrypt@h DB 01H
__97CA12BF_winefs@h DB 01H
__6DF63719_rpcnsip@h DB 01H
__031EFCA1_rpcsal@h DB 01H
__BA08D1DA_rpcndr@h DB 01H
__3A941F83_wtypesbase@h DB 01H
__C244FEE1_wtypes@h DB 01H
__FB7C5F97_winioctl@h DB 01H
__4B65E4AC_winsmcrd@h DB 01H
__1EA80168_winscard@h DB 01H
__516FC0F9_prsht@h DB 01H
__88BA11C6_winspool@h DB 01H
__211DB995_corecrt_malloc@h DB 01H
__99AED4FB_corecrt_search@h DB 01H
__8B813BF6_corecrt_wstdlib@h DB 01H
__3D1CA2C3_limits@h DB 01H
__E8FB0A68_stdlib@h DB 01H
__18DB4C56_unknwnbase@h DB 01H
__1AE6FA1A_objidlbase@h DB 01H
__7F98E437_cguid@h DB 01H
__6B2DFB49_combaseapi@h DB 01H
__CB0E8B37_unknwn@h DB 01H
__D981EF0A_objidl@h DB 01H
__37089EB8_oaidl@h DB 01H
__CA2DDD8B_propidlbase@h DB 01H
__39ED323E_coml2api@h DB 01H
__78E82682_oleidl@h DB 01H
__97883CFE_servprov@h DB 01H
__CE01DDB9_msxml@h DB 01H
__A4784895_urlmon@h DB 01H
__325F1C97_propidl@h DB 01H
__D3D43343_objbase@h DB 01H
__B3A2AF1B_oleauto@h DB 01H
__5722A8AA_ole2@h DB 01H
__590A450A_commdlg@h DB 01H
__2FE8A10C_stralign@h DB 01H
__34558472_winsvc@h DB 01H
__058845F1_mcx@h DB 01H
__7F16006B_ime_cmodes@h DB 01H
__0A3AF599_imm@h DB 01H
__11B87C25_Windows@h DB 01H
__60B45B40_corecrt_stdio_config@h DB 01H
__CFA3741E_corecrt_wstdio@h DB 01H
__B3FE3303_stdio@h DB 01H
__DD0D2CA2_main@h DB 01H
__9378A798_Debug@h DB 01H
__29DBA756_animations@h DB 01H
__A6D01AF2_Physics@h DB 01H
__1408441D_Mesh@h DB 01H
__7CA6EAD6_EntityManager@h DB 01H
__60BF1C41_scene 1@h DB 01H
__9E5BC8DA_corecrt_wtime@h DB 01H
__1FF36214_time@h DB 01H
__7AF83F4E_entityAdder@h DB 01H
__03D9FA9C_player@h DB 01H
__7BF3DF52_math@h DB 01H
__94624A77_Dictionary@h DB 01H
__F76DC5C9_scene 1@c DB 01H
healthBarYOffset DD 03e6b851fr			; 0.23
attkDst	DD	03dbe76c9r			; 0.093
	ORG $+4
$S1	DD	00H
	DD	01H
walkDst	DD	03e4ccccdr			; 0.2
	ORG $+4
$S2	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	ORG $+4
maxNugRand DQ	0000000100000000H
noOfTerrains DD	01aH
	ORG $+4
origEnemyScale DD 0bf38f5c3r			; -0.7225
	DD	03f07562ar			; 0.528659
PUBLIC	BoolToSign
PUBLIC	DefaultAnimTexCoordPts2
PUBLIC	DefaultAnimTexCoordPts
PUBLIC	RandFloat
PUBLIC	RandInt
PUBLIC	TerrainInit
PUBLIC	SceneUpdate
PUBLIC	SceneInit
;	COMDAT pdata
pdata	SEGMENT
$pdata$BoolToSign DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$BoolToSign
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DefaultAnimTexCoordPts2 DD imagerel $LN6
	DD	imagerel $LN6+327
	DD	imagerel $unwind$DefaultAnimTexCoordPts2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DefaultAnimTexCoordPts DD imagerel $LN6
	DD	imagerel $LN6+352
	DD	imagerel $unwind$DefaultAnimTexCoordPts
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$RandFloat DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$RandFloat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$RandInt DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$RandInt
pdata	ENDS
pdata	SEGMENT
$pdata$TerrainInit DD imagerel $LN6
	DD	imagerel $LN6+1036
	DD	imagerel $unwind$TerrainInit
$pdata$SceneUpdate DD imagerel $LN77
	DD	imagerel $LN77+2968
	DD	imagerel $unwind$SceneUpdate
$pdata$SceneInit DD imagerel $LN68
	DD	imagerel $LN68+5010
	DD	imagerel $unwind$SceneInit
xdata	SEGMENT
$unwind$TerrainInit DD 032c19H
	DD	01c0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$SceneUpdate DD 031a01H
	DD	0540109H
	DD	07002H
$unwind$SceneInit DD 042d19H
	DD	05f010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	02e0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RandInt DD 020d01H
	DD	07009520dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RandFloat DD 021101H
	DD	0700d7211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DefaultAnimTexCoordPts DD 021c01H
	DD	07018721cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DefaultAnimTexCoordPts2 DD 021c01H
	DD	07018721cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BoolToSign DD 020901H
	DD	070055209H
enemySpeed DD	03d23d70ar			; 0.04
enemyAccel DD	03e99999ar			; 0.3
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:SceneInit
	DD	025H
	DD	01378H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:TerrainInit
	DD	024H
	DD	03f3H
TerrainInit$rtcName$0 DB 073H
	DB	063H
	DB	061H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+2
TerrainInit$rtcName$1 DB 070H
	DB	06fH
	DB	073H
	DB	00H
TerrainInit$rtcName$2 DB 070H
	DB	06fH
	DB	069H
	DB	06eH
	DB	074H
	DB	073H
	DB	00H
	ORG $+13
TerrainInit$rtcVarDesc DD 088H
	DD	010H
	DQ	FLAT:TerrainInit$rtcName$2
	DD	068H
	DD	08H
	DQ	FLAT:TerrainInit$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:TerrainInit$rtcName$0
	ORG $+144
TerrainInit$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:TerrainInit$rtcVarDesc
SceneUpdate$rtcName$0 DB 06cH
	DB	068H
	DB	073H
	DB	00H
SceneUpdate$rtcName$1 DB 072H
	DB	068H
	DB	073H
	DB	00H
SceneUpdate$rtcName$2 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
SceneUpdate$rtcName$3 DB 061H
	DB	00H
	ORG $+2
SceneUpdate$rtcName$4 DB 062H
	DB	00H
	ORG $+2
SceneUpdate$rtcName$5 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
SceneUpdate$rtcName$6 DB 076H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+1
SceneUpdate$rtcName$7 DB 06cH
	DB	068H
	DB	073H
	DB	00H
SceneUpdate$rtcName$8 DB 072H
	DB	068H
	DB	073H
	DB	00H
SceneUpdate$rtcName$9 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
SceneUpdate$rtcName$10 DB 06cH
	DB	068H
	DB	073H
	DB	00H
SceneUpdate$rtcName$11 DB 072H
	DB	068H
	DB	073H
	DB	00H
SceneUpdate$rtcName$12 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
SceneUpdate$rtcName$13 DB 076H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+1
SceneUpdate$rtcName$14 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+10
SceneUpdate$rtcVarDesc DD 0248H
	DD	08H
	DQ	FLAT:SceneUpdate$rtcName$14
	DD	0228H
	DD	08H
	DQ	FLAT:SceneUpdate$rtcName$13
	DD	0208H
	DD	08H
	DQ	FLAT:SceneUpdate$rtcName$12
	DD	01e8H
	DD	08H
	DQ	FLAT:SceneUpdate$rtcName$11
	DD	01c8H
	DD	08H
	DQ	FLAT:SceneUpdate$rtcName$10
	DD	01a8H
	DD	08H
	DQ	FLAT:SceneUpdate$rtcName$9
	DD	0188H
	DD	08H
	DQ	FLAT:SceneUpdate$rtcName$8
	DD	0168H
	DD	08H
	DQ	FLAT:SceneUpdate$rtcName$7
	DD	0148H
	DD	08H
	DQ	FLAT:SceneUpdate$rtcName$6
	DD	0128H
	DD	08H
	DQ	FLAT:SceneUpdate$rtcName$5
	DD	0108H
	DD	08H
	DQ	FLAT:SceneUpdate$rtcName$4
	DD	0e8H
	DD	08H
	DQ	FLAT:SceneUpdate$rtcName$3
	DD	0c8H
	DD	08H
	DQ	FLAT:SceneUpdate$rtcName$2
	DD	0a8H
	DD	08H
	DQ	FLAT:SceneUpdate$rtcName$1
	DD	088H
	DD	08H
	DQ	FLAT:SceneUpdate$rtcName$0
	ORG $+720
SceneUpdate$rtcFrameData DD 0fH
	DD	00H
	DQ	FLAT:SceneUpdate$rtcVarDesc
SceneInit$rtcName$0 DB 062H
	DB	06cH
	DB	075H
	DB	065H
	DB	043H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	00H
	ORG $+6
SceneInit$rtcName$1 DB 06eH
	DB	06fH
	DB	04fH
	DB	066H
	DB	046H
	DB	072H
	DB	061H
	DB	06dH
	DB	065H
	DB	073H
	DB	00H
	ORG $+1
SceneInit$rtcName$2 DB 070H
	DB	06fH
	DB	073H
	DB	00H
SceneInit$rtcName$3 DB 073H
	DB	063H
	DB	061H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+2
SceneInit$rtcName$4 DB 063H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	073H
	DB	00H
	ORG $+1
SceneInit$rtcName$5 DB 076H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+1
SceneInit$rtcName$6 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
SceneInit$rtcName$7 DB 076H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+1
SceneInit$rtcName$8 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
SceneInit$rtcVarDesc DD 0228H
	DD	08H
	DQ	FLAT:SceneInit$rtcName$8
	DD	0208H
	DD	08H
	DQ	FLAT:SceneInit$rtcName$7
	DD	01e8H
	DD	08H
	DQ	FLAT:SceneInit$rtcName$6
	DD	01c8H
	DD	08H
	DQ	FLAT:SceneInit$rtcName$5
	DD	0168H
	DD	020H
	DQ	FLAT:SceneInit$rtcName$4
	DD	0128H
	DD	08H
	DQ	FLAT:SceneInit$rtcName$3
	DD	0108H
	DD	08H
	DQ	FLAT:SceneInit$rtcName$2
	DD	088H
	DD	012H
	DQ	FLAT:SceneInit$rtcName$1
	DD	048H
	DD	010H
	DQ	FLAT:SceneInit$rtcName$0
	ORG $+432
SceneInit$rtcFrameData DD 09H
	DD	00H
	DQ	FLAT:SceneInit$rtcVarDesc
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c
_TEXT	SEGMENT
blueColor$ = 72
i$ = 100
j$12 = 104
i$13 = 108
wrapper$ = 112
noOfFrames$ = 136
animPts$ = 168
curNoFrames$ = 176
i$14 = 180
j$15 = 184
w$ = 188
h$ = 192
animScales$ = 200
iIsPunchTakeOne$ = 208
i$16 = 212
curEntity$ = 216
data$ = 224
curAnimator$ = 232
numberOfAnimations$ = 240
pos$ = 264
scale$ = 296
i$17 = 308
j$18 = 312
i$19 = 316
i$20 = 320
mesh$21 = 328
positions$ = 336
colors$ = 360
j$ = 404
$T22 = 416
$T23 = 420
$T24 = 424
$T25 = 432
$T26 = 440
vector$ = 456
_this$27 = 488
vector$ = 520
_this$28 = 552
tv703 = 568
tv705 = 576
tv131 = 584
tv157 = 592
tv239 = 600
tv270 = 608
tv281 = 612
tv292 = 616
tv310 = 620
tv312 = 624
tv323 = 632
tv335 = 640
tv775 = 648
tv358 = 656
tv352 = 664
tv364 = 672
tv373 = 680
tv399 = 688
tv346 = 696
tv477 = 704
tv540 = 712
tv547 = 720
tv777 = 728
__$ArrayPad$ = 736
SceneInit PROC

; 77   : void SceneInit() {

$LN68:
  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 81 ec f8 02
	00 00		 sub	 rsp, 760		; 000002f8H
  0000a	48 8d 7c 24 40	 lea	 rdi, QWORD PTR [rsp+64]
  0000f	b9 ae 00 00 00	 mov	 ecx, 174		; 000000aeH
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 e0
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 78   : 	float blueColor[4] = { .0f, .2f, .7f, 1.f };

  00039	0f 57 c0	 xorps	 xmm0, xmm0
  0003c	f3 0f 11 44 24
	48		 movss	 DWORD PTR blueColor$[rsp], xmm0
  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0004a	f3 0f 11 44 24
	4c		 movss	 DWORD PTR blueColor$[rsp+4], xmm0
  00050	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00058	f3 0f 11 44 24
	50		 movss	 DWORD PTR blueColor$[rsp+8], xmm0
  0005e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00066	f3 0f 11 44 24
	54		 movss	 DWORD PTR blueColor$[rsp+12], xmm0

; 79   : 	int i;
; 80   : 	for (i = 0; i < lengthOf(blue); i++) {

  0006c	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00074	eb 0a		 jmp	 SHORT $LN4@SceneInit
$LN2@SceneInit:
  00076	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  0007a	ff c0		 inc	 eax
  0007c	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN4@SceneInit:
  00080	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  00085	48 83 f8 04	 cmp	 rax, 4
  00089	73 63		 jae	 SHORT $LN3@SceneInit

; 81   : 		blue[i] = malloc(sizeof(float) * 4);

  0008b	b9 10 00 00 00	 mov	 ecx, 16
  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00096	48 63 4c 24 64	 movsxd	 rcx, DWORD PTR i$[rsp]
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:blue
  000a2	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax

; 82   : 		for (byte j = 0; j < lengthOf(blueColor); j++) blue[i][j] = blueColor[j];

  000a6	c6 44 24 68 00	 mov	 BYTE PTR j$12[rsp], 0
  000ab	eb 0b		 jmp	 SHORT $LN7@SceneInit
$LN5@SceneInit:
  000ad	0f b6 44 24 68	 movzx	 eax, BYTE PTR j$12[rsp]
  000b2	fe c0		 inc	 al
  000b4	88 44 24 68	 mov	 BYTE PTR j$12[rsp], al
$LN7@SceneInit:
  000b8	0f b6 44 24 68	 movzx	 eax, BYTE PTR j$12[rsp]
  000bd	48 83 f8 04	 cmp	 rax, 4
  000c1	73 29		 jae	 SHORT $LN6@SceneInit
  000c3	0f b6 44 24 68	 movzx	 eax, BYTE PTR j$12[rsp]
  000c8	48 63 4c 24 64	 movsxd	 rcx, DWORD PTR i$[rsp]
  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:blue
  000d4	44 0f b6 44 24
	68		 movzx	 r8d, BYTE PTR j$12[rsp]
  000da	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  000de	f3 0f 10 44 84
	48		 movss	 xmm0, DWORD PTR blueColor$[rsp+rax*4]
  000e4	f3 42 0f 11 04
	81		 movss	 DWORD PTR [rcx+r8*4], xmm0
  000ea	eb c1		 jmp	 SHORT $LN5@SceneInit
$LN6@SceneInit:

; 83   : 	}

  000ec	eb 88		 jmp	 SHORT $LN2@SceneInit
$LN3@SceneInit:
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h

; 380  : 	return (int)(min + (max - min) * ((double)rand() / (double)RAND_MAX));

  000ee	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  000f6	f2 0f 11 84 24
	38 02 00 00	 movsd	 QWORD PTR tv703[rsp], xmm0
  000ff	b8 0a 00 00 00	 mov	 eax, 10
  00104	ff c8		 dec	 eax
  00106	f2 0f 2a c8	 cvtsi2sd xmm1, eax
  0010a	f2 0f 11 8c 24
	40 02 00 00	 movsd	 QWORD PTR tv705[rsp], xmm1
  00113	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  00119	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  0011d	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  00125	f2 0f 10 8c 24
	40 02 00 00	 movsd	 xmm1, QWORD PTR tv705[rsp]
  0012e	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00132	0f 28 c1	 movaps	 xmm0, xmm1
  00135	f2 0f 10 8c 24
	38 02 00 00	 movsd	 xmm1, QWORD PTR tv703[rsp]
  0013e	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00142	0f 28 c1	 movaps	 xmm0, xmm1
  00145	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00149	89 84 24 a0 01
	00 00		 mov	 DWORD PTR $T22[rsp], eax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c

; 85   : 	noOfEnemies = RandInt(1, MAX_ENEMY_COUNT);

  00150	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR $T22[rsp]
  00157	89 05 00 00 00
	00		 mov	 DWORD PTR noOfEnemies, eax

; 86   : 	AllocPtrPtr(&opAttkEnts, noOfEnemies);

  0015d	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfEnemies
  00163	8b d0		 mov	 edx, eax
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:opAttkEnts
  0016c	e8 00 00 00 00	 call	 AllocPtrPtr

; 87   : 	AllocPtrPtr(&opAttkNodes, noOfEnemies);

  00171	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfEnemies
  00177	8b d0		 mov	 edx, eax
  00179	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:opAttkNodes
  00180	e8 00 00 00 00	 call	 AllocPtrPtr

; 88   : 	enemyAttkColPts = malloc(sizeof(Vector2[2]) * noOfEnemies);

  00185	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfEnemies
  0018b	48 89 84 24 48
	02 00 00	 mov	 QWORD PTR tv131[rsp], rax
  00193	b8 10 00 00 00	 mov	 eax, 16
  00198	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR tv131[rsp]
  001a0	48 f7 e1	 mul	 rcx
  001a3	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  001aa	48 0f 42 c1	 cmovb	 rax, rcx
  001ae	48 8b c8	 mov	 rcx, rax
  001b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  001b7	48 89 05 00 00
	00 00		 mov	 QWORD PTR enemyAttkColPts, rax

; 89   : 	agro = calloc(noOfEnemies, sizeof(float));

  001be	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfEnemies
  001c4	ba 04 00 00 00	 mov	 edx, 4
  001c9	8b c8		 mov	 ecx, eax
  001cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  001d1	48 89 05 00 00
	00 00		 mov	 QWORD PTR agro, rax

; 90   : 	uintMap = calloc(noOfEnemies, sizeof(uintList*));

  001d8	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfEnemies
  001de	ba 08 00 00 00	 mov	 edx, 8
  001e3	8b c8		 mov	 ecx, eax
  001e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  001eb	48 89 05 00 00
	00 00		 mov	 QWORD PTR uintMap, rax

; 91   : 	enemyDamage = malloc(sizeof(float) * noOfEnemies);

  001f2	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfEnemies
  001f8	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR tv157[rsp], rax
  00200	b8 04 00 00 00	 mov	 eax, 4
  00205	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR tv157[rsp]
  0020d	48 f7 e1	 mul	 rcx
  00210	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00217	48 0f 42 c1	 cmovb	 rax, rcx
  0021b	48 8b c8	 mov	 rcx, rax
  0021e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00224	48 89 05 00 00
	00 00		 mov	 QWORD PTR enemyDamage, rax

; 92   : 	for (uint i = 0; i < noOfEnemies; i++) enemyDamage[i] = .1f;

  0022b	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR i$13[rsp], 0
  00233	eb 0a		 jmp	 SHORT $LN10@SceneInit
$LN8@SceneInit:
  00235	8b 44 24 6c	 mov	 eax, DWORD PTR i$13[rsp]
  00239	ff c0		 inc	 eax
  0023b	89 44 24 6c	 mov	 DWORD PTR i$13[rsp], eax
$LN10@SceneInit:
  0023f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfEnemies
  00245	39 44 24 6c	 cmp	 DWORD PTR i$13[rsp], eax
  00249	73 1a		 jae	 SHORT $LN9@SceneInit
  0024b	8b 44 24 6c	 mov	 eax, DWORD PTR i$13[rsp]
  0024f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyDamage
  00256	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0025e	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0
  00263	eb d0		 jmp	 SHORT $LN8@SceneInit
$LN9@SceneInit:

; 93   : 	setMeshDissolve = calloc(noOfEnemies, sizeof(bool));

  00265	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfEnemies
  0026b	ba 01 00 00 00	 mov	 edx, 1
  00270	8b c8		 mov	 ecx, eax
  00272	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  00278	48 89 05 00 00
	00 00		 mov	 QWORD PTR setMeshDissolve, rax

; 94   : 	monkTakenDmg = malloc(sizeof(bool) * noOfEnemies);

  0027f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfEnemies
  00285	8b c8		 mov	 ecx, eax
  00287	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0028d	48 89 05 00 00
	00 00		 mov	 QWORD PTR monkTakenDmg, rax

; 95   : 	printf("there are %u enemies\n", noOfEnemies);

  00294	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR noOfEnemies
  0029a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@MLFGPCLE@there?5are?5?$CFu?5enemies?6@
  002a1	e8 00 00 00 00	 call	 printf

; 96   : 	char *wrapper = "monk/sprites";

  002a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0N@CHFDBEHE@monk?1sprites@
  002ad	48 89 44 24 70	 mov	 QWORD PTR wrapper$[rsp], rax

; 97   : 	//(in each animation)
; 98   : 	ushort noOfFrames[] = {

  002b2	b8 04 00 00 00	 mov	 eax, 4
  002b7	66 89 84 24 88
	00 00 00	 mov	 WORD PTR noOfFrames$[rsp], ax
  002bf	b8 02 00 00 00	 mov	 eax, 2
  002c4	66 89 84 24 8a
	00 00 00	 mov	 WORD PTR noOfFrames$[rsp+2], ax
  002cc	b8 02 00 00 00	 mov	 eax, 2
  002d1	66 89 84 24 8c
	00 00 00	 mov	 WORD PTR noOfFrames$[rsp+4], ax
  002d9	b8 02 00 00 00	 mov	 eax, 2
  002de	66 89 84 24 8e
	00 00 00	 mov	 WORD PTR noOfFrames$[rsp+6], ax
  002e6	b8 05 00 00 00	 mov	 eax, 5
  002eb	66 89 84 24 90
	00 00 00	 mov	 WORD PTR noOfFrames$[rsp+8], ax
  002f3	b8 07 00 00 00	 mov	 eax, 7
  002f8	66 89 84 24 92
	00 00 00	 mov	 WORD PTR noOfFrames$[rsp+10], ax
  00300	b8 02 00 00 00	 mov	 eax, 2
  00305	66 89 84 24 94
	00 00 00	 mov	 WORD PTR noOfFrames$[rsp+12], ax
  0030d	b8 06 00 00 00	 mov	 eax, 6
  00312	66 89 84 24 96
	00 00 00	 mov	 WORD PTR noOfFrames$[rsp+14], ax
  0031a	b8 06 00 00 00	 mov	 eax, 6
  0031f	66 89 84 24 98
	00 00 00	 mov	 WORD PTR noOfFrames$[rsp+16], ax

; 99   : 		4,
; 100  : 		2,
; 101  : 		2,
; 102  : 		2,
; 103  : 		5,
; 104  : 		7,
; 105  : 		2,
; 106  : 		6,
; 107  : 		6,
; 108  : 	};
; 109  : 	//the reason this is so disgustingly layered is because the most outer is the pointer to the heap alloc'ed vec***'s (so that a reference isn't stored in this script, it obviously only needs to be stored in the animator, the more inner pointer is then for every animation, then every animation frame, and then obviously every texture coordinate contains two vectors.
; 110  : 	Vector2**** animPts = malloc(sizeof(Vector2***));

  00327	b9 08 00 00 00	 mov	 ecx, 8
  0032c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00332	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR animPts$[rsp], rax

; 111  : 	*animPts = malloc(sizeof(Vector2**) * ENEMY_NUM_ANIMS);

  0033a	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  0033f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00345	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR animPts$[rsp]
  0034d	48 89 01	 mov	 QWORD PTR [rcx], rax

; 112  : 	ushort curNoFrames;
; 113  : 	for (uint i = 0; i < ENEMY_NUM_ANIMS; i++) {

  00350	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$14[rsp], 0
  0035b	eb 10		 jmp	 SHORT $LN13@SceneInit
$LN11@SceneInit:
  0035d	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR i$14[rsp]
  00364	ff c0		 inc	 eax
  00366	89 84 24 b4 00
	00 00		 mov	 DWORD PTR i$14[rsp], eax
$LN13@SceneInit:
  0036d	83 bc 24 b4 00
	00 00 09	 cmp	 DWORD PTR i$14[rsp], 9
  00375	0f 83 c3 00 00
	00		 jae	 $LN12@SceneInit

; 114  : 		curNoFrames = noOfFrames[i];

  0037b	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR i$14[rsp]
  00382	0f b7 84 44 88
	00 00 00	 movzx	 eax, WORD PTR noOfFrames$[rsp+rax*2]
  0038a	66 89 84 24 b0
	00 00 00	 mov	 WORD PTR curNoFrames$[rsp], ax

; 115  : 		(*animPts)[i] = malloc(sizeof(Vector2*) * curNoFrames);

  00392	0f b7 84 24 b0
	00 00 00	 movzx	 eax, WORD PTR curNoFrames$[rsp]
  0039a	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR tv239[rsp], rax
  003a2	b8 08 00 00 00	 mov	 eax, 8
  003a7	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR tv239[rsp]
  003af	48 f7 e1	 mul	 rcx
  003b2	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  003b9	48 0f 42 c1	 cmovb	 rax, rcx
  003bd	48 8b c8	 mov	 rcx, rax
  003c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  003c6	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR i$14[rsp]
  003cd	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR animPts$[rsp]
  003d5	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  003d8	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax

; 116  : 		for (uint j = 0; j < curNoFrames; j++) {

  003dc	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR j$15[rsp], 0
  003e7	eb 10		 jmp	 SHORT $LN16@SceneInit
$LN14@SceneInit:
  003e9	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR j$15[rsp]
  003f0	ff c0		 inc	 eax
  003f2	89 84 24 b8 00
	00 00		 mov	 DWORD PTR j$15[rsp], eax
$LN16@SceneInit:
  003f9	0f b7 84 24 b0
	00 00 00	 movzx	 eax, WORD PTR curNoFrames$[rsp]
  00401	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR j$15[rsp], eax
  00408	73 2f		 jae	 SHORT $LN15@SceneInit

; 117  : 			(*animPts)[i][j] = malloc(sizeof(Vector2) * 2);

  0040a	b9 10 00 00 00	 mov	 ecx, 16
  0040f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00415	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR i$14[rsp]
  0041c	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR animPts$[rsp]
  00424	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00427	44 8b 84 24 b8
	00 00 00	 mov	 r8d, DWORD PTR j$15[rsp]
  0042f	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00433	4a 89 04 c1	 mov	 QWORD PTR [rcx+r8*8], rax

; 118  : 		}

  00437	eb b0		 jmp	 SHORT $LN14@SceneInit
$LN15@SceneInit:

; 119  : 	}

  00439	e9 1f ff ff ff	 jmp	 $LN11@SceneInit
$LN12@SceneInit:

; 120  : 	float w = 1106.f, h = 180.f;

  0043e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@448a4000
  00446	f3 0f 11 84 24
	bc 00 00 00	 movss	 DWORD PTR w$[rsp], xmm0
  0044f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43340000
  00457	f3 0f 11 84 24
	c0 00 00 00	 movss	 DWORD PTR h$[rsp], xmm0

; 121  : 	DefaultAnimTexCoordPts(*animPts, .0f / w, 492.f / w, .0f / h, 51.f / h, walk, noOfFrames);

  00460	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@424c0000
  00468	f3 0f 5e 84 24
	c0 00 00 00	 divss	 xmm0, DWORD PTR h$[rsp]
  00471	0f 57 c9	 xorps	 xmm1, xmm1
  00474	f3 0f 5e 8c 24
	c0 00 00 00	 divss	 xmm1, DWORD PTR h$[rsp]
  0047d	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43f60000
  00485	f3 0f 5e 94 24
	bc 00 00 00	 divss	 xmm2, DWORD PTR w$[rsp]
  0048e	0f 57 db	 xorps	 xmm3, xmm3
  00491	f3 0f 5e 9c 24
	bc 00 00 00	 divss	 xmm3, DWORD PTR w$[rsp]
  0049a	f3 0f 11 9c 24
	60 02 00 00	 movss	 DWORD PTR tv270[rsp], xmm3
  004a3	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR noOfFrames$[rsp]
  004ab	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  004b0	c7 44 24 28 08
	00 00 00	 mov	 DWORD PTR [rsp+40], 8
  004b8	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  004be	0f 28 d9	 movaps	 xmm3, xmm1
  004c1	f3 0f 10 84 24
	60 02 00 00	 movss	 xmm0, DWORD PTR tv270[rsp]
  004ca	0f 28 c8	 movaps	 xmm1, xmm0
  004cd	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR animPts$[rsp]
  004d5	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  004d8	e8 00 00 00 00	 call	 DefaultAnimTexCoordPts

; 122  : 	DefaultAnimTexCoordPts(*animPts, 492.f / w, 820.f / w, .0f / h, 51.f / h, idle, noOfFrames);

  004dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@424c0000
  004e5	f3 0f 5e 84 24
	c0 00 00 00	 divss	 xmm0, DWORD PTR h$[rsp]
  004ee	0f 57 c9	 xorps	 xmm1, xmm1
  004f1	f3 0f 5e 8c 24
	c0 00 00 00	 divss	 xmm1, DWORD PTR h$[rsp]
  004fa	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@444d0000
  00502	f3 0f 5e 94 24
	bc 00 00 00	 divss	 xmm2, DWORD PTR w$[rsp]
  0050b	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@43f60000
  00513	f3 0f 5e 9c 24
	bc 00 00 00	 divss	 xmm3, DWORD PTR w$[rsp]
  0051c	f3 0f 11 9c 24
	64 02 00 00	 movss	 DWORD PTR tv281[rsp], xmm3
  00525	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR noOfFrames$[rsp]
  0052d	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00532	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0053a	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00540	0f 28 d9	 movaps	 xmm3, xmm1
  00543	f3 0f 10 84 24
	64 02 00 00	 movss	 xmm0, DWORD PTR tv281[rsp]
  0054c	0f 28 c8	 movaps	 xmm1, xmm0
  0054f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR animPts$[rsp]
  00557	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0055a	e8 00 00 00 00	 call	 DefaultAnimTexCoordPts

; 123  : 	//63
; 124  : 	DefaultAnimTexCoordPts2(*animPts, 644.f / w, 1004.f / w, 61.f / h, 103.f / h, punch, noOfFrames, 63.f / w);

  0055f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@427c0000
  00567	f3 0f 5e 84 24
	bc 00 00 00	 divss	 xmm0, DWORD PTR w$[rsp]
  00570	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42ce0000
  00578	f3 0f 5e 8c 24
	c0 00 00 00	 divss	 xmm1, DWORD PTR h$[rsp]
  00581	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42740000
  00589	f3 0f 5e 94 24
	c0 00 00 00	 divss	 xmm2, DWORD PTR h$[rsp]
  00592	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@447b0000
  0059a	f3 0f 5e 9c 24
	bc 00 00 00	 divss	 xmm3, DWORD PTR w$[rsp]
  005a3	f3 0f 11 9c 24
	68 02 00 00	 movss	 DWORD PTR tv292[rsp], xmm3
  005ac	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@44210000
  005b4	f3 0f 5e a4 24
	bc 00 00 00	 divss	 xmm4, DWORD PTR w$[rsp]
  005bd	f3 0f 11 44 24
	38		 movss	 DWORD PTR [rsp+56], xmm0
  005c3	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR noOfFrames$[rsp]
  005cb	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  005d0	c7 44 24 28 07
	00 00 00	 mov	 DWORD PTR [rsp+40], 7
  005d8	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [rsp+32], xmm1
  005de	0f 28 da	 movaps	 xmm3, xmm2
  005e1	f3 0f 10 84 24
	68 02 00 00	 movss	 xmm0, DWORD PTR tv292[rsp]
  005ea	0f 28 d0	 movaps	 xmm2, xmm0
  005ed	0f 28 cc	 movaps	 xmm1, xmm4
  005f0	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR animPts$[rsp]
  005f8	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  005fb	e8 00 00 00 00	 call	 DefaultAnimTexCoordPts2

; 125  : 	Vector2* animScales = malloc(sizeof(Vector2) * EnemyAnimStateLength);

  00600	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00605	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0060b	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR animScales$[rsp], rax

; 126  : 	bool iIsPunchTakeOne;
; 127  : 	for (uint i = 0; i < EnemyAnimStateLength; i += (iIsPunchTakeOne + 1)) {

  00613	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$16[rsp], 0
  0061e	eb 1a		 jmp	 SHORT $LN19@SceneInit
$LN17@SceneInit:
  00620	0f b6 84 24 d0
	00 00 00	 movzx	 eax, BYTE PTR iIsPunchTakeOne$[rsp]
  00628	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR i$16[rsp]
  0062f	8d 44 01 01	 lea	 eax, DWORD PTR [rcx+rax+1]
  00633	89 84 24 d4 00
	00 00		 mov	 DWORD PTR i$16[rsp], eax
$LN19@SceneInit:
  0063a	83 bc 24 d4 00
	00 00 09	 cmp	 DWORD PTR i$16[rsp], 9
  00642	73 72		 jae	 SHORT $LN18@SceneInit

; 128  : 		animScales[i] = oneVector;

  00644	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR i$16[rsp]
  0064b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR animScales$[rsp]
  00653	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR oneVector
  0065a	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx

; 129  : 		iIsPunchTakeOne = i == punch - 1;

  0065e	83 bc 24 d4 00
	00 00 06	 cmp	 DWORD PTR i$16[rsp], 6
  00666	75 0d		 jne	 SHORT $LN39@SceneInit
  00668	c7 84 24 6c 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv310[rsp], 1
  00673	eb 0b		 jmp	 SHORT $LN40@SceneInit
$LN39@SceneInit:
  00675	c7 84 24 6c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv310[rsp], 0
$LN40@SceneInit:
  00680	83 bc 24 6c 02
	00 00 00	 cmp	 DWORD PTR tv310[rsp], 0
  00688	75 0d		 jne	 SHORT $LN41@SceneInit
  0068a	c7 84 24 70 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv312[rsp], 0
  00695	eb 0b		 jmp	 SHORT $LN42@SceneInit
$LN41@SceneInit:
  00697	c7 84 24 70 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv312[rsp], 1
$LN42@SceneInit:
  006a2	0f b6 84 24 70
	02 00 00	 movzx	 eax, BYTE PTR tv312[rsp]
  006aa	88 84 24 d0 00
	00 00		 mov	 BYTE PTR iIsPunchTakeOne$[rsp], al

; 130  : 	}

  006b1	e9 6a ff ff ff	 jmp	 $LN17@SceneInit
$LN18@SceneInit:

; 131  : 	animScales[punch].x = 63.f / 82.f;

  006b6	b8 08 00 00 00	 mov	 eax, 8
  006bb	48 6b c0 07	 imul	 rax, rax, 7
  006bf	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR animScales$[rsp]
  006c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f44aed4
  006cf	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0

; 132  : 	animScales[punch].y = 1.f;

  006d4	b8 08 00 00 00	 mov	 eax, 8
  006d9	48 6b c0 07	 imul	 rax, rax, 7
  006dd	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR animScales$[rsp]
  006e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006ed	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0

; 133  : 	DefaultEntities_TexCoordAnim(enemies, enemyNodes, noOfEnemies, ENEMY_TEXTURE_ID, -.07f, -.465f, .03f, .355f, false, 1.0f, enemyLayer, SHADER_ENEMYTEXID, RandFloat(.0f, 15.0f), -.175f, origEnemyScale.x, origEnemyScale.y, enemyTag, "images/monk/player.png", ENEMY_TEXTURE_INDEX, wrapper, noOfFrames, AddUintVal2((uintptr_t)curEntity, i);, *animPts, animScales);

  006f3	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfEnemies
  006f9	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR tv323[rsp], rax
  00701	b8 08 00 00 00	 mov	 eax, 8
  00706	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR tv323[rsp]
  0070e	48 f7 e1	 mul	 rcx
  00711	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00718	48 0f 42 c1	 cmovb	 rax, rcx
  0071c	48 8b c8	 mov	 rcx, rax
  0071f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00725	48 89 05 00 00
	00 00		 mov	 QWORD PTR enemyNodes, rax
  0072c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfEnemies
  00732	48 89 84 24 80
	02 00 00	 mov	 QWORD PTR tv335[rsp], rax
  0073a	b8 08 00 00 00	 mov	 eax, 8
  0073f	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR tv335[rsp]
  00747	48 f7 e1	 mul	 rcx
  0074a	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00751	48 0f 42 c1	 cmovb	 rax, rcx
  00755	48 8b c8	 mov	 rcx, rax
  00758	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0075e	48 89 05 00 00
	00 00		 mov	 QWORD PTR enemies, rax
  00765	b8 09 00 00 00	 mov	 eax, 9
  0076a	66 89 84 24 f0
	00 00 00	 mov	 WORD PTR numberOfAnimations$[rsp], ax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h

; 383  : 	return min + (max - min) * (float)rand() / (float)RAND_MAX;

  00772	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41700000
  0077a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@00000000
  00782	f3 0f 11 84 24
	88 02 00 00	 movss	 DWORD PTR tv775[rsp], xmm0
  0078b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  00791	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00795	f3 0f 10 8c 24
	88 02 00 00	 movss	 xmm1, DWORD PTR tv775[rsp]
  0079e	f3 0f 59 c8	 mulss	 xmm1, xmm0
  007a2	0f 28 c1	 movaps	 xmm0, xmm1
  007a5	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46fffe00
  007ad	0f 57 c9	 xorps	 xmm1, xmm1
  007b0	f3 0f 58 c8	 addss	 xmm1, xmm0
  007b4	0f 28 c1	 movaps	 xmm0, xmm1
  007b7	f3 0f 11 84 24
	a4 01 00 00	 movss	 DWORD PTR $T23[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c

; 133  : 	DefaultEntities_TexCoordAnim(enemies, enemyNodes, noOfEnemies, ENEMY_TEXTURE_ID, -.07f, -.465f, .03f, .355f, false, 1.0f, enemyLayer, SHADER_ENEMYTEXID, RandFloat(.0f, 15.0f), -.175f, origEnemyScale.x, origEnemyScale.y, enemyTag, "images/monk/player.png", ENEMY_TEXTURE_INDEX, wrapper, noOfFrames, AddUintVal2((uintptr_t)curEntity, i);, *animPts, animScales);

  007c0	f3 0f 10 84 24
	a4 01 00 00	 movss	 xmm0, DWORD PTR $T23[rsp]
  007c9	f3 0f 11 84 24
	08 01 00 00	 movss	 DWORD PTR pos$[rsp], xmm0
  007d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be333333
  007da	f3 0f 11 84 24
	0c 01 00 00	 movss	 DWORD PTR pos$[rsp+4], xmm0
  007e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR origEnemyScale
  007eb	f3 0f 11 84 24
	28 01 00 00	 movss	 DWORD PTR scale$[rsp], xmm0
  007f4	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR origEnemyScale+4
  007fc	f3 0f 11 84 24
	2c 01 00 00	 movss	 DWORD PTR scale$[rsp+4], xmm0
  00805	c7 84 24 34 01
	00 00 00 00 00
	00		 mov	 DWORD PTR i$17[rsp], 0
  00810	eb 10		 jmp	 SHORT $LN22@SceneInit
$LN20@SceneInit:
  00812	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR i$17[rsp]
  00819	ff c0		 inc	 eax
  0081b	89 84 24 34 01
	00 00		 mov	 DWORD PTR i$17[rsp], eax
$LN22@SceneInit:
  00822	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfEnemies
  00828	39 84 24 34 01
	00 00		 cmp	 DWORD PTR i$17[rsp], eax
  0082f	0f 83 cf 04 00
	00		 jae	 $LN21@SceneInit
  00835	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  0083a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00840	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR tv358[rsp], rax
  00848	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  0084d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00853	48 89 84 24 98
	02 00 00	 mov	 QWORD PTR tv352[rsp], rax
  0085b	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR i$17[rsp]
  00862	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemies
  00869	48 8b 94 24 98
	02 00 00	 mov	 rdx, QWORD PTR tv352[rsp]
  00871	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx
  00875	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR tv352[rsp]
  0087d	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR curEntity$[rsp], rax
  00885	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR curEntity$[rsp]
  0088d	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR tv358[rsp]
  00895	48 89 08	 mov	 QWORD PTR [rax], rcx
  00898	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR tv358[rsp]
  008a0	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR data$[rsp], rax
  008a8	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  008ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  008b3	48 89 84 24 a0
	02 00 00	 mov	 QWORD PTR tv364[rsp], rax
  008bb	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  008c3	48 8b 8c 24 a0
	02 00 00	 mov	 rcx, QWORD PTR tv364[rsp]
  008cb	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx
  008cf	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR tv364[rsp]
  008d7	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR curAnimator$[rsp], rax
  008df	0f b7 84 24 f0
	00 00 00	 movzx	 eax, WORD PTR numberOfAnimations$[rsp]
  008e7	48 89 84 24 a8
	02 00 00	 mov	 QWORD PTR tv373[rsp], rax
  008ef	b8 08 00 00 00	 mov	 eax, 8
  008f4	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR tv373[rsp]
  008fc	48 f7 e1	 mul	 rcx
  008ff	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00906	48 0f 42 c1	 cmovb	 rax, rcx
  0090a	48 8b c8	 mov	 rcx, rax
  0090d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00913	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR curAnimator$[rsp]
  0091b	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax
  0091f	c7 84 24 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR j$18[rsp], 0
  0092a	eb 10		 jmp	 SHORT $LN25@SceneInit
$LN23@SceneInit:
  0092c	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR j$18[rsp]
  00933	ff c0		 inc	 eax
  00935	89 84 24 38 01
	00 00		 mov	 DWORD PTR j$18[rsp], eax
$LN25@SceneInit:
  0093c	0f b7 84 24 f0
	00 00 00	 movzx	 eax, WORD PTR numberOfAnimations$[rsp]
  00944	39 84 24 38 01
	00 00		 cmp	 DWORD PTR j$18[rsp], eax
  0094b	73 2c		 jae	 SHORT $LN24@SceneInit
  0094d	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR j$18[rsp]
  00954	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR animScales$[rsp]
  0095c	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00960	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR j$18[rsp]
  00967	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR curAnimator$[rsp]
  0096f	48 8b 52 38	 mov	 rdx, QWORD PTR [rdx+56]
  00973	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
  00977	eb b3		 jmp	 SHORT $LN23@SceneInit
$LN24@SceneInit:
  00979	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR curAnimator$[rsp]
  00981	c6 40 20 01	 mov	 BYTE PTR [rax+32], 1
  00985	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR curAnimator$[rsp]
  0098d	0f b7 8c 24 f0
	00 00 00	 movzx	 ecx, WORD PTR numberOfAnimations$[rsp]
  00995	66 89 48 22	 mov	 WORD PTR [rax+34], cx
  00999	0f b7 84 24 f0
	00 00 00	 movzx	 eax, WORD PTR numberOfAnimations$[rsp]
  009a1	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR tv399[rsp], rax
  009a9	b8 02 00 00 00	 mov	 eax, 2
  009ae	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR tv399[rsp]
  009b6	48 f7 e1	 mul	 rcx
  009b9	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  009c0	48 0f 42 c1	 cmovb	 rax, rcx
  009c4	48 8b c8	 mov	 rcx, rax
  009c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  009cd	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR curAnimator$[rsp]
  009d5	48 89 01	 mov	 QWORD PTR [rcx], rax
  009d8	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR curAnimator$[rsp]
  009e0	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR animPts$[rsp]
  009e8	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  009eb	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
  009ef	0f b7 84 24 f0
	00 00 00	 movzx	 eax, WORD PTR numberOfAnimations$[rsp]
  009f7	48 d1 e0	 shl	 rax, 1
  009fa	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR curAnimator$[rsp]
  00a02	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR noOfFrames$[rsp]
  00a0a	48 8b 39	 mov	 rdi, QWORD PTR [rcx]
  00a0d	48 8b f2	 mov	 rsi, rdx
  00a10	48 8b c8	 mov	 rcx, rax
  00a13	f3 a4		 rep movsb
  00a15	33 c0		 xor	 eax, eax
  00a17	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR curAnimator$[rsp]
  00a1f	66 89 41 08	 mov	 WORD PTR [rcx+8], ax
  00a23	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR curAnimator$[rsp]
  00a2b	c7 40 28 c1 84
	00 00		 mov	 DWORD PTR [rax+40], 33985 ; 000084c1H
  00a32	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR curAnimator$[rsp]
  00a3a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a42	f3 0f 11 40 30	 movss	 DWORD PTR [rax+48], xmm0
  00a47	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00a4f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR zeroVector
  00a56	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx
  00a5a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00a62	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a6a	f3 0f 11 40 30	 movss	 DWORD PTR [rax+48], xmm0
  00a6f	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR curAnimator$[rsp]
  00a77	c6 40 2c 01	 mov	 BYTE PTR [rax+44], 1
  00a7b	e8 00 00 00 00	 call	 CreateQuad
  00a80	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR data$[rsp]
  00a88	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
  00a8c	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR curEntity$[rsp]
  00a94	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd8f5c29
  00a9c	f3 0f 11 40 2c	 movss	 DWORD PTR [rax+44], xmm0
  00aa1	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR curEntity$[rsp]
  00aa9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beee147b
  00ab1	f3 0f 11 40 30	 movss	 DWORD PTR [rax+48], xmm0
  00ab6	b8 08 00 00 00	 mov	 eax, 8
  00abb	48 6b c0 01	 imul	 rax, rax, 1
  00abf	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR curEntity$[rsp]
  00ac7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3cf5c28f
  00acf	f3 0f 11 44 01
	2c		 movss	 DWORD PTR [rcx+rax+44], xmm0
  00ad5	b8 08 00 00 00	 mov	 eax, 8
  00ada	48 6b c0 01	 imul	 rax, rax, 1
  00ade	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR curEntity$[rsp]
  00ae6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb5c28f
  00aee	f3 0f 11 44 01
	30		 movss	 DWORD PTR [rcx+rax+48], xmm0
  00af4	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00afc	0f 57 c0	 xorps	 xmm0, xmm0
  00aff	f3 0f 11 40 34	 movss	 DWORD PTR [rax+52], xmm0
  00b04	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00b0c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ba3d70a
  00b14	f3 0f 11 40 38	 movss	 DWORD PTR [rax+56], xmm0
  00b19	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00b21	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ba3d70a
  00b29	f3 0f 11 40 3c	 movss	 DWORD PTR [rax+60], xmm0
  00b2e	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00b36	c6 40 51 00	 mov	 BYTE PTR [rax+81], 0
  00b3a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00b42	c6 40 50 00	 mov	 BYTE PTR [rax+80], 0
  00b46	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00b4e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00b56	f3 0f 11 40 40	 movss	 DWORD PTR [rax+64], xmm0
  00b5b	8b 94 24 34 01
	00 00		 mov	 edx, DWORD PTR i$17[rsp]
  00b62	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR curEntity$[rsp]
  00b6a	e8 00 00 00 00	 call	 AddUintVal2
  00b6f	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR curEntity$[rsp]
  00b77	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1
  00b7e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00b86	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00b8e	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00b92	e8 00 00 00 00	 call	 defaultMesh
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h

; 383  : 	return min + (max - min) * (float)rand() / (float)RAND_MAX;

  00b97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41700000
  00b9f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@00000000
  00ba7	f3 0f 11 84 24
	b8 02 00 00	 movss	 DWORD PTR tv346[rsp], xmm0
  00bb0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  00bb6	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00bba	f3 0f 10 8c 24
	b8 02 00 00	 movss	 xmm1, DWORD PTR tv346[rsp]
  00bc3	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00bc7	0f 28 c1	 movaps	 xmm0, xmm1
  00bca	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46fffe00
  00bd2	0f 57 c9	 xorps	 xmm1, xmm1
  00bd5	f3 0f 58 c8	 addss	 xmm1, xmm0
  00bd9	0f 28 c1	 movaps	 xmm0, xmm1
  00bdc	f3 0f 11 84 24
	a8 01 00 00	 movss	 DWORD PTR $T24[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c

; 133  : 	DefaultEntities_TexCoordAnim(enemies, enemyNodes, noOfEnemies, ENEMY_TEXTURE_ID, -.07f, -.465f, .03f, .355f, false, 1.0f, enemyLayer, SHADER_ENEMYTEXID, RandFloat(.0f, 15.0f), -.175f, origEnemyScale.x, origEnemyScale.y, enemyTag, "images/monk/player.png", ENEMY_TEXTURE_INDEX, wrapper, noOfFrames, AddUintVal2((uintptr_t)curEntity, i);, *animPts, animScales);

  00be5	f3 0f 10 84 24
	a8 01 00 00	 movss	 xmm0, DWORD PTR $T24[rsp]
  00bee	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00bf6	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0
  00bfb	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00c03	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be333333
  00c0b	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0
  00c10	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00c18	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR origEnemyScale
  00c20	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  00c25	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00c2d	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR origEnemyScale+4
  00c35	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0
  00c3a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00c42	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR oneBVector
  00c49	66 89 08	 mov	 WORD PTR [rax], cx
  00c4c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00c54	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR zeroBVector
  00c5b	66 89 48 02	 mov	 WORD PTR [rax+2], cx
  00c5f	c6 05 00 00 00
	00 01		 mov	 BYTE PTR shouldDraw, 1
  00c66	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00c6e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00c72	4c 8b 84 24 28
	01 00 00	 mov	 r8, QWORD PTR scale$[rsp]
  00c7a	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR pos$[rsp]
  00c82	8b 08		 mov	 ecx, DWORD PTR [rax]
  00c84	e8 00 00 00 00	 call	 MoveScaleMesh
  00c89	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR curEntity$[rsp]
  00c91	c7 40 24 02 00
	00 00		 mov	 DWORD PTR [rax+36], 2
  00c98	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR curEntity$[rsp]
  00ca0	e8 00 00 00 00	 call	 SubscribeEntity_Without_Scale
  00ca5	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR i$17[rsp]
  00cac	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR enemyNodes
  00cb3	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
  00cb7	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR curAnimator$[rsp]
  00cbf	0f 57 c0	 xorps	 xmm0, xmm0
  00cc2	f3 0f 11 40 24	 movss	 DWORD PTR [rax+36], xmm0
  00cc7	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00ccc	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR curAnimator$[rsp]
  00cd4	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax
  00cd8	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR curAnimator$[rsp]
  00ce0	48 83 c0 18	 add	 rax, 24
  00ce4	4c 8b c8	 mov	 r9, rax
  00ce7	41 b8 c1 84 00
	00		 mov	 r8d, 33985		; 000084c1H
  00ced	ba 01 00 00 00	 mov	 edx, 1
  00cf2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@MABOBLII@images?1monk?1player?4png@
  00cf9	e8 00 00 00 00	 call	 InitSingleTexture
  00cfe	90		 npad	 1
  00cff	e9 0e fb ff ff	 jmp	 $LN20@SceneInit
$LN21@SceneInit:

; 134  : 	enemyHBs = malloc(sizeof(HealthBar) * noOfEnemies);

  00d04	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfEnemies
  00d0a	48 89 84 24 c0
	02 00 00	 mov	 QWORD PTR tv477[rsp], rax
  00d12	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00d17	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR tv477[rsp]
  00d1f	48 f7 e1	 mul	 rcx
  00d22	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00d29	48 0f 42 c1	 cmovb	 rax, rcx
  00d2d	48 8b c8	 mov	 rcx, rax
  00d30	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00d36	48 89 05 00 00
	00 00		 mov	 QWORD PTR enemyHBs, rax

; 135  : 	//different texture slot is used here (compared to player hb) because we're rendering in world space.
; 136  : 	CreateHealthBars(7.f, .001f, enemyHBs[i].barSlider, ENEMY_HB_SHADER_ID, ENEMY_HB_TEXTURE_INDEX, ENEMY_HB_TEX_ID, "images/Retro Inventory/Original/Health_03_Bar01.png", enemies[i]->physicsData->transform.position.x, enemies[i]->physicsData->transform.position.y + healthBarYOffset, .39f, .018f, noOfEnemies, ENEMY_BORDER_SHADER_ID, ENEMY_BORDER_TEXTURE_INDEX, ENEMY_BORDER_TEX_ID, "images/Retro Inventory/Original/Health_03.png", enemies[i]->physicsData->transform.position.x, enemies[i]->physicsData->transform.position.y + healthBarYOffset, 1.0f / 1.7f, .26f / 1.7f, noOfEnemies, enemyHBs[i].borderMesh, enemyHBs[i], monkHBNodes);

  00d3d	c7 84 24 3c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR i$19[rsp], 0
  00d48	eb 10		 jmp	 SHORT $LN28@SceneInit
$LN26@SceneInit:
  00d4a	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR i$19[rsp]
  00d51	ff c0		 inc	 eax
  00d53	89 84 24 3c 01
	00 00		 mov	 DWORD PTR i$19[rsp], eax
$LN28@SceneInit:
  00d5a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfEnemies
  00d60	39 84 24 3c 01
	00 00		 cmp	 DWORD PTR i$19[rsp], eax
  00d67	0f 83 69 01 00
	00		 jae	 $LN27@SceneInit
  00d6d	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR i$19[rsp]
  00d74	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemies
  00d7b	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00d7f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00d82	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR i$19[rsp]
  00d89	48 6b c9 40	 imul	 rcx, rcx, 64		; 00000040H
  00d8d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR enemyHBs
  00d94	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [rax+12]
  00d99	f3 0f 11 44 0a
	20		 movss	 DWORD PTR [rdx+rcx+32], xmm0
  00d9f	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR i$19[rsp]
  00da6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemies
  00dad	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00db1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00db4	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  00db9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR healthBarYOffset
  00dc1	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR i$19[rsp]
  00dc8	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  00dcc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyHBs
  00dd3	f3 0f 11 44 01
	24		 movss	 DWORD PTR [rcx+rax+36], xmm0
  00dd9	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR i$19[rsp]
  00de0	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  00de4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyHBs
  00deb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f169696
  00df3	f3 0f 11 44 01
	28		 movss	 DWORD PTR [rcx+rax+40], xmm0
  00df9	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR i$19[rsp]
  00e00	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  00e04	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyHBs
  00e0b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e1c9c9c
  00e13	f3 0f 11 44 01
	2c		 movss	 DWORD PTR [rcx+rax+44], xmm0
  00e19	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR i$19[rsp]
  00e20	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  00e24	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyHBs
  00e2b	48 03 c8	 add	 rcx, rax
  00e2e	48 8b c1	 mov	 rax, rcx
  00e31	48 8b c8	 mov	 rcx, rax
  00e34	e8 00 00 00 00	 call	 CreateQuadAssign
  00e39	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR i$19[rsp]
  00e40	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  00e44	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyHBs
  00e4b	48 03 c8	 add	 rcx, rax
  00e4e	48 8b c1	 mov	 rax, rcx
  00e51	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40e00000
  00e59	48 8b c8	 mov	 rcx, rax
  00e5c	e8 00 00 00 00	 call	 defaultMesh
  00e61	41 b8 c7 84 00
	00		 mov	 r8d, 33991		; 000084c7H
  00e67	ba 07 00 00 00	 mov	 edx, 7
  00e6c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@NDPFACJE@images?1Retro?5Inventory?1Original@
  00e73	e8 00 00 00 00	 call	 InitSingleTexture2
  00e78	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR i$19[rsp]
  00e7f	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  00e83	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR i$19[rsp]
  00e8a	48 6b c9 40	 imul	 rcx, rcx, 64		; 00000040H
  00e8e	8b 94 24 3c 01
	00 00		 mov	 edx, DWORD PTR i$19[rsp]
  00e95	48 6b d2 40	 imul	 rdx, rdx, 64		; 00000040H
  00e99	48 89 94 24 c8
	02 00 00	 mov	 QWORD PTR tv540[rsp], rdx
  00ea1	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR enemyHBs
  00ea8	4c 8b 44 07 28	 mov	 r8, QWORD PTR [rdi+rax+40]
  00ead	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR enemyHBs
  00eb4	48 8b 54 08 20	 mov	 rdx, QWORD PTR [rax+rcx+32]
  00eb9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR enemyHBs
  00ec0	48 8b 8c 24 c8
	02 00 00	 mov	 rcx, QWORD PTR tv540[rsp]
  00ec8	8b 0c 08	 mov	 ecx, DWORD PTR [rax+rcx]
  00ecb	e8 00 00 00 00	 call	 MoveScaleMesh
  00ed0	90		 npad	 1
  00ed1	e9 74 fe ff ff	 jmp	 $LN26@SceneInit
$LN27@SceneInit:
  00ed6	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfEnemies
  00edc	48 89 84 24 d0
	02 00 00	 mov	 QWORD PTR tv547[rsp], rax
  00ee4	b8 08 00 00 00	 mov	 eax, 8
  00ee9	48 8b 8c 24 d0
	02 00 00	 mov	 rcx, QWORD PTR tv547[rsp]
  00ef1	48 f7 e1	 mul	 rcx
  00ef4	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00efb	48 0f 42 c1	 cmovb	 rax, rcx
  00eff	48 8b c8	 mov	 rcx, rax
  00f02	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00f08	48 89 05 00 00
	00 00		 mov	 QWORD PTR monkHBNodes, rax
  00f0f	c7 84 24 40 01
	00 00 00 00 00
	00		 mov	 DWORD PTR i$20[rsp], 0
  00f1a	eb 10		 jmp	 SHORT $LN31@SceneInit
$LN29@SceneInit:
  00f1c	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR i$20[rsp]
  00f23	ff c0		 inc	 eax
  00f25	89 84 24 40 01
	00 00		 mov	 DWORD PTR i$20[rsp], eax
$LN31@SceneInit:
  00f2c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfEnemies
  00f32	39 84 24 40 01
	00 00		 cmp	 DWORD PTR i$20[rsp], eax
  00f39	0f 83 57 02 00
	00		 jae	 $LN30@SceneInit
  00f3f	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR i$20[rsp]
  00f46	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  00f4a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyHBs
  00f51	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec7ae14
  00f59	f3 0f 11 44 01
	38		 movss	 DWORD PTR [rcx+rax+56], xmm0
  00f5f	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR i$20[rsp]
  00f66	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  00f6a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyHBs
  00f71	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c9374bc
  00f79	f3 0f 11 44 01
	3c		 movss	 DWORD PTR [rcx+rax+60], xmm0
  00f7f	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR i$20[rsp]
  00f86	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemies
  00f8d	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00f91	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00f94	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR i$20[rsp]
  00f9b	48 6b c9 40	 imul	 rcx, rcx, 64		; 00000040H
  00f9f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR enemyHBs
  00fa6	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [rax+12]
  00fab	f3 0f 11 44 0a
	30		 movss	 DWORD PTR [rdx+rcx+48], xmm0
  00fb1	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR i$20[rsp]
  00fb8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemies
  00fbf	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00fc3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00fc6	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  00fcb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR healthBarYOffset
  00fd3	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR i$20[rsp]
  00fda	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  00fde	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyHBs
  00fe5	f3 0f 11 44 01
	34		 movss	 DWORD PTR [rcx+rax+52], xmm0
  00feb	b9 18 00 00 00	 mov	 ecx, 24
  00ff0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00ff6	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR i$20[rsp]
  00ffd	48 6b c9 40	 imul	 rcx, rcx, 64		; 00000040H
  01001	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR enemyHBs
  01008	48 89 44 0a 08	 mov	 QWORD PTR [rdx+rcx+8], rax
  0100d	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR i$20[rsp]
  01014	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  01018	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyHBs
  0101f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01027	f3 0f 11 44 01
	10		 movss	 DWORD PTR [rcx+rax+16], xmm0
  0102d	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR i$20[rsp]
  01034	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  01038	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyHBs
  0103f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3a83126f
  01047	f3 0f 11 44 01
	18		 movss	 DWORD PTR [rcx+rax+24], xmm0
  0104d	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR i$20[rsp]
  01054	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  01058	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyHBs
  0105f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40e00000
  01067	f3 0f 11 44 01
	14		 movss	 DWORD PTR [rcx+rax+20], xmm0
  0106d	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR i$20[rsp]
  01074	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  01078	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyHBs
  0107f	48 8b 4c 01 08	 mov	 rcx, QWORD PTR [rcx+rax+8]
  01084	e8 00 00 00 00	 call	 CreateSQuadAssign
  01089	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR i$20[rsp]
  01090	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  01094	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40c00000
  0109c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyHBs
  010a3	48 8b 4c 01 08	 mov	 rcx, QWORD PTR [rcx+rax+8]
  010a8	e8 00 00 00 00	 call	 defaultSMesh
  010ad	41 b8 c6 84 00
	00		 mov	 r8d, 33990		; 000084c6H
  010b3	ba 06 00 00 00	 mov	 edx, 6
  010b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DE@GAHGBOII@images?1Retro?5Inventory?1Original@
  010bf	e8 00 00 00 00	 call	 InitSingleTexture2
  010c4	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR i$20[rsp]
  010cb	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  010cf	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR i$20[rsp]
  010d6	48 6b c9 40	 imul	 rcx, rcx, 64		; 00000040H
  010da	8b 94 24 40 01
	00 00		 mov	 edx, DWORD PTR i$20[rsp]
  010e1	48 6b d2 40	 imul	 rdx, rdx, 64		; 00000040H
  010e5	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR enemyHBs
  010ec	48 8b 54 17 08	 mov	 rdx, QWORD PTR [rdi+rdx+8]
  010f1	48 89 94 24 d8
	02 00 00	 mov	 QWORD PTR tv777[rsp], rdx
  010f9	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR enemyHBs
  01100	4c 8b 44 07 38	 mov	 r8, QWORD PTR [rdi+rax+56]
  01105	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR enemyHBs
  0110c	48 8b 54 08 30	 mov	 rdx, QWORD PTR [rax+rcx+48]
  01111	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR tv777[rsp]
  01119	8b 08		 mov	 ecx, DWORD PTR [rax]
  0111b	e8 00 00 00 00	 call	 MoveScaleMesh
  01120	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR i$20[rsp]
  01127	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  0112b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyHBs
  01132	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  01137	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR mesh$21[rsp], rax
  0113f	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR mesh$21[rsp]
  01147	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0114f	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0
  01154	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR mesh$21[rsp]
  0115c	c6 40 14 00	 mov	 BYTE PTR [rax+20], 0
  01160	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR i$20[rsp]
  01167	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  0116b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyHBs
  01172	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  01177	48 8b c8	 mov	 rcx, rax
  0117a	e8 00 00 00 00	 call	 SubscribeSlider
  0117f	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR i$20[rsp]
  01186	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR monkHBNodes
  0118d	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
  01191	e9 86 fd ff ff	 jmp	 $LN29@SceneInit
$LN30@SceneInit:

; 137  : 	debugBoxSize = VectorByScalar(oneVector, .03f);

  01196	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR oneVector
  0119d	48 89 84 24 08
	02 00 00	 mov	 QWORD PTR vector$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 61   : 	Vector2 _this = { vector.x * scalar, vector.y * scalar };

  011a5	f3 0f 10 84 24
	08 02 00 00	 movss	 xmm0, DWORD PTR vector$[rsp]
  011ae	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3cf5c28f
  011b6	f3 0f 11 84 24
	28 02 00 00	 movss	 DWORD PTR _this$28[rsp], xmm0
  011bf	f3 0f 10 84 24
	0c 02 00 00	 movss	 xmm0, DWORD PTR vector$[rsp+4]
  011c8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3cf5c28f
  011d0	f3 0f 11 84 24
	2c 02 00 00	 movss	 DWORD PTR _this$28[rsp+4], xmm0

; 62   : 	return _this;

  011d9	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR _this$28[rsp]
  011e1	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR $T25[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c

; 137  : 	debugBoxSize = VectorByScalar(oneVector, .03f);

  011e9	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR $T25[rsp]
  011f1	48 89 05 00 00
	00 00		 mov	 QWORD PTR debugBoxSize, rax

; 138  : #ifdef DEBUG_ENEMY_COLLIDER
; 139  : 	Vector2* positions = enemies[0]->origAABB;

  011f8	b8 08 00 00 00	 mov	 eax, 8
  011fd	48 6b c0 00	 imul	 rax, rax, 0
  01201	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemies
  01208	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0120c	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  01210	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR positions$[rsp], rax

; 140  : 	debugBoxSize = VectorByScalar(oneVector, .03f);

  01218	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR oneVector
  0121f	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR vector$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 61   : 	Vector2 _this = { vector.x * scalar, vector.y * scalar };

  01227	f3 0f 10 84 24
	c8 01 00 00	 movss	 xmm0, DWORD PTR vector$[rsp]
  01230	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3cf5c28f
  01238	f3 0f 11 84 24
	e8 01 00 00	 movss	 DWORD PTR _this$27[rsp], xmm0
  01241	f3 0f 10 84 24
	cc 01 00 00	 movss	 xmm0, DWORD PTR vector$[rsp+4]
  0124a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3cf5c28f
  01252	f3 0f 11 84 24
	ec 01 00 00	 movss	 DWORD PTR _this$27[rsp+4], xmm0

; 62   : 	return _this;

  0125b	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR _this$27[rsp]
  01263	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR $T26[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c

; 140  : 	debugBoxSize = VectorByScalar(oneVector, .03f);

  0126b	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR $T26[rsp]
  01273	48 89 05 00 00
	00 00		 mov	 QWORD PTR debugBoxSize, rax

; 141  : 	float** colors[MESH_COLORS_LEN];
; 142  : 	uint j;
; 143  : 	for (i = 0; i < 2; i++) {

  0127a	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  01282	eb 0a		 jmp	 SHORT $LN34@SceneInit
$LN32@SceneInit:
  01284	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  01288	ff c0		 inc	 eax
  0128a	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN34@SceneInit:
  0128e	83 7c 24 64 02	 cmp	 DWORD PTR i$[rsp], 2
  01293	0f 8d d0 00 00
	00		 jge	 $LN33@SceneInit

; 144  : 		colors[i] = malloc(sizeof(float*) * MESH_COLORS_LEN);

  01299	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0129e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  012a4	48 63 4c 24 64	 movsxd	 rcx, DWORD PTR i$[rsp]
  012a9	48 89 84 cc 68
	01 00 00	 mov	 QWORD PTR colors$[rsp+rcx*8], rax

; 145  : 		for (j = 0; j < MESH_COLORS_LEN; j++) {

  012b1	c7 84 24 94 01
	00 00 00 00 00
	00		 mov	 DWORD PTR j$[rsp], 0
  012bc	eb 10		 jmp	 SHORT $LN37@SceneInit
$LN35@SceneInit:
  012be	8b 84 24 94 01
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  012c5	ff c0		 inc	 eax
  012c7	89 84 24 94 01
	00 00		 mov	 DWORD PTR j$[rsp], eax
$LN37@SceneInit:
  012ce	8b 84 24 94 01
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  012d5	48 83 f8 04	 cmp	 rax, 4
  012d9	0f 83 85 00 00
	00		 jae	 $LN36@SceneInit

; 146  : 			colors[i][j] = calloc(MESH_NUM_COLORS, sizeof(float));

  012df	ba 04 00 00 00	 mov	 edx, 4
  012e4	b9 04 00 00 00	 mov	 ecx, 4
  012e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  012ef	48 63 4c 24 64	 movsxd	 rcx, DWORD PTR i$[rsp]
  012f4	8b 94 24 94 01
	00 00		 mov	 edx, DWORD PTR j$[rsp]
  012fb	48 8b 8c cc 68
	01 00 00	 mov	 rcx, QWORD PTR colors$[rsp+rcx*8]
  01303	48 89 04 d1	 mov	 QWORD PTR [rcx+rdx*8], rax

; 147  : 			colors[i][j][i] = colors[i][j][3] = 1.0f;

  01307	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  0130c	8b 8c 24 94 01
	00 00		 mov	 ecx, DWORD PTR j$[rsp]
  01313	48 8b 84 c4 68
	01 00 00	 mov	 rax, QWORD PTR colors$[rsp+rax*8]
  0131b	ba 04 00 00 00	 mov	 edx, 4
  01320	48 6b d2 03	 imul	 rdx, rdx, 3
  01324	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  01328	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01330	f3 0f 11 04 02	 movss	 DWORD PTR [rdx+rax], xmm0
  01335	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  0133a	8b 8c 24 94 01
	00 00		 mov	 ecx, DWORD PTR j$[rsp]
  01341	48 8b 84 c4 68
	01 00 00	 mov	 rax, QWORD PTR colors$[rsp+rax*8]
  01349	48 63 54 24 64	 movsxd	 rdx, DWORD PTR i$[rsp]
  0134e	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  01352	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0135a	f3 0f 11 04 90	 movss	 DWORD PTR [rax+rdx*4], xmm0

; 148  : 		}

  0135f	e9 5a ff ff ff	 jmp	 $LN35@SceneInit
$LN36@SceneInit:

; 149  : 	}

  01364	e9 1b ff ff ff	 jmp	 $LN32@SceneInit
$LN33@SceneInit:

; 150  : 	//DefaultNewObjectsColor2(SHADER_DEBUG_TEX_ID, "images/debug/0.png", DEBUG_TEXTURE_INDEX, DEBUG_TEXTURE_ID, positions, debugBoxSize, colors, debugMesh, 2);
; 151  : #endif
; 152  : }

  01369	48 8b cc	 mov	 rcx, rsp
  0136c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:SceneInit$rtcFrameData
  01373	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  01378	48 8b 8c 24 e0
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  01380	48 33 cc	 xor	 rcx, rsp
  01383	e8 00 00 00 00	 call	 __security_check_cookie
  01388	48 81 c4 f8 02
	00 00		 add	 rsp, 760		; 000002f8H
  0138f	5f		 pop	 rdi
  01390	5e		 pop	 rsi
  01391	c3		 ret	 0
SceneInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\animations.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c
_TEXT	SEGMENT
allNull$18 = 32
i$19 = 36
i$20 = 40
resultantVel$21 = 44
$T22 = 48
$T23 = 56
$T24 = 64
$T25 = 72
$T26 = 80
$T27 = 88
$T28 = 96
$T29 = 100
$T30 = 104
$T31 = 108
$T32 = 112
orig$ = 120
lhs$ = 136
rhs$ = 168
_this$33 = 200
a$ = 232
b$ = 264
_this$34 = 296
anim$ = 312
vector$ = 328
lhs$ = 360
rhs$ = 392
_this$35 = 424
lhs$ = 456
rhs$ = 488
_this$36 = 520
vector$ = 552
_this$37 = 584
tv148 = 596
tv220 = 600
tv222 = 604
tv258 = 608
tv281 = 616
tv460 = 624
tv315 = 632
tv377 = 636
tv328 = 640
tv339 = 644
tv383 = 648
tv356 = 652
tv358 = 656
SceneUpdate PROC

; 194  : void SceneUpdate() {

$LN77:
  00000	40 57		 push	 rdi
  00002	48 81 ec a0 02
	00 00		 sub	 rsp, 672		; 000002a0H
  00009	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0000e	b9 a0 00 00 00	 mov	 ecx, 160		; 000000a0H
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00021	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 195  : 	changeInPos = avgDT * enemyAccel;

  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR avgDT
  0002e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR enemyAccel
  00036	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR changeInPos, xmm0

; 196  : 	for (curEnemyIndex = 0; curEnemyIndex < noOfEnemies; curEnemyIndex++) {

  0003e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR curEnemyIndex, 0
  00048	eb 0e		 jmp	 SHORT $LN4@SceneUpdat
$LN2@SceneUpdat:
  0004a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR curEnemyIndex
  00050	ff c0		 inc	 eax
  00052	89 05 00 00 00
	00		 mov	 DWORD PTR curEnemyIndex, eax
$LN4@SceneUpdat:
  00058	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfEnemies
  0005e	39 05 00 00 00
	00		 cmp	 DWORD PTR curEnemyIndex, eax
  00064	0f 83 d2 09 00
	00		 jae	 $LN3@SceneUpdat

; 197  : 		if (!(curEnemy = enemies[curEnemyIndex])) continue;

  0006a	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curEnemyIndex
  00071	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemies
  00078	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0007c	48 89 05 00 00
	00 00		 mov	 QWORD PTR curEnemy, rax
  00083	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR curEnemy, 0
  0008b	75 02		 jne	 SHORT $LN11@SceneUpdat
  0008d	eb bb		 jmp	 SHORT $LN2@SceneUpdat
$LN11@SceneUpdat:

; 198  : 		data = curEnemy->physicsData;

  0008f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curEnemy
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 89 05 00 00
	00 00		 mov	 QWORD PTR data, rax

; 199  : 		curAnim = data->animator;

  000a0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR data
  000a7	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  000ab	48 89 05 00 00
	00 00		 mov	 QWORD PTR curAnim, rax

; 200  : 		curTransform = &data->transform;

  000b2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR data
  000b9	48 89 05 00 00
	00 00		 mov	 QWORD PTR curTransform, rax

; 201  : 		healthBarPos = AddVectors(curTransform->position, VectorByScalar(upVector, healthBarYOffset));

  000c0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR upVector
  000c7	48 89 84 24 28
	02 00 00	 mov	 QWORD PTR vector$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 61   : 	Vector2 _this = { vector.x * scalar, vector.y * scalar };

  000cf	f3 0f 10 84 24
	28 02 00 00	 movss	 xmm0, DWORD PTR vector$[rsp]
  000d8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR healthBarYOffset
  000e0	f3 0f 11 84 24
	48 02 00 00	 movss	 DWORD PTR _this$37[rsp], xmm0
  000e9	f3 0f 10 84 24
	2c 02 00 00	 movss	 xmm0, DWORD PTR vector$[rsp+4]
  000f2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR healthBarYOffset
  000fa	f3 0f 11 84 24
	4c 02 00 00	 movss	 DWORD PTR _this$37[rsp+4], xmm0

; 62   : 	return _this;

  00103	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR _this$37[rsp]
  0010b	48 89 44 24 30	 mov	 QWORD PTR $T22[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c

; 201  : 		healthBarPos = AddVectors(curTransform->position, VectorByScalar(upVector, healthBarYOffset));

  00110	48 8b 44 24 30	 mov	 rax, QWORD PTR $T22[rsp]
  00115	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR rhs$[rsp], rax
  0011d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  00124	48 8b 40 0c	 mov	 rax, QWORD PTR [rax+12]
  00128	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR lhs$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 35   : 	_this.x = lhs.x + rhs.x;

  00130	f3 0f 10 84 24
	c8 01 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp]
  00139	f3 0f 58 84 24
	e8 01 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp]
  00142	f3 0f 11 84 24
	08 02 00 00	 movss	 DWORD PTR _this$36[rsp], xmm0

; 36   : 	_this.y = lhs.y + rhs.y;

  0014b	f3 0f 10 84 24
	cc 01 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  00154	f3 0f 58 84 24
	ec 01 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp+4]
  0015d	f3 0f 11 84 24
	0c 02 00 00	 movss	 DWORD PTR _this$36[rsp+4], xmm0

; 37   : 	return _this;

  00166	48 8b 84 24 08
	02 00 00	 mov	 rax, QWORD PTR _this$36[rsp]
  0016e	48 89 44 24 38	 mov	 QWORD PTR $T23[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c

; 201  : 		healthBarPos = AddVectors(curTransform->position, VectorByScalar(upVector, healthBarYOffset));

  00173	48 8b 44 24 38	 mov	 rax, QWORD PTR $T23[rsp]
  00178	48 89 05 00 00
	00 00		 mov	 QWORD PTR healthBarPos, rax

; 202  : 		curHB = &enemyHBs[curEnemyIndex];

  0017f	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curEnemyIndex
  00186	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  0018a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyHBs
  00191	48 03 c8	 add	 rcx, rax
  00194	48 8b c1	 mov	 rax, rcx
  00197	48 89 05 00 00
	00 00		 mov	 QWORD PTR curHB, rax

; 203  : 		MoveScaleMesh(curHB->borderMesh.meshLocation, healthBarPos, curHB->bordScale);

  0019e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curHB
  001a5	4c 8b 40 28	 mov	 r8, QWORD PTR [rax+40]
  001a9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR healthBarPos
  001b0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curHB
  001b7	8b 08		 mov	 ecx, DWORD PTR [rax]
  001b9	e8 00 00 00 00	 call	 MoveScaleMesh

; 204  : 		MoveScaleSlider(curHB->barSlider.mesh, healthBarPos, curHB->barScale);

  001be	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curHB
  001c5	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001c9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curHB
  001d0	4c 8b 41 38	 mov	 r8, QWORD PTR [rcx+56]
  001d4	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR healthBarPos
  001db	8b 08		 mov	 ecx, DWORD PTR [rax]
  001dd	e8 00 00 00 00	 call	 MoveScaleMesh
  001e2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curHB
  001e9	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001ed	8b 00		 mov	 eax, DWORD PTR [rax]
  001ef	03 05 00 00 00
	00		 add	 eax, DWORD PTR stride
  001f5	8b c0		 mov	 eax, eax
  001f7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curHB
  001fe	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00202	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR vertices
  00209	f3 0f 10 04 82	 movss	 xmm0, DWORD PTR [rdx+rax*4]
  0020e	f3 0f 11 41 0c	 movss	 DWORD PTR [rcx+12], xmm0
  00213	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curHB
  0021a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0021e	8b 00		 mov	 eax, DWORD PTR [rax]
  00220	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR stride
  00226	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  00229	8b c0		 mov	 eax, eax
  0022b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curHB
  00232	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00236	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR vertices
  0023d	f3 0f 10 04 82	 movss	 xmm0, DWORD PTR [rdx+rax*4]
  00242	f3 0f 11 41 08	 movss	 DWORD PTR [rcx+8], xmm0
  00247	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curHB
  0024e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00252	c6 40 14 01	 mov	 BYTE PTR [rax+20], 1

; 205  : 		currentAlive = curHB->barSlider.pseudoValue;

  00256	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curHB
  0025d	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  00262	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00269	7a 0f		 jp	 SHORT $LN23@SceneUpdat
  0026b	75 0d		 jne	 SHORT $LN23@SceneUpdat
  0026d	c7 84 24 54 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv148[rsp], 0
  00278	eb 0b		 jmp	 SHORT $LN24@SceneUpdat
$LN23@SceneUpdat:
  0027a	c7 84 24 54 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv148[rsp], 1
$LN24@SceneUpdat:
  00285	0f b6 84 24 54
	02 00 00	 movzx	 eax, BYTE PTR tv148[rsp]
  0028d	88 05 00 00 00
	00		 mov	 BYTE PTR currentAlive, al

; 206  : 		if (!currentAlive) {

  00293	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR currentAlive
  0029a	85 c0		 test	 eax, eax
  0029c	0f 85 b6 01 00
	00		 jne	 $LN12@SceneUpdat

; 207  : 			if (dissolved) SetElapsedTime(.0f);

  002a2	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR dissolved
  002a9	85 c0		 test	 eax, eax
  002ab	74 2b		 je	 SHORT $LN13@SceneUpdat
  002ad	0f 57 c0	 xorps	 xmm0, xmm0
  002b0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR elapsedTime, xmm0
  002b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@MHMCDAGK@u_elapsedT@
  002bf	e8 00 00 00 00	 call	 GetLocVal2
  002c4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR elapsedTime
  002cc	8b c8		 mov	 ecx, eax
  002ce	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewUniform1f
  002d5	ff 10		 call	 QWORD PTR [rax]
  002d7	90		 npad	 1
$LN13@SceneUpdat:

; 208  : 			enemyDamage[curEnemyIndex] = .0f;

  002d8	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curEnemyIndex
  002df	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyDamage
  002e6	0f 57 c0	 xorps	 xmm0, xmm0
  002e9	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 209  : 			if (!setMeshDissolve[curEnemyIndex]) {

  002ee	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curEnemyIndex
  002f5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR setMeshDissolve
  002fc	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00300	85 c0		 test	 eax, eax
  00302	75 41		 jne	 SHORT $LN14@SceneUpdat

; 210  : 				ChangeTexInd2(data->mesh, SHADER_ENEMYTEXID + .1f);

  00304	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f8ccccd
  0030c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR data
  00313	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00317	e8 00 00 00 00	 call	 ChangeTexInd2

; 211  : 				ChangeTexInd2(&curHB->borderMesh, ENEMY_BORDER_SHADER_ID + .1f);

  0031c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curHB
  00323	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40e33333
  0032b	48 8b c8	 mov	 rcx, rax
  0032e	e8 00 00 00 00	 call	 ChangeTexInd2

; 212  : 				setMeshDissolve[curEnemyIndex] = true;

  00333	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curEnemyIndex
  0033a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR setMeshDissolve
  00341	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1
$LN14@SceneUpdat:

; 213  : 			}
; 214  : 			enemies[curEnemyIndex]->physicsData->animator->active = false;

  00345	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curEnemyIndex
  0034c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemies
  00353	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00357	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0035a	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0035e	c6 40 2c 00	 mov	 BYTE PTR [rax+44], 0

; 215  : 			if (elapsedTime >= MAX_DISSOLVE_ET) {

  00362	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR elapsedTime
  0036a	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@40800000
  00371	0f 82 d5 00 00
	00		 jb	 $LN15@SceneUpdat

; 216  : 				resetTime = true;

  00377	c6 05 00 00 00
	00 01		 mov	 BYTE PTR resetTime, 1

; 217  : 				DeleteQuad(data->mesh);

  0037e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR data
  00385	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00389	e8 00 00 00 00	 call	 DeleteQuad

; 218  : 				DeleteQuad(&curHB->borderMesh);

  0038e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curHB
  00395	48 8b c8	 mov	 rcx, rax
  00398	e8 00 00 00 00	 call	 DeleteQuad

; 219  : 				DeleteSlider(monkHBNodes[curEnemyIndex]);

  0039d	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curEnemyIndex
  003a4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR monkHBNodes
  003ab	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  003af	e8 00 00 00 00	 call	 DeleteSlider

; 220  : 				bool allNull = true;

  003b4	c6 44 24 20 01	 mov	 BYTE PTR allNull$18[rsp], 1

; 221  : 				for (uint i = 0; i < noOfEnemies; i++) {

  003b9	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$19[rsp], 0
  003c1	eb 0a		 jmp	 SHORT $LN7@SceneUpdat
$LN5@SceneUpdat:
  003c3	8b 44 24 24	 mov	 eax, DWORD PTR i$19[rsp]
  003c7	ff c0		 inc	 eax
  003c9	89 44 24 24	 mov	 DWORD PTR i$19[rsp], eax
$LN7@SceneUpdat:
  003cd	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfEnemies
  003d3	39 44 24 24	 cmp	 DWORD PTR i$19[rsp], eax
  003d7	73 2a		 jae	 SHORT $LN6@SceneUpdat

; 222  : 					if (curEnemyIndex != i && enemyNodes[curEnemyIndex]) {

  003d9	8b 44 24 24	 mov	 eax, DWORD PTR i$19[rsp]
  003dd	39 05 00 00 00
	00		 cmp	 DWORD PTR curEnemyIndex, eax
  003e3	74 1c		 je	 SHORT $LN16@SceneUpdat
  003e5	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curEnemyIndex
  003ec	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyNodes
  003f3	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  003f8	74 07		 je	 SHORT $LN16@SceneUpdat

; 223  : 						allNull = false;

  003fa	c6 44 24 20 00	 mov	 BYTE PTR allNull$18[rsp], 0

; 224  : 						break;

  003ff	eb 02		 jmp	 SHORT $LN6@SceneUpdat
$LN16@SceneUpdat:

; 225  : 					}
; 226  : 				}

  00401	eb c0		 jmp	 SHORT $LN5@SceneUpdat
$LN6@SceneUpdat:

; 227  : 				DeleteEntity(enemyNodes[curEnemyIndex], allNull);

  00403	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curEnemyIndex
  0040a	0f b6 54 24 20	 movzx	 edx, BYTE PTR allNull$18[rsp]
  0040f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyNodes
  00416	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0041a	e8 00 00 00 00	 call	 DeleteEntity

; 228  : 				enemies[curEnemyIndex] = NULL;

  0041f	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curEnemyIndex
  00426	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemies
  0042d	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0

; 229  : 				if (allNull) {

  00435	0f b6 44 24 20	 movzx	 eax, BYTE PTR allNull$18[rsp]
  0043a	85 c0		 test	 eax, eax
  0043c	74 0e		 je	 SHORT $LN17@SceneUpdat

; 230  : 					free(enemyHBs);

  0043e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyHBs
  00445	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  0044b	90		 npad	 1
$LN17@SceneUpdat:
$LN15@SceneUpdat:

; 231  : 				}
; 232  : 			}
; 233  : 			updateTime = true;

  0044c	c6 05 00 00 00
	00 01		 mov	 BYTE PTR updateTime, 1

; 234  : 			continue;

  00453	e9 f2 fb ff ff	 jmp	 $LN2@SceneUpdat
$LN12@SceneUpdat:

; 236  : 		if (SqrMagnitude(TakeVectors(playerData->transform.position, curTransform->position)) <= attkDst) {

  00458	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  0045f	48 8b 40 0c	 mov	 rax, QWORD PTR [rax+12]
  00463	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR rhs$[rsp], rax
  0046b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR playerData
  00472	48 8b 40 0c	 mov	 rax, QWORD PTR [rax+12]
  00476	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR lhs$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 41   : 	_this.x = lhs.x - rhs.x;

  0047e	f3 0f 10 84 24
	68 01 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp]
  00487	f3 0f 5c 84 24
	88 01 00 00	 subss	 xmm0, DWORD PTR rhs$[rsp]
  00490	f3 0f 11 84 24
	a8 01 00 00	 movss	 DWORD PTR _this$35[rsp], xmm0

; 42   : 	_this.y = lhs.y - rhs.y;

  00499	f3 0f 10 84 24
	6c 01 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  004a2	f3 0f 5c 84 24
	8c 01 00 00	 subss	 xmm0, DWORD PTR rhs$[rsp+4]
  004ab	f3 0f 11 84 24
	ac 01 00 00	 movss	 DWORD PTR _this$35[rsp+4], xmm0

; 43   : 	return _this;

  004b4	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR _this$35[rsp]
  004bc	48 89 44 24 40	 mov	 QWORD PTR $T24[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c

; 236  : 		if (SqrMagnitude(TakeVectors(playerData->transform.position, curTransform->position)) <= attkDst) {

  004c1	48 8b 44 24 40	 mov	 rax, QWORD PTR $T24[rsp]
  004c6	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR vector$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 125  : 	return vector.x * vector.x + vector.y * vector.y;

  004ce	f3 0f 10 84 24
	48 01 00 00	 movss	 xmm0, DWORD PTR vector$[rsp]
  004d7	f3 0f 59 84 24
	48 01 00 00	 mulss	 xmm0, DWORD PTR vector$[rsp]
  004e0	f3 0f 10 8c 24
	4c 01 00 00	 movss	 xmm1, DWORD PTR vector$[rsp+4]
  004e9	f3 0f 59 8c 24
	4c 01 00 00	 mulss	 xmm1, DWORD PTR vector$[rsp+4]
  004f2	f3 0f 58 c1	 addss	 xmm0, xmm1
  004f6	f3 0f 11 44 24
	48		 movss	 DWORD PTR $T25[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c

; 236  : 		if (SqrMagnitude(TakeVectors(playerData->transform.position, curTransform->position)) <= attkDst) {

  004fc	f3 0f 10 44 24
	48		 movss	 xmm0, DWORD PTR $T25[rsp]
  00502	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR attkDst
  0050a	0f 2f c8	 comiss	 xmm1, xmm0
  0050d	0f 82 bd 02 00
	00		 jb	 $LN18@SceneUpdat

; 237  : 			isAgroed = agro[curEnemyIndex] >= minAgro;

  00513	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curEnemyIndex
  0051a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR agro
  00521	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  00526	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR minAgro
  0052d	72 0d		 jb	 SHORT $LN25@SceneUpdat
  0052f	c7 84 24 58 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv220[rsp], 1
  0053a	eb 0b		 jmp	 SHORT $LN26@SceneUpdat
$LN25@SceneUpdat:
  0053c	c7 84 24 58 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv220[rsp], 0
$LN26@SceneUpdat:
  00547	83 bc 24 58 02
	00 00 00	 cmp	 DWORD PTR tv220[rsp], 0
  0054f	75 0d		 jne	 SHORT $LN27@SceneUpdat
  00551	c7 84 24 5c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv222[rsp], 0
  0055c	eb 0b		 jmp	 SHORT $LN28@SceneUpdat
$LN27@SceneUpdat:
  0055e	c7 84 24 5c 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv222[rsp], 1
$LN28@SceneUpdat:
  00569	0f b6 84 24 5c
	02 00 00	 movzx	 eax, BYTE PTR tv222[rsp]
  00571	88 05 00 00 00
	00		 mov	 BYTE PTR isAgroed, al

; 238  : 			agroAnim = idle * !isAgroed + punch * isAgroed;

  00577	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR isAgroed
  0057e	85 c0		 test	 eax, eax
  00580	75 0d		 jne	 SHORT $LN29@SceneUpdat
  00582	c7 84 24 60 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv258[rsp], 1
  0058d	eb 0b		 jmp	 SHORT $LN30@SceneUpdat
$LN29@SceneUpdat:
  0058f	c7 84 24 60 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv258[rsp], 0
$LN30@SceneUpdat:
  0059a	6b 84 24 60 02
	00 00 00	 imul	 eax, DWORD PTR tv258[rsp], 0
  005a2	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR isAgroed
  005a9	6b c9 07	 imul	 ecx, ecx, 7
  005ac	03 c1		 add	 eax, ecx
  005ae	89 05 00 00 00
	00		 mov	 DWORD PTR agroAnim, eax

; 239  : 			if (isAgroed && curAnim->animating != agroAnim) {

  005b4	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR isAgroed
  005bb	85 c0		 test	 eax, eax
  005bd	0f 84 f6 01 00
	00		 je	 $LN19@SceneUpdat
  005c3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAnim
  005ca	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  005ce	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR agroAnim
  005d4	0f 84 df 01 00
	00		 je	 $LN19@SceneUpdat

; 240  : 				ResetAnim(curAnim);

  005da	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAnim
  005e1	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR anim$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\animations.h

; 27   : 	anim->curAnimFrame = -1;

  005e9	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  005ee	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR anim$[rsp]
  005f6	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c

; 241  : 				SetColliderAABB(enemyAttkColPts[curEnemyIndex], enemyAttkColOffsets, data);

  005fa	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curEnemyIndex
  00601	48 6b c0 10	 imul	 rax, rax, 16
  00605	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyAttkColPts
  0060c	48 03 c8	 add	 rcx, rax
  0060f	48 8b c1	 mov	 rax, rcx
  00612	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR data
  00619	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:enemyAttkColOffsets
  00620	48 8b c8	 mov	 rcx, rax
  00623	e8 00 00 00 00	 call	 SetColliderAABB

; 242  : 				opAttkEnts[curEnemyIndex] = (opAttkNodes[curEnemyIndex] = CreateCollider2(enemyAttkColPts[curEnemyIndex], enemyAttackTag, dontColLayer))->entity;

  00628	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curEnemyIndex
  0062f	48 6b c0 10	 imul	 rax, rax, 16
  00633	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyAttkColPts
  0063a	48 03 c8	 add	 rcx, rax
  0063d	48 8b c1	 mov	 rax, rcx
  00640	41 b8 02 00 00
	00		 mov	 r8d, 2
  00646	ba 05 00 00 00	 mov	 edx, 5
  0064b	48 8b c8	 mov	 rcx, rax
  0064e	e8 00 00 00 00	 call	 CreateCollider2
  00653	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR tv281[rsp], rax
  0065b	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curEnemyIndex
  00662	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR opAttkNodes
  00669	48 8b 94 24 68
	02 00 00	 mov	 rdx, QWORD PTR tv281[rsp]
  00671	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx
  00675	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curEnemyIndex
  0067c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR opAttkEnts
  00683	48 8b 94 24 68
	02 00 00	 mov	 rdx, QWORD PTR tv281[rsp]
  0068b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0068e	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx

; 244  : 				for (uint i = 0; i < NUM_VEC2_AABB; i++) MoveScaleMesh(debugMesh[i].meshLocation, AddVectors(data->transform.position, VectorMult(data->transform.scale, enemyAttkColOffsets[i])), debugBoxSize);

  00692	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$20[rsp], 0
  0069a	eb 0a		 jmp	 SHORT $LN10@SceneUpdat
$LN8@SceneUpdat:
  0069c	8b 44 24 28	 mov	 eax, DWORD PTR i$20[rsp]
  006a0	ff c0		 inc	 eax
  006a2	89 44 24 28	 mov	 DWORD PTR i$20[rsp], eax
$LN10@SceneUpdat:
  006a6	83 7c 24 28 02	 cmp	 DWORD PTR i$20[rsp], 2
  006ab	0f 83 08 01 00
	00		 jae	 $LN9@SceneUpdat
  006b1	8b 44 24 28	 mov	 eax, DWORD PTR i$20[rsp]
  006b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:enemyAttkColOffsets
  006bc	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  006c0	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR b$[rsp], rax
  006c8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR data
  006cf	48 8b 40 04	 mov	 rax, QWORD PTR [rax+4]
  006d3	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR a$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 107  : 	_this.x = a.x * b.x;

  006db	f3 0f 10 84 24
	e8 00 00 00	 movss	 xmm0, DWORD PTR a$[rsp]
  006e4	f3 0f 59 84 24
	08 01 00 00	 mulss	 xmm0, DWORD PTR b$[rsp]
  006ed	f3 0f 11 84 24
	28 01 00 00	 movss	 DWORD PTR _this$34[rsp], xmm0

; 108  : 	_this.y = a.y * b.y;

  006f6	f3 0f 10 84 24
	ec 00 00 00	 movss	 xmm0, DWORD PTR a$[rsp+4]
  006ff	f3 0f 59 84 24
	0c 01 00 00	 mulss	 xmm0, DWORD PTR b$[rsp+4]
  00708	f3 0f 11 84 24
	2c 01 00 00	 movss	 DWORD PTR _this$34[rsp+4], xmm0

; 109  : 	return _this;

  00711	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR _this$34[rsp]
  00719	48 89 44 24 50	 mov	 QWORD PTR $T26[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c

; 244  : 				for (uint i = 0; i < NUM_VEC2_AABB; i++) MoveScaleMesh(debugMesh[i].meshLocation, AddVectors(data->transform.position, VectorMult(data->transform.scale, enemyAttkColOffsets[i])), debugBoxSize);

  0071e	48 8b 44 24 50	 mov	 rax, QWORD PTR $T26[rsp]
  00723	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR rhs$[rsp], rax
  0072b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR data
  00732	48 8b 40 0c	 mov	 rax, QWORD PTR [rax+12]
  00736	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR lhs$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 35   : 	_this.x = lhs.x + rhs.x;

  0073e	f3 0f 10 84 24
	88 00 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp]
  00747	f3 0f 58 84 24
	a8 00 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp]
  00750	f3 0f 11 84 24
	c8 00 00 00	 movss	 DWORD PTR _this$33[rsp], xmm0

; 36   : 	_this.y = lhs.y + rhs.y;

  00759	f3 0f 10 84 24
	8c 00 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  00762	f3 0f 58 84 24
	ac 00 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp+4]
  0076b	f3 0f 11 84 24
	cc 00 00 00	 movss	 DWORD PTR _this$33[rsp+4], xmm0

; 37   : 	return _this;

  00774	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR _this$33[rsp]
  0077c	48 89 44 24 58	 mov	 QWORD PTR $T27[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c

; 244  : 				for (uint i = 0; i < NUM_VEC2_AABB; i++) MoveScaleMesh(debugMesh[i].meshLocation, AddVectors(data->transform.position, VectorMult(data->transform.scale, enemyAttkColOffsets[i])), debugBoxSize);

  00781	48 8b 44 24 58	 mov	 rax, QWORD PTR $T27[rsp]
  00786	8b 4c 24 28	 mov	 ecx, DWORD PTR i$20[rsp]
  0078a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:debugMesh
  00791	48 89 94 24 70
	02 00 00	 mov	 QWORD PTR tv460[rsp], rdx
  00799	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR debugBoxSize
  007a0	48 8b d0	 mov	 rdx, rax
  007a3	48 8b 84 24 70
	02 00 00	 mov	 rax, QWORD PTR tv460[rsp]
  007ab	8b 0c c8	 mov	 ecx, DWORD PTR [rax+rcx*8]
  007ae	e8 00 00 00 00	 call	 MoveScaleMesh
  007b3	90		 npad	 1
  007b4	e9 e3 fe ff ff	 jmp	 $LN8@SceneUpdat
$LN9@SceneUpdat:
$LN19@SceneUpdat:

; 245  : #endif
; 246  : 			}
; 247  : 			curAnim->animating = agroAnim;

  007b9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAnim
  007c0	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR agroAnim
  007c7	66 89 48 08	 mov	 WORD PTR [rax+8], cx

; 248  : 			continue;

  007cb	e9 7a f8 ff ff	 jmp	 $LN2@SceneUpdat
$LN18@SceneUpdat:

; 249  : 		}
; 250  : 		curAnim->animating = walk;

  007d0	b8 08 00 00 00	 mov	 eax, 8
  007d5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curAnim
  007dc	66 89 41 08	 mov	 WORD PTR [rcx+8], ax

; 251  : 		directionX = BoolToSign(playerData->transform.position.x < curTransform->position.x);

  007e0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  007e7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR playerData
  007ee	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [rax+12]
  007f3	0f 2f 41 0c	 comiss	 xmm0, DWORD PTR [rcx+12]
  007f7	76 0d		 jbe	 SHORT $LN31@SceneUpdat
  007f9	c7 84 24 78 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv315[rsp], 1
  00804	eb 0b		 jmp	 SHORT $LN32@SceneUpdat
$LN31@SceneUpdat:
  00806	c7 84 24 78 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv315[rsp], 0
$LN32@SceneUpdat:
  00811	83 bc 24 78 02
	00 00 00	 cmp	 DWORD PTR tv315[rsp], 0
  00819	75 0a		 jne	 SHORT $LN33@SceneUpdat
  0081b	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR $T28[rsp], 0
  00823	eb 08		 jmp	 SHORT $LN34@SceneUpdat
$LN33@SceneUpdat:
  00825	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR $T28[rsp], 1
$LN34@SceneUpdat:
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h

; 99   : 	return b * 2.f - 1.f;

  0082d	0f b6 44 24 60	 movzx	 eax, BYTE PTR $T28[rsp]
  00832	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00836	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0083e	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00846	f3 0f 11 44 24
	64		 movss	 DWORD PTR $T29[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c

; 251  : 		directionX = BoolToSign(playerData->transform.position.x < curTransform->position.x);

  0084c	f3 0f 10 44 24
	64		 movss	 xmm0, DWORD PTR $T29[rsp]
  00852	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR directionX, xmm0

; 252  : 		forceToAdd = changeInPos * -directionX;

  0085a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR directionX
  00862	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00869	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR changeInPos
  00871	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00875	0f 28 c1	 movaps	 xmm0, xmm1
  00878	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR forceToAdd, xmm0

; 254  : 		AddForceScaleLimitVelX(*data, *curTransform, forceToAdd * (FAbs(data->velocity.x + forceToAdd) < enemySpeed), directionX * origEnemyScale.x, enemySpeed);

  00880	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR data
  00887	f3 0f 10 40 48	 movss	 xmm0, DWORD PTR [rax+72]
  0088c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR forceToAdd
  00894	f3 0f 11 44 24
	78		 movss	 DWORD PTR orig$[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h

; 19   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  0089a	f3 0f 10 44 24
	78		 movss	 xmm0, DWORD PTR orig$[rsp]
  008a0	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  008a7	72 0d		 jb	 SHORT $LN61@SceneUpdat
  008a9	c7 84 24 7c 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv377[rsp], 1
  008b4	eb 0b		 jmp	 SHORT $LN62@SceneUpdat
$LN61@SceneUpdat:
  008b6	c7 84 24 7c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv377[rsp], 0
$LN62@SceneUpdat:
  008c1	f3 0f 2a 84 24
	7c 02 00 00	 cvtsi2ss xmm0, DWORD PTR tv377[rsp]
  008ca	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  008d2	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  008da	f3 0f 10 4c 24
	78		 movss	 xmm1, DWORD PTR orig$[rsp]
  008e0	f3 0f 59 c8	 mulss	 xmm1, xmm0
  008e4	0f 28 c1	 movaps	 xmm0, xmm1
  008e7	f3 0f 11 44 24
	68		 movss	 DWORD PTR $T30[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c

; 254  : 		AddForceScaleLimitVelX(*data, *curTransform, forceToAdd * (FAbs(data->velocity.x + forceToAdd) < enemySpeed), directionX * origEnemyScale.x, enemySpeed);

  008ed	f3 0f 10 44 24
	68		 movss	 xmm0, DWORD PTR $T30[rsp]
  008f3	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR enemySpeed
  008fb	0f 2f c8	 comiss	 xmm1, xmm0
  008fe	76 0d		 jbe	 SHORT $LN35@SceneUpdat
  00900	c7 84 24 80 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv328[rsp], 1
  0090b	eb 0b		 jmp	 SHORT $LN36@SceneUpdat
$LN35@SceneUpdat:
  0090d	c7 84 24 80 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv328[rsp], 0
$LN36@SceneUpdat:
  00918	f3 0f 2a 84 24
	80 02 00 00	 cvtsi2ss xmm0, DWORD PTR tv328[rsp]
  00921	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR forceToAdd
  00929	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0092d	0f 28 c1	 movaps	 xmm0, xmm1
  00930	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR data
  00937	f3 0f 10 48 48	 movss	 xmm1, DWORD PTR [rax+72]
  0093c	f3 0f 58 c8	 addss	 xmm1, xmm0
  00940	0f 28 c1	 movaps	 xmm0, xmm1
  00943	f3 0f 11 44 24
	2c		 movss	 DWORD PTR resultantVel$21[rsp], xmm0
  00949	f3 0f 10 44 24
	2c		 movss	 xmm0, DWORD PTR resultantVel$21[rsp]
  0094f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00956	76 0d		 jbe	 SHORT $LN37@SceneUpdat
  00958	c7 84 24 84 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv339[rsp], 1
  00963	eb 0b		 jmp	 SHORT $LN38@SceneUpdat
$LN37@SceneUpdat:
  00965	c7 84 24 84 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv339[rsp], 0
$LN38@SceneUpdat:
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h

; 19   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  00970	f3 0f 10 44 24
	2c		 movss	 xmm0, DWORD PTR resultantVel$21[rsp]
  00976	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0097d	72 0d		 jb	 SHORT $LN65@SceneUpdat
  0097f	c7 84 24 88 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv383[rsp], 1
  0098a	eb 0b		 jmp	 SHORT $LN66@SceneUpdat
$LN65@SceneUpdat:
  0098c	c7 84 24 88 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv383[rsp], 0
$LN66@SceneUpdat:
  00997	f3 0f 2a 84 24
	88 02 00 00	 cvtsi2ss xmm0, DWORD PTR tv383[rsp]
  009a0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  009a8	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  009b0	f3 0f 10 4c 24
	2c		 movss	 xmm1, DWORD PTR resultantVel$21[rsp]
  009b6	f3 0f 59 c8	 mulss	 xmm1, xmm0
  009ba	0f 28 c1	 movaps	 xmm0, xmm1
  009bd	f3 0f 11 44 24
	6c		 movss	 DWORD PTR $T31[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c

; 254  : 		AddForceScaleLimitVelX(*data, *curTransform, forceToAdd * (FAbs(data->velocity.x + forceToAdd) < enemySpeed), directionX * origEnemyScale.x, enemySpeed);

  009c3	f3 0f 10 44 24
	6c		 movss	 xmm0, DWORD PTR $T31[rsp]
  009c9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR enemySpeed
  009d1	e8 00 00 00 00	 call	 FMin
  009d6	f3 0f 2a 8c 24
	84 02 00 00	 cvtsi2ss xmm1, DWORD PTR tv339[rsp]
  009df	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  009e7	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f800000
  009ef	f3 0f 59 c1	 mulss	 xmm0, xmm1
  009f3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR data
  009fa	f3 0f 11 40 48	 movss	 DWORD PTR [rax+72], xmm0
  009ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR directionX
  00a07	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR origEnemyScale
  00a0f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  00a16	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  00a1b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  00a22	c6 40 02 00	 mov	 BYTE PTR [rax+2], 0
  00a26	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  00a2d	c6 00 01	 mov	 BYTE PTR [rax], 1
  00a30	c6 05 00 00 00
	00 01		 mov	 BYTE PTR shouldDraw, 1

; 255  : 		//printf("moved entity %d by %f, player is %s the enemy\n", curEnemyIndex, FMin(FAbs(resultantVel), enemySpeed) * ((resultantVel > .0f) * 2.0f - 1.0f), playerData->transform.position.x < curTransform->position.x ? "to the left of" : "to the right of");
; 256  : 	}

  00a37	e9 0e f6 ff ff	 jmp	 $LN2@SceneUpdat
$LN3@SceneUpdat:

; 257  : 	if (resetTime) {

  00a3c	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR resetTime
  00a43	85 c0		 test	 eax, eax
  00a45	74 2b		 je	 SHORT $LN20@SceneUpdat

; 258  : 		SetElapsedTime(.0f);

  00a47	0f 57 c0	 xorps	 xmm0, xmm0
  00a4a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR elapsedTime, xmm0
  00a52	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@MHMCDAGK@u_elapsedT@
  00a59	e8 00 00 00 00	 call	 GetLocVal2
  00a5e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR elapsedTime
  00a66	8b c8		 mov	 ecx, eax
  00a68	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewUniform1f
  00a6f	ff 10		 call	 QWORD PTR [rax]
  00a71	90		 npad	 1
$LN20@SceneUpdat:

; 259  : 	}
; 260  : 	resetTime = false;

  00a72	c6 05 00 00 00
	00 00		 mov	 BYTE PTR resetTime, 0

; 261  : 	if (!(dissolved = elapsedTime > MAX_DISSOLVE_ET) && updateTime) {

  00a79	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR elapsedTime
  00a81	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@40800000
  00a88	76 0d		 jbe	 SHORT $LN39@SceneUpdat
  00a8a	c7 84 24 8c 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv356[rsp], 1
  00a95	eb 0b		 jmp	 SHORT $LN40@SceneUpdat
$LN39@SceneUpdat:
  00a97	c7 84 24 8c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv356[rsp], 0
$LN40@SceneUpdat:
  00aa2	83 bc 24 8c 02
	00 00 00	 cmp	 DWORD PTR tv356[rsp], 0
  00aaa	75 0d		 jne	 SHORT $LN41@SceneUpdat
  00aac	c7 84 24 90 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv358[rsp], 0
  00ab7	eb 0b		 jmp	 SHORT $LN42@SceneUpdat
$LN41@SceneUpdat:
  00ab9	c7 84 24 90 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv358[rsp], 1
$LN42@SceneUpdat:
  00ac4	0f b6 84 24 90
	02 00 00	 movzx	 eax, BYTE PTR tv358[rsp]
  00acc	88 05 00 00 00
	00		 mov	 BYTE PTR dissolved, al
  00ad2	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR dissolved
  00ad9	85 c0		 test	 eax, eax
  00adb	0f 85 98 00 00
	00		 jne	 $LN21@SceneUpdat
  00ae1	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR updateTime
  00ae8	85 c0		 test	 eax, eax
  00aea	0f 84 89 00 00
	00		 je	 $LN21@SceneUpdat
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h

; 343  : 	QueryPerformanceCounter(&cTime);

  00af0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cTime
  00af7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 344  : 	return (float)((cTime.QuadPart - pTime.QuadPart) * 1000000 / frequency) / 1000000.0f * timeScale;

  00afd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR pTime
  00b04	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR cTime
  00b0b	48 2b c8	 sub	 rcx, rax
  00b0e	48 8b c1	 mov	 rax, rcx
  00b11	48 69 c0 40 42
	0f 00		 imul	 rax, rax, 1000000	; 000f4240H
  00b18	48 99		 cdq
  00b1a	48 f7 3d 00 00
	00 00		 idiv	 QWORD PTR frequency
  00b21	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  00b26	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@49742400
  00b2e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR timeScale
  00b36	f3 0f 11 44 24
	70		 movss	 DWORD PTR $T32[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c

; 262  : 		glUniform1f(GetLocVal2("u_elapsedT"), elapsedTime += deltaTime());

  00b3c	f3 0f 10 44 24
	70		 movss	 xmm0, DWORD PTR $T32[rsp]
  00b42	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR elapsedTime
  00b4a	f3 0f 58 c8	 addss	 xmm1, xmm0
  00b4e	0f 28 c1	 movaps	 xmm0, xmm1
  00b51	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR elapsedTime, xmm0
  00b59	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@MHMCDAGK@u_elapsedT@
  00b60	e8 00 00 00 00	 call	 GetLocVal2
  00b65	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR elapsedTime
  00b6d	8b c8		 mov	 ecx, eax
  00b6f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewUniform1f
  00b76	ff 10		 call	 QWORD PTR [rax]
  00b78	90		 npad	 1
$LN21@SceneUpdat:

; 263  : 	}
; 264  : 	updateTime = false;

  00b79	c6 05 00 00 00
	00 00		 mov	 BYTE PTR updateTime, 0

; 265  : }

  00b80	48 8b cc	 mov	 rcx, rsp
  00b83	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:SceneUpdate$rtcFrameData
  00b8a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00b8f	48 81 c4 a0 02
	00 00		 add	 rsp, 672		; 000002a0H
  00b96	5f		 pop	 rdi
  00b97	c3		 ret	 0
SceneUpdate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\scene 1.c
_TEXT	SEGMENT
curEntity$ = 32
data$ = 40
i$ = 48
scale$ = 72
pos$ = 104
points$6 = 136
tv67 = 176
tv79 = 184
tv131 = 192
tv93 = 200
__$ArrayPad$ = 208
TerrainInit PROC

; 156  : void TerrainInit() {

$LN6:
  00000	40 57		 push	 rdi
  00002	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  00009	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0000e	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00033	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 157  : 	//TODO: turn this into a func.
; 158  : 	DefaultTerrain(terrains, terrainNodes, noOfTerrains, zeroVector, -.27f, -.467f, .27f, .366f, 1.0f, false, 1.0f, groundLayer, SHADER_TERRAIN_ID, (float)i * .5205f, -.829f, 1.0f, 1.0f, groundTag, TERRAIN_TEXTURE_UNIT_INDEX, "images/terrain/0.png", TERRAIN_TEXTURE_ID, .182243f, .2383178f, .2857143f, .4214286f);

  00038	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfTerrains
  0003e	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv67[rsp], rax
  00046	b8 08 00 00 00	 mov	 eax, 8
  0004b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv67[rsp]
  00053	48 f7 e1	 mul	 rcx
  00056	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  0005d	48 0f 42 c1	 cmovb	 rax, rcx
  00061	48 8b c8	 mov	 rcx, rax
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0006a	48 89 05 00 00
	00 00		 mov	 QWORD PTR terrains, rax
  00071	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR curEntity$[rsp], 0
  0007a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfTerrains
  00080	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv79[rsp], rax
  00088	b8 08 00 00 00	 mov	 eax, 8
  0008d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv79[rsp]
  00095	48 f7 e1	 mul	 rcx
  00098	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  0009f	48 0f 42 c1	 cmovb	 rax, rcx
  000a3	48 8b c8	 mov	 rcx, rax
  000a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000ac	48 89 05 00 00
	00 00		 mov	 QWORD PTR terrainNodes, rax
  000b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000bb	f3 0f 11 44 24
	48		 movss	 DWORD PTR scale$[rsp], xmm0
  000c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000c9	f3 0f 11 44 24
	4c		 movss	 DWORD PTR scale$[rsp+4], xmm0
  000cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf543958
  000d7	f3 0f 11 44 24
	6c		 movss	 DWORD PTR pos$[rsp+4], xmm0
  000dd	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000e5	eb 0a		 jmp	 SHORT $LN4@TerrainIni
$LN2@TerrainIni:
  000e7	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  000eb	ff c0		 inc	 eax
  000ed	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN4@TerrainIni:
  000f1	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfTerrains
  000f7	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  000fb	0f 83 e3 02 00
	00		 jae	 $LN3@TerrainIni
  00101	ba 58 00 00 00	 mov	 edx, 88			; 00000058H
  00106	b9 01 00 00 00	 mov	 ecx, 1
  0010b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  00111	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv131[rsp], rax
  00119	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  0011e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00124	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv93[rsp], rax
  0012c	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00130	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR terrains
  00137	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR tv93[rsp]
  0013f	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx
  00143	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR tv93[rsp]
  0014b	48 89 44 24 20	 mov	 QWORD PTR curEntity$[rsp], rax
  00150	48 8b 44 24 20	 mov	 rax, QWORD PTR curEntity$[rsp]
  00155	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv131[rsp]
  0015d	48 89 08	 mov	 QWORD PTR [rax], rcx
  00160	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR tv131[rsp]
  00168	48 89 44 24 28	 mov	 QWORD PTR data$[rsp], rax
  0016d	b9 18 00 00 00	 mov	 ecx, 24
  00172	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00178	8b 4c 24 30	 mov	 ecx, DWORD PTR i$[rsp]
  0017c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR terrainNodes
  00183	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
  00187	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  0018c	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0
  00194	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  00199	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR zeroVector
  001a0	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx
  001a4	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  001a9	0f 57 c0	 xorps	 xmm0, xmm0
  001ac	f3 0f 11 40 30	 movss	 DWORD PTR [rax+48], xmm0
  001b1	e8 00 00 00 00	 call	 CreateQuad
  001b6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR data$[rsp]
  001bb	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
  001bf	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  001c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001cc	f3 0f 11 40 34	 movss	 DWORD PTR [rax+52], xmm0
  001d1	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  001d6	c6 40 51 00	 mov	 BYTE PTR [rax+81], 0
  001da	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  001df	c6 40 50 01	 mov	 BYTE PTR [rax+80], 1
  001e3	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  001e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001f0	f3 0f 11 40 40	 movss	 DWORD PTR [rax+64], xmm0
  001f5	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  001fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00202	f3 0f 5e 40 40	 divss	 xmm0, DWORD PTR [rax+64]
  00207	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  0020c	f3 0f 11 40 44	 movss	 DWORD PTR [rax+68], xmm0
  00211	48 8b 44 24 20	 mov	 rax, QWORD PTR curEntity$[rsp]
  00216	c7 40 08 03 00
	00 00		 mov	 DWORD PTR [rax+8], 3
  0021d	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  00222	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR zeroBVector
  00229	66 89 08	 mov	 WORD PTR [rax], cx
  0022c	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  00231	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR oneBVector
  00238	66 89 48 02	 mov	 WORD PTR [rax+2], cx
  0023c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3a9de9
  00244	f3 0f 11 84 24
	88 00 00 00	 movss	 DWORD PTR points$6[rsp], xmm0
  0024d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e740995
  00255	f3 0f 11 84 24
	8c 00 00 00	 movss	 DWORD PTR points$6[rsp+4], xmm0
  0025e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e924925
  00266	f3 0f 11 84 24
	90 00 00 00	 movss	 DWORD PTR points$6[rsp+8], xmm0
  0026f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed7c57d
  00277	f3 0f 11 84 24
	94 00 00 00	 movss	 DWORD PTR points$6[rsp+12], xmm0
  00280	4c 8d 84 24 88
	00 00 00	 lea	 r8, QWORD PTR points$6[rsp]
  00288	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  00290	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  00295	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00299	e8 00 00 00 00	 call	 DefaultAtlasMesh
  0029e	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  002a2	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  002a7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f053f7d
  002af	f3 0f 11 44 24
	68		 movss	 DWORD PTR pos$[rsp], xmm0
  002b5	48 8b 44 24 20	 mov	 rax, QWORD PTR curEntity$[rsp]
  002ba	c7 40 24 03 00
	00 00		 mov	 DWORD PTR [rax+36], 3
  002c1	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  002c6	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  002ca	4c 8b 44 24 48	 mov	 r8, QWORD PTR scale$[rsp]
  002cf	48 8b 54 24 68	 mov	 rdx, QWORD PTR pos$[rsp]
  002d4	8b 08		 mov	 ecx, DWORD PTR [rax]
  002d6	e8 00 00 00 00	 call	 MoveScaleMesh
  002db	41 b8 c2 84 00
	00		 mov	 r8d, 33986		; 000084c2H
  002e1	ba 02 00 00 00	 mov	 edx, 2
  002e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@CMJMJICG@images?1terrain?10?4png@
  002ed	e8 00 00 00 00	 call	 InitSingleTexture2
  002f2	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  002f7	f3 0f 10 44 24
	68		 movss	 xmm0, DWORD PTR pos$[rsp]
  002fd	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0
  00302	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  00307	f3 0f 10 44 24
	6c		 movss	 xmm0, DWORD PTR pos$[rsp+4]
  0030d	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0
  00312	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  00317	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0031f	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  00324	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  00329	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00331	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0
  00336	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  0033b	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR oneBVector
  00342	66 89 08	 mov	 WORD PTR [rax], cx
  00345	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  0034a	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR zeroBVector
  00351	66 89 48 02	 mov	 WORD PTR [rax+2], cx
  00355	c6 05 00 00 00
	00 01		 mov	 BYTE PTR shouldDraw, 1
  0035c	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  00361	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pos$[rsp]
  00366	48 89 48 14	 mov	 QWORD PTR [rax+20], rcx
  0036a	48 8b 44 24 20	 mov	 rax, QWORD PTR curEntity$[rsp]
  0036f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8a3d71
  00377	f3 0f 11 40 2c	 movss	 DWORD PTR [rax+44], xmm0
  0037c	48 8b 44 24 20	 mov	 rax, QWORD PTR curEntity$[rsp]
  00381	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beef1aa0
  00389	f3 0f 11 40 30	 movss	 DWORD PTR [rax+48], xmm0
  0038e	b8 08 00 00 00	 mov	 eax, 8
  00393	48 6b c0 01	 imul	 rax, rax, 1
  00397	48 8b 4c 24 20	 mov	 rcx, QWORD PTR curEntity$[rsp]
  0039c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8a3d71
  003a4	f3 0f 11 44 01
	2c		 movss	 DWORD PTR [rcx+rax+44], xmm0
  003aa	b8 08 00 00 00	 mov	 eax, 8
  003af	48 6b c0 01	 imul	 rax, rax, 1
  003b3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR curEntity$[rsp]
  003b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ebb645a
  003c0	f3 0f 11 44 01
	30		 movss	 DWORD PTR [rcx+rax+48], xmm0
  003c6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR curEntity$[rsp]
  003cb	e8 00 00 00 00	 call	 SubscribeEntity_Without_Scale
  003d0	8b 4c 24 30	 mov	 ecx, DWORD PTR i$[rsp]
  003d4	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR terrainNodes
  003db	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
  003df	e9 03 fd ff ff	 jmp	 $LN2@TerrainIni
$LN3@TerrainIni:

; 159  : 	/*
; 160  : 	(*terrains)->physicsData->animator;
; 161  : 	(*terrains)->physicsData->bIsStatic;
; 162  : 	(*terrains)->physicsData->bIsTrigger;
; 163  : 	(*terrains)->physicsData->frictionCoef;
; 164  : 	(*terrains)->physicsData->gravityMultiplier;
; 165  : 	(*terrains)->physicsData->invMass;
; 166  : 	(*terrains)->physicsData->mass;
; 167  : 	(*terrains)->physicsData->mesh;
; 168  : 	(*terrains)->physicsData->restitutionCoef;
; 169  : 	(*terrains)->physicsData->solvedCol;
; 170  : 	(*terrains)->physicsData->transform.matchesScale;
; 171  : 	(*terrains)->physicsData->transform.pastPos;
; 172  : 	(*terrains)->physicsData->transform.position;
; 173  : 	(*terrains)->physicsData->transform.scale;
; 174  : 	(*terrains)->physicsData->transform.updateVerticies;
; 175  : 	(*terrains)->physicsData->velocity;*/
; 176  : 	/*for (uint i = 0; i < noOfTerrains; i++) {
; 177  : 		printf("%f, %f\n", Deconstruct(terrains[i]->physicsData->transform.position));
; 178  : 	}*/
; 179  : }

  003e4	48 8b cc	 mov	 rcx, rsp
  003e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:TerrainInit$rtcFrameData
  003ee	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  003f3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  003fb	48 33 cc	 xor	 rcx, rsp
  003fe	e8 00 00 00 00	 call	 __security_check_cookie
  00403	48 81 c4 e0 00
	00 00		 add	 rsp, 224		; 000000e0H
  0040a	5f		 pop	 rdi
  0040b	c3		 ret	 0
TerrainInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h
;	COMDAT RandInt
_TEXT	SEGMENT
tv64 = 32
tv66 = 40
min$ = 64
max$ = 72
RandInt	PROC						; COMDAT

; 379  : inline int RandInt(int min, int max) {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	57		 push	 rdi
  00009	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD0D2CA2_main@h
  00014	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 380  : 	return (int)(min + (max - min) * ((double)rand() / (double)RAND_MAX));

  00019	f2 0f 2a 44 24
	40		 cvtsi2sd xmm0, DWORD PTR min$[rsp]
  0001f	f2 0f 11 44 24
	20		 movsd	 QWORD PTR tv64[rsp], xmm0
  00025	8b 44 24 40	 mov	 eax, DWORD PTR min$[rsp]
  00029	8b 4c 24 48	 mov	 ecx, DWORD PTR max$[rsp]
  0002d	2b c8		 sub	 ecx, eax
  0002f	8b c1		 mov	 eax, ecx
  00031	f2 0f 2a c8	 cvtsi2sd xmm1, eax
  00035	f2 0f 11 4c 24
	28		 movsd	 QWORD PTR tv66[rsp], xmm1
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  00041	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00045	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  0004d	f2 0f 10 4c 24
	28		 movsd	 xmm1, QWORD PTR tv66[rsp]
  00053	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00057	0f 28 c1	 movaps	 xmm0, xmm1
  0005a	f2 0f 10 4c 24
	20		 movsd	 xmm1, QWORD PTR tv64[rsp]
  00060	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00064	0f 28 c1	 movaps	 xmm0, xmm1
  00067	f2 0f 2c c0	 cvttsd2si eax, xmm0

; 381  : }

  0006b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
RandInt	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h
;	COMDAT RandFloat
_TEXT	SEGMENT
tv65 = 48
min$ = 80
max$ = 88
RandFloat PROC						; COMDAT

; 382  : inline float RandFloat(float min, float max) {

$LN3:
  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  0000c	57		 push	 rdi
  0000d	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD0D2CA2_main@h
  00018	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 383  : 	return min + (max - min) * (float)rand() / (float)RAND_MAX;

  0001d	f3 0f 10 44 24
	58		 movss	 xmm0, DWORD PTR max$[rsp]
  00023	f3 0f 5c 44 24
	50		 subss	 xmm0, DWORD PTR min$[rsp]
  00029	f3 0f 11 44 24
	30		 movss	 DWORD PTR tv65[rsp], xmm0
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  00035	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00039	f3 0f 10 4c 24
	30		 movss	 xmm1, DWORD PTR tv65[rsp]
  0003f	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00043	0f 28 c1	 movaps	 xmm0, xmm1
  00046	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46fffe00
  0004e	f3 0f 10 4c 24
	50		 movss	 xmm1, DWORD PTR min$[rsp]
  00054	f3 0f 58 c8	 addss	 xmm1, xmm0
  00058	0f 28 c1	 movaps	 xmm0, xmm1

; 384  : }

  0005b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
RandFloat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h
;	COMDAT DefaultAnimTexCoordPts
_TEXT	SEGMENT
numFrames$ = 32
sectionLen$ = 36
points$ = 40
i$1 = 48
pointsArr$ = 80
startPtX$ = 88
endPtX$ = 96
bottom$ = 104
top$ = 112
animIndex$ = 120
noOfFrames$ = 128
DefaultAnimTexCoordPts PROC				; COMDAT

; 389  : inline void DefaultAnimTexCoordPts(Vector2*** pointsArr, float startPtX, float endPtX, float bottom, float top, int animIndex, ushort *noOfFrames) {

$LN6:
  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00012	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00017	57		 push	 rdi
  00018	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD0D2CA2_main@h
  00023	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 390  : 	ushort numFrames = noOfFrames[animIndex];

  00028	48 63 44 24 78	 movsxd	 rax, DWORD PTR animIndex$[rsp]
  0002d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR noOfFrames$[rsp]
  00035	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00039	66 89 44 24 20	 mov	 WORD PTR numFrames$[rsp], ax

; 391  : 	float sectionLen = (endPtX - startPtX) / (float)numFrames;

  0003e	f3 0f 10 44 24
	60		 movss	 xmm0, DWORD PTR endPtX$[rsp]
  00044	f3 0f 5c 44 24
	58		 subss	 xmm0, DWORD PTR startPtX$[rsp]
  0004a	0f b7 44 24 20	 movzx	 eax, WORD PTR numFrames$[rsp]
  0004f	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00053	f3 0f 5e c1	 divss	 xmm0, xmm1
  00057	f3 0f 11 44 24
	24		 movss	 DWORD PTR sectionLen$[rsp], xmm0

; 392  : 	Vector2** points = pointsArr[animIndex];

  0005d	48 63 44 24 78	 movsxd	 rax, DWORD PTR animIndex$[rsp]
  00062	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pointsArr$[rsp]
  00067	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0006b	48 89 44 24 28	 mov	 QWORD PTR points$[rsp], rax

; 393  : 	for (int i = 0; i < numFrames; i++) {

  00070	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  00078	eb 0a		 jmp	 SHORT $LN4@DefaultAni
$LN2@DefaultAni:
  0007a	8b 44 24 30	 mov	 eax, DWORD PTR i$1[rsp]
  0007e	ff c0		 inc	 eax
  00080	89 44 24 30	 mov	 DWORD PTR i$1[rsp], eax
$LN4@DefaultAni:
  00084	0f b7 44 24 20	 movzx	 eax, WORD PTR numFrames$[rsp]
  00089	39 44 24 30	 cmp	 DWORD PTR i$1[rsp], eax
  0008d	0f 8d c7 00 00
	00		 jge	 $LN3@DefaultAni

; 394  : 		points[i][0].y = bottom;

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  00098	b9 08 00 00 00	 mov	 ecx, 8
  0009d	48 6b c9 00	 imul	 rcx, rcx, 0
  000a1	48 8b 54 24 28	 mov	 rdx, QWORD PTR points$[rsp]
  000a6	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  000aa	f3 0f 10 44 24
	68		 movss	 xmm0, DWORD PTR bottom$[rsp]
  000b0	f3 0f 11 44 08
	04		 movss	 DWORD PTR [rax+rcx+4], xmm0

; 395  : 		points[i][1].y = top;

  000b6	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  000bb	b9 08 00 00 00	 mov	 ecx, 8
  000c0	48 6b c9 01	 imul	 rcx, rcx, 1
  000c4	48 8b 54 24 28	 mov	 rdx, QWORD PTR points$[rsp]
  000c9	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  000cd	f3 0f 10 44 24
	70		 movss	 xmm0, DWORD PTR top$[rsp]
  000d3	f3 0f 11 44 08
	04		 movss	 DWORD PTR [rax+rcx+4], xmm0

; 396  : 		points[i][0].x = startPtX + sectionLen * (float)i;

  000d9	f3 0f 2a 44 24
	30		 cvtsi2ss xmm0, DWORD PTR i$1[rsp]
  000df	f3 0f 10 4c 24
	24		 movss	 xmm1, DWORD PTR sectionLen$[rsp]
  000e5	f3 0f 59 c8	 mulss	 xmm1, xmm0
  000e9	0f 28 c1	 movaps	 xmm0, xmm1
  000ec	f3 0f 10 4c 24
	58		 movss	 xmm1, DWORD PTR startPtX$[rsp]
  000f2	f3 0f 58 c8	 addss	 xmm1, xmm0
  000f6	0f 28 c1	 movaps	 xmm0, xmm1
  000f9	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  000fe	b9 08 00 00 00	 mov	 ecx, 8
  00103	48 6b c9 00	 imul	 rcx, rcx, 0
  00107	48 8b 54 24 28	 mov	 rdx, QWORD PTR points$[rsp]
  0010c	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00110	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 397  : 		points[i][1].x = startPtX + sectionLen * (float)(i + 1);

  00115	8b 44 24 30	 mov	 eax, DWORD PTR i$1[rsp]
  00119	ff c0		 inc	 eax
  0011b	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0011f	f3 0f 10 4c 24
	24		 movss	 xmm1, DWORD PTR sectionLen$[rsp]
  00125	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00129	0f 28 c1	 movaps	 xmm0, xmm1
  0012c	f3 0f 10 4c 24
	58		 movss	 xmm1, DWORD PTR startPtX$[rsp]
  00132	f3 0f 58 c8	 addss	 xmm1, xmm0
  00136	0f 28 c1	 movaps	 xmm0, xmm1
  00139	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  0013e	b9 08 00 00 00	 mov	 ecx, 8
  00143	48 6b c9 01	 imul	 rcx, rcx, 1
  00147	48 8b 54 24 28	 mov	 rdx, QWORD PTR points$[rsp]
  0014c	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00150	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 398  : 	}

  00155	e9 20 ff ff ff	 jmp	 $LN2@DefaultAni
$LN3@DefaultAni:

; 399  : }

  0015a	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0015e	5f		 pop	 rdi
  0015f	c3		 ret	 0
DefaultAnimTexCoordPts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h
;	COMDAT DefaultAnimTexCoordPts2
_TEXT	SEGMENT
numFrames$ = 32
points$ = 40
i$1 = 48
pointsArr$ = 80
startPtX$ = 88
endPtX$ = 96
bottom$ = 104
top$ = 112
animIndex$ = 120
noOfFrames$ = 128
sectionLen$ = 136
DefaultAnimTexCoordPts2 PROC				; COMDAT

; 400  : inline void DefaultAnimTexCoordPts2(Vector2*** pointsArr, float startPtX, float endPtX, float bottom, float top, int animIndex, ushort *noOfFrames, float sectionLen) {

$LN6:
  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00012	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00017	57		 push	 rdi
  00018	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD0D2CA2_main@h
  00023	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 401  : 	ushort numFrames = noOfFrames[animIndex];

  00028	48 63 44 24 78	 movsxd	 rax, DWORD PTR animIndex$[rsp]
  0002d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR noOfFrames$[rsp]
  00035	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00039	66 89 44 24 20	 mov	 WORD PTR numFrames$[rsp], ax

; 402  : 	Vector2** points = pointsArr[animIndex];

  0003e	48 63 44 24 78	 movsxd	 rax, DWORD PTR animIndex$[rsp]
  00043	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pointsArr$[rsp]
  00048	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0004c	48 89 44 24 28	 mov	 QWORD PTR points$[rsp], rax

; 403  : 	for (int i = 0; i < numFrames; i++) {

  00051	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  00059	eb 0a		 jmp	 SHORT $LN4@DefaultAni
$LN2@DefaultAni:
  0005b	8b 44 24 30	 mov	 eax, DWORD PTR i$1[rsp]
  0005f	ff c0		 inc	 eax
  00061	89 44 24 30	 mov	 DWORD PTR i$1[rsp], eax
$LN4@DefaultAni:
  00065	0f b7 44 24 20	 movzx	 eax, WORD PTR numFrames$[rsp]
  0006a	39 44 24 30	 cmp	 DWORD PTR i$1[rsp], eax
  0006e	0f 8d cd 00 00
	00		 jge	 $LN3@DefaultAni

; 404  : 		points[i][0].y = bottom;

  00074	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  00079	b9 08 00 00 00	 mov	 ecx, 8
  0007e	48 6b c9 00	 imul	 rcx, rcx, 0
  00082	48 8b 54 24 28	 mov	 rdx, QWORD PTR points$[rsp]
  00087	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0008b	f3 0f 10 44 24
	68		 movss	 xmm0, DWORD PTR bottom$[rsp]
  00091	f3 0f 11 44 08
	04		 movss	 DWORD PTR [rax+rcx+4], xmm0

; 405  : 		points[i][1].y = top;

  00097	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  0009c	b9 08 00 00 00	 mov	 ecx, 8
  000a1	48 6b c9 01	 imul	 rcx, rcx, 1
  000a5	48 8b 54 24 28	 mov	 rdx, QWORD PTR points$[rsp]
  000aa	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  000ae	f3 0f 10 44 24
	70		 movss	 xmm0, DWORD PTR top$[rsp]
  000b4	f3 0f 11 44 08
	04		 movss	 DWORD PTR [rax+rcx+4], xmm0

; 406  : 		points[i][0].x = startPtX + sectionLen * (float)i;

  000ba	f3 0f 2a 44 24
	30		 cvtsi2ss xmm0, DWORD PTR i$1[rsp]
  000c0	f3 0f 10 8c 24
	88 00 00 00	 movss	 xmm1, DWORD PTR sectionLen$[rsp]
  000c9	f3 0f 59 c8	 mulss	 xmm1, xmm0
  000cd	0f 28 c1	 movaps	 xmm0, xmm1
  000d0	f3 0f 10 4c 24
	58		 movss	 xmm1, DWORD PTR startPtX$[rsp]
  000d6	f3 0f 58 c8	 addss	 xmm1, xmm0
  000da	0f 28 c1	 movaps	 xmm0, xmm1
  000dd	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  000e2	b9 08 00 00 00	 mov	 ecx, 8
  000e7	48 6b c9 00	 imul	 rcx, rcx, 0
  000eb	48 8b 54 24 28	 mov	 rdx, QWORD PTR points$[rsp]
  000f0	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  000f4	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 407  : 		points[i][1].x = startPtX + sectionLen * (float)(i + 1);

  000f9	8b 44 24 30	 mov	 eax, DWORD PTR i$1[rsp]
  000fd	ff c0		 inc	 eax
  000ff	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00103	f3 0f 10 8c 24
	88 00 00 00	 movss	 xmm1, DWORD PTR sectionLen$[rsp]
  0010c	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00110	0f 28 c1	 movaps	 xmm0, xmm1
  00113	f3 0f 10 4c 24
	58		 movss	 xmm1, DWORD PTR startPtX$[rsp]
  00119	f3 0f 58 c8	 addss	 xmm1, xmm0
  0011d	0f 28 c1	 movaps	 xmm0, xmm1
  00120	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  00125	b9 08 00 00 00	 mov	 ecx, 8
  0012a	48 6b c9 01	 imul	 rcx, rcx, 1
  0012e	48 8b 54 24 28	 mov	 rdx, QWORD PTR points$[rsp]
  00133	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00137	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 408  : 	}

  0013c	e9 1a ff ff ff	 jmp	 $LN2@DefaultAni
$LN3@DefaultAni:

; 409  : }

  00141	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00145	5f		 pop	 rdi
  00146	c3		 ret	 0
DefaultAnimTexCoordPts2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h
;	COMDAT BoolToSign
_TEXT	SEGMENT
b$ = 64
BoolToSign PROC						; COMDAT

; 98   : inline float BoolToSign(bool b) {

$LN3:
  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	57		 push	 rdi
  00005	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7BF3DF52_math@h
  00010	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 99   : 	return b * 2.f - 1.f;

  00015	0f b6 44 24 40	 movzx	 eax, BYTE PTR b$[rsp]
  0001a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0001e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00026	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000

; 100  : }

  0002e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00032	5f		 pop	 rdi
  00033	c3		 ret	 0
BoolToSign ENDP
_TEXT	ENDS
END
