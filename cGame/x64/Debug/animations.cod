; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35211.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_03OFAPEBGM@?$CFs?6@			; `string'
PUBLIC	??_C@_07BPPBCINE@images?1@			; `string'
PUBLIC	??_C@_01KMDKNFGN@?1@				; `string'
PUBLIC	??_C@_04EEOGCCFB@?4png@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_0BA@JFAFENDL@tried?5to?5load?5?$CC@	; `string'
PUBLIC	??_C@_03BMLMMEDG@?$CC?4?6@			; `string'
EXTRN	__imp_malloc:PROC
EXTRN	__imp_DebugBreak:PROC
EXTRN	__imp_strcat_s:PROC
EXTRN	__imp___glewBindTextureUnit:QWORD
EXTRN	__imp_glTexImage2D:PROC
EXTRN	__imp_CreateThread:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_strcpy_s:PROC
EXTRN	__imp___glewActiveTexture:QWORD
EXTRN	__imp_glTexParameteri:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp___stdio_common_vsprintf_s:PROC
EXTRN	__imp___glewCreateTextures:QWORD
EXTRN	__imp_WaitForSingleObject:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_glBindTexture:PROC
EXTRN	__security_check_cookie:PROC
COMM	height:DWORD
COMM	quadTempSize:DWORD
COMM	mode:QWORD
COMM	curSubTrueAABB:QWORD
COMM	shouldDraw:BYTE
COMM	posTempLen:DWORD
COMM	cellSize:QWORD
COMM	curMeshLoc:DWORD
COMM	monitor:QWORD
COMM	squishHead:QWORD
COMM	delInd:QWORD
COMM	cTime:QWORD
COMM	camPosLoc:DWORD
COMM	width:DWORD
COMM	delIndSize:QWORD
COMM	delMesh:QWORD
COMM	curTrueAABB:QWORD
COMM	checkedCells:QWORD
COMM	endOfNodes:DWORD
COMM	mainColHead:QWORD
COMM	indicesSize:QWORD
COMM	nodeExcess:DWORD
COMM	curAABB:QWORD
COMM	frequency:QWORD
COMM	quadTempLen:DWORD
COMM	vertices:QWORD
COMM	frameTime:DWORD
COMM	delMeshLen:DWORD
COMM	window:QWORD
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
COMM	delIndLen:DWORD
COMM	avgDT:DWORD
COMM	verticesSize:QWORD
COMM	indTempSize:DWORD
COMM	shouldMoveCam:BYTE
COMM	curIndiciesLoc:DWORD
COMM	stride:DWORD
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
COMM	glError:DWORD
COMM	query:DWORD
COMM	shader:DWORD
COMM	noOfCellChecks:DWORD
COMM	strideTakeTwo:DWORD
COMM	delMeshSize:QWORD
COMM	sliderHead:QWORD
COMM	nodeSection:DWORD
COMM	curColTransform:QWORD
COMM	channels:DWORD
COMM	refreshRate:DWORD
COMM	vertexIterator:DWORD
COMM	camPosition:QWORD
COMM	totalCheckedCells:QWORD
COMM	logRefreshRate:DWORD
COMM	indTempLen:DWORD
COMM	pTime:QWORD
COMM	indices:QWORD
_DATA	ENDS
;	COMDAT ??_C@_03BMLMMEDG@?$CC?4?6@
CONST	SEGMENT
??_C@_03BMLMMEDG@?$CC?4?6@ DB '".', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFAFENDL@tried?5to?5load?5?$CC@
CONST	SEGMENT
??_C@_0BA@JFAFENDL@tried?5to?5load?5?$CC@ DB 'tried to load "', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EEOGCCFB@?4png@
CONST	SEGMENT
??_C@_04EEOGCCFB@?4png@ DB '.png', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07BPPBCINE@images?1@
CONST	SEGMENT
??_C@_07BPPBCINE@images?1@ DB 'images/', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6@ DB '%s', 0aH, 00H		; `string'
__4C2AD0C7_winpackagefamily@h DB 01H
__9DED9ED1_winapifamily@h DB 01H
__0B1C67B3_gl@h DB 01H
__D7C03EE9_glu@h DB 01H
__5B769280_glew@h DB 01H
__F2638511_stdbool@h DB 01H
__8C83BECC_concurrencysal@h DB 01H
__608E3340_sal@h DB 01H
__FB67E29A_vadefs@h DB 01H
__1D1B619C_vcruntime@h DB 01H
__735960E1_corecrt@h DB 01H
__955456CD_stddef@h DB 01H
__836A8CFC_stdint@h DB 01H
__0A1327A7_glfw3@h DB 01H
__1D9A7FA2_corecrt_math@h DB 01H
__2E93F1C0_math@h DB 01H
__7570C268_vectors@h DB 01H
__12FEDF4E_sdkddkver@h DB 01H
__9BAEE128_excpt@h DB 01H
__B7B53233_stdarg@h DB 01H
__6B04FCB3_specstrings_undef@h DB 01H
__F4027AF7_specstrings_strict@h DB 01H
__B90340D4_sdv_driverspecs@h DB 01H
__BFFF5AD3_driverspecs@h DB 01H
__32847078_specstrings@h DB 01H
__108B2620_corecrt_wctype@h DB 01H
__6CD6613D_ctype@h DB 01H
__30902A1F_kernelspecs@h DB 01H
__376FD5CA_basetsd@h DB 01H
__13DE2371_errno@h DB 01H
__8C6AE390_vcruntime_string@h DB 01H
__8ACB2152_corecrt_memcpy_s@h DB 01H
__EA6C9D17_corecrt_memory@h DB 01H
__0DF2AF52_corecrt_wstring@h DB 01H
__6E889ECC_string@h DB 01H
__9BEDF4DE_guiddef@h DB 01H
__51BFD2FE_pshpack4@h DB 01H
__31652CEA_poppack@h DB 01H
__5532AE4C_pshpack2@h DB 01H
__58A52B9A_pshpack8@h DB 01H
__57741015_pshpack1@h DB 01H
__CDE68C90_apiset@h DB 01H
__0BF06E8D_ktmtypes@h DB 01H
__40C200C0_winnt@h DB 01H
__9336F789_minwindef@h DB 01H
__55136115_windef@h DB 01H
__32205BF0_apisetcconv@h DB 01H
__B48FDEA0_minwinbase@h DB 01H
__3551B028_apiquery2@h DB 01H
__65BE04AA_processenv@h DB 01H
__4767CA46_fileapi@h DB 01H
__282E6C4B_fileapifromapp@h DB 01H
__393AF12C_debugapi@h DB 01H
__EBC502B8_utilapiset@h DB 01H
__1EAD8C69_handleapi@h DB 01H
__D8EF9B29_errhandlingapi@h DB 01H
__97FC1204_fibersapi@h DB 01H
__27448220_namedpipeapi@h DB 01H
__6EA33B2A_profileapi@h DB 01H
__EAC6F673_heapapi@h DB 01H
__D64EEA5A_ioapiset@h DB 01H
__144BD4B6_synchapi@h DB 01H
__03B1C640_interlockedapi@h DB 01H
__DC64CB38_processthreadsapi@h DB 01H
__D719B518_sysinfoapi@h DB 01H
__410385B1_memoryapi@h DB 01H
__C1AD45EF_enclaveapi@h DB 01H
__F4C3AA32_threadpoollegacyapiset@h DB 01H
__AC5A7A9F_threadpoolapiset@h DB 01H
__F5254B21_jobapi@h DB 01H
__BCEA6EE8_jobapi2@h DB 01H
__D18ACE72_wow64apiset@h DB 01H
__669B0D4A_libloaderapi@h DB 01H
__645F7034_securitybaseapi@h DB 01H
__67E58557_namespaceapi@h DB 01H
__599D9D3A_systemtopologyapi@h DB 01H
__2337E373_processtopologyapi@h DB 01H
__02BFF239_securityappcontainer@h DB 01H
__9C196272_realtimeapiset@h DB 01H
__5AB313A4_winerror@h DB 01H
__B7E7187B_timezoneapi@h DB 01H
__6DE9EB6F_winbase@h DB 01H
__56B2AFF2_wingdi@h DB 01H
__BA1161A9_tvout@h DB 01H
__0501A018_winuser@h DB 01H
__EF12FA99_datetimeapi@h DB 01H
__8FA7C3CA_winnls@h DB 01H
__390F0C47_stringapiset@h DB 01H
__28605B0A_wincontypes@h DB 01H
__BFBDE86D_consoleapi@h DB 01H
__C3CAFBF0_consoleapi2@h DB 01H
__C20891C7_consoleapi3@h DB 01H
__717C98B6_wincon@h DB 01H
__2884C177_verrsrc@h DB 01H
__A3FD3A34_winver@h DB 01H
__6F8AD9F1_reason@h DB 01H
__4C90FD6F_winreg@h DB 01H
__68AFEBAD_wnnc@h DB 01H
__5A7AB086_winnetwk@h DB 01H
__859C3CD3_cderr@h DB 01H
__81B12F1A_dde@h DB 01H
__DD3AF97A_ddeml@h DB 01H
__E6B47715_dlgs@h DB 01H
__944BD57D_lzexpand@h DB 01H
__E4B2DFC7_mmsyscom@h DB 01H
__5287D88F_mciapi@h DB 01H
__DBDC1384_mmiscapi@h DB 01H
__1A78C0D7_mmiscapi2@h DB 01H
__0D05975C_playsoundapi@h DB 01H
__757A63A9_mmeapi@h DB 01H
__6326AB05_timeapi@h DB 01H
__77D483B2_joystickapi@h DB 01H
__59CF7431_mmsystem@h DB 01H
__CEAC417E_nb30@h DB 01H
__3BA1A118_rpcdcep@h DB 01H
__74064437_rpcdce@h DB 01H
__90546602_rpcnsi@h DB 01H
__83114A2C_rpcnterr@h DB 01H
__CA67519E_rpcasync@h DB 01H
__D8CEBCD8_rpc@h DB 01H
__9F43AC2D_shellapi@h DB 01H
__6C8D3703_winperf@h DB 01H
__AB40A29E_inaddr@h DB 01H
__40D4FEA5_winsock@h DB 01H
__51394074_bcrypt@h DB 01H
__F177C154_ncrypt@h DB 01H
__1445529E_dpapi@h DB 01H
__5743FB20_wincrypt@h DB 01H
__97CA12BF_winefs@h DB 01H
__6DF63719_rpcnsip@h DB 01H
__031EFCA1_rpcsal@h DB 01H
__BA08D1DA_rpcndr@h DB 01H
__3A941F83_wtypesbase@h DB 01H
__C244FEE1_wtypes@h DB 01H
__FB7C5F97_winioctl@h DB 01H
__4B65E4AC_winsmcrd@h DB 01H
__1EA80168_winscard@h DB 01H
__516FC0F9_prsht@h DB 01H
__88BA11C6_winspool@h DB 01H
__211DB995_corecrt_malloc@h DB 01H
__99AED4FB_corecrt_search@h DB 01H
__8B813BF6_corecrt_wstdlib@h DB 01H
__3D1CA2C3_limits@h DB 01H
__E8FB0A68_stdlib@h DB 01H
__18DB4C56_unknwnbase@h DB 01H
__1AE6FA1A_objidlbase@h DB 01H
__7F98E437_cguid@h DB 01H
__6B2DFB49_combaseapi@h DB 01H
__CB0E8B37_unknwn@h DB 01H
__D981EF0A_objidl@h DB 01H
__37089EB8_oaidl@h DB 01H
__CA2DDD8B_propidlbase@h DB 01H
__39ED323E_coml2api@h DB 01H
__78E82682_oleidl@h DB 01H
__97883CFE_servprov@h DB 01H
__CE01DDB9_msxml@h DB 01H
__A4784895_urlmon@h DB 01H
__325F1C97_propidl@h DB 01H
__D3D43343_objbase@h DB 01H
__B3A2AF1B_oleauto@h DB 01H
__5722A8AA_ole2@h DB 01H
__590A450A_commdlg@h DB 01H
__2FE8A10C_stralign@h DB 01H
__34558472_winsvc@h DB 01H
__058845F1_mcx@h DB 01H
__7F16006B_ime_cmodes@h DB 01H
__0A3AF599_imm@h DB 01H
__11B87C25_Windows@h DB 01H
__60B45B40_corecrt_stdio_config@h DB 01H
__CFA3741E_corecrt_wstdio@h DB 01H
__B3FE3303_stdio@h DB 01H
__DD0D2CA2_main@h DB 01H
__9378A798_Debug@h DB 01H
__29DBA756_animations@h DB 01H
__AFFFEBA2_GL stuff@h DB 01H
__A6D01AF2_Physics@h DB 01H
__1408441D_Mesh@h DB 01H
__7CA6EAD6_EntityManager@h DB 01H
__94624A77_Dictionary@h DB 01H
__BE097EDE_animations@c DB 01H
	ORG $+32
maxNugRand DQ	0000000100000000H
PUBLIC	InitSingleTexture2
PUBLIC	InitSingleTexture
PUBLIC	InitAnimator2
PUBLIC	InitAnimator
PUBLIC	print
PUBLIC	sprintf_s
PUBLIC	_vsprintf_s_l
PUBLIC	printf
PUBLIC	_vfprintf_l
PUBLIC	__local_stdio_printf_options
PUBLIC	__JustMyCode_Default
PUBLIC	__real@00000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3ba3d70a
PUBLIC	__real@3c9374bc
PUBLIC	__real@3cf5c28f
PUBLIC	__real@3d0793de
PUBLIC	__real@3d1b8e3a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d75c28f
PUBLIC	__real@3daaaaab
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e1c9c9c
PUBLIC	__real@3e3a9de9
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e740995
PUBLIC	__real@3e851eb8
PUBLIC	__real@3e8a3d71
PUBLIC	__real@3e924925
PUBLIC	__real@3eb5c28f
PUBLIC	__real@3ebb645a
PUBLIC	__real@3ec7ae14
PUBLIC	__real@3ed7c57d
PUBLIC	__real@3f000000
PUBLIC	__real@3f053f7d
PUBLIC	__real@3f169696
PUBLIC	__real@3f19999a
PUBLIC	__real@3f333333
PUBLIC	__real@3f33b646
PUBLIC	__real@3f44aed4
PUBLIC	__real@3f59999a
PUBLIC	__real@3f6147ae
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@40c00000
PUBLIC	__real@40dfffc000000000
PUBLIC	__real@40e00000
PUBLIC	__real@40e33333
PUBLIC	__real@41200000
PUBLIC	__real@41700000
PUBLIC	__real@41848ed2
PUBLIC	__real@41880000
PUBLIC	__real@419e1ba4
PUBLIC	__real@41a00000
PUBLIC	__real@424c0000
PUBLIC	__real@42740000
PUBLIC	__real@427c0000
PUBLIC	__real@42ce0000
PUBLIC	__real@43340000
PUBLIC	__real@437f0000
PUBLIC	__real@43f60000
PUBLIC	__real@44000000
PUBLIC	__real@44210000
PUBLIC	__real@444d0000
PUBLIC	__real@447a0000
PUBLIC	__real@447b0000
PUBLIC	__real@448a4000
PUBLIC	__real@46fffe00
PUBLIC	__real@477fff00
PUBLIC	__real@49742400
PUBLIC	__real@bc23d70a
PUBLIC	__real@bcb49985
PUBLIC	__real@bd1b8e3a
PUBLIC	__real@bd8f5c29
PUBLIC	__real@be333333
PUBLIC	__real@be8a3d71
PUBLIC	__real@beed097d
PUBLIC	__real@beee147b
PUBLIC	__real@beef1aa0
PUBLIC	__real@bf2d5533
PUBLIC	__real@bf3ae148
PUBLIC	__real@bf543958
PUBLIC	__real@bf800000
PUBLIC	__xmm@00000200000002000000020000000200
PUBLIC	__xmm@00080008000800080008000800080008
PUBLIC	__xmm@00ff00ff00ff00ff00ff00ff00ff00ff
PUBLIC	__xmm@01010000010100000101000001010000
PUBLIC	__xmm@08a914e808a914e808a914e808a914e8
PUBLIC	__xmm@11c8e09e11c8e09e11c8e09e11c8e09e
PUBLIC	__xmm@11c8f9c311c8f9c311c8f9c311c8f9c3
PUBLIC	__xmm@12d0046b12d0046b12d0046b12d0046b
PUBLIC	__xmm@166f166f166f166f166f166f166f166f
PUBLIC	__xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a
PUBLIC	__xmm@80000000800000008000000080000000
PUBLIC	__xmm@80808080808080808080808080808080
PUBLIC	__xmm@e09ee565e09ee565e09ee565e09ee565
PUBLIC	__xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0
PUBLIC	__xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9
PUBLIC	__xmm@f493f493f493f493f493f493f493f493
PUBLIC	__xmm@f9c31a9df9c31a9df9c31a9df9c31a9d
PUBLIC	__xmm@fa7efa7efa7efa7efa7efa7efa7efa7e
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	logf:PROC
EXTRN	memcmp:PROC
EXTRN	pow:PROC
EXTRN	sqrtf:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
EXTRN	_tls_index:DWORD
pdata	SEGMENT
$pdata$InitSingleTexture2 DD imagerel $LN13
	DD	imagerel $LN13+491
	DD	imagerel $unwind$InitSingleTexture2
$pdata$InitSingleTexture DD imagerel $LN13
	DD	imagerel $LN13+514
	DD	imagerel $unwind$InitSingleTexture
$pdata$InitAnimator2 DD imagerel $LN32
	DD	imagerel $LN32+1727
	DD	imagerel $unwind$InitAnimator2
$pdata$InitAnimator DD imagerel $LN30
	DD	imagerel $LN30+1957
	DD	imagerel $unwind$InitAnimator
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$print DD	imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$print
pdata	ENDS
pdata	SEGMENT
$pdata$ThrowError DD imagerel ThrowError
	DD	imagerel ThrowError+52
	DD	imagerel $unwind$ThrowError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf_s DD imagerel $LN7
	DD	imagerel $LN7+275
	DD	imagerel $unwind$sprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+125
	DD	imagerel $unwind$_vsprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN5
	DD	imagerel $LN5+241
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$__local_stdio_printf_options
;	COMDAT __xmm@fa7efa7efa7efa7efa7efa7efa7efa7e
CONST	SEGMENT
__xmm@fa7efa7efa7efa7efa7efa7efa7efa7e DB '~', 0faH, '~', 0faH, '~', 0faH
	DB	'~', 0faH, '~', 0faH, '~', 0faH, '~', 0faH, '~', 0faH
CONST	ENDS
;	COMDAT __xmm@f9c31a9df9c31a9df9c31a9df9c31a9d
CONST	SEGMENT
__xmm@f9c31a9df9c31a9df9c31a9df9c31a9d DB 09dH, 01aH, 0c3H, 0f9H, 09dH, 01aH
	DB	0c3H, 0f9H, 09dH, 01aH, 0c3H, 0f9H, 09dH, 01aH, 0c3H, 0f9H
CONST	ENDS
;	COMDAT __xmm@f493f493f493f493f493f493f493f493
CONST	SEGMENT
__xmm@f493f493f493f493f493f493f493f493 DB 093H, 0f4H, 093H, 0f4H, 093H, 0f4H
	DB	093H, 0f4H, 093H, 0f4H, 093H, 0f4H, 093H, 0f4H, 093H, 0f4H
CONST	ENDS
;	COMDAT __xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9
CONST	SEGMENT
__xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9 DB 0a9H, 08H, 01aH, 0ebH, 0a9H, 08H
	DB	01aH, 0ebH, 0a9H, 08H, 01aH, 0ebH, 0a9H, 08H, 01aH, 0ebH
CONST	ENDS
;	COMDAT __xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0
CONST	SEGMENT
__xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0 DB 0d0H, 012H, 0cfH, 0e9H, 0d0H, 012H
	DB	0cfH, 0e9H, 0d0H, 012H, 0cfH, 0e9H, 0d0H, 012H, 0cfH, 0e9H
CONST	ENDS
;	COMDAT __xmm@e09ee565e09ee565e09ee565e09ee565
CONST	SEGMENT
__xmm@e09ee565e09ee565e09ee565e09ee565 DB 'e', 0e5H, 09eH, 0e0H, 'e', 0e5H
	DB	09eH, 0e0H, 'e', 0e5H, 09eH, 0e0H, 'e', 0e5H, 09eH, 0e0H
CONST	ENDS
;	COMDAT __xmm@80808080808080808080808080808080
CONST	SEGMENT
__xmm@80808080808080808080808080808080 DB 080H, 080H, 080H, 080H, 080H, 080H
	DB	080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a
CONST	SEGMENT
__xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a DB 'Z', 01cH, 'Z', 01cH, 'Z', 01cH
	DB	'Z', 01cH, 'Z', 01cH, 'Z', 01cH, 'Z', 01cH, 'Z', 01cH
CONST	ENDS
;	COMDAT __xmm@166f166f166f166f166f166f166f166f
CONST	SEGMENT
__xmm@166f166f166f166f166f166f166f166f DB 'o', 016H, 'o', 016H, 'o', 016H
	DB	'o', 016H, 'o', 016H, 'o', 016H, 'o', 016H, 'o', 016H
CONST	ENDS
;	COMDAT __xmm@12d0046b12d0046b12d0046b12d0046b
CONST	SEGMENT
__xmm@12d0046b12d0046b12d0046b12d0046b DB 'k', 04H, 0d0H, 012H, 'k', 04H, 0d0H
	DB	012H, 'k', 04H, 0d0H, 012H, 'k', 04H, 0d0H, 012H
CONST	ENDS
;	COMDAT __xmm@11c8f9c311c8f9c311c8f9c311c8f9c3
CONST	SEGMENT
__xmm@11c8f9c311c8f9c311c8f9c311c8f9c3 DB 0c3H, 0f9H, 0c8H, 011H, 0c3H, 0f9H
	DB	0c8H, 011H, 0c3H, 0f9H, 0c8H, 011H, 0c3H, 0f9H, 0c8H, 011H
CONST	ENDS
;	COMDAT __xmm@11c8e09e11c8e09e11c8e09e11c8e09e
CONST	SEGMENT
__xmm@11c8e09e11c8e09e11c8e09e11c8e09e DB 09eH, 0e0H, 0c8H, 011H, 09eH, 0e0H
	DB	0c8H, 011H, 09eH, 0e0H, 0c8H, 011H, 09eH, 0e0H, 0c8H, 011H
CONST	ENDS
;	COMDAT __xmm@08a914e808a914e808a914e808a914e8
CONST	SEGMENT
__xmm@08a914e808a914e808a914e808a914e8 DB 0e8H, 014H, 0a9H, 08H, 0e8H, 014H
	DB	0a9H, 08H, 0e8H, 014H, 0a9H, 08H, 0e8H, 014H, 0a9H, 08H
CONST	ENDS
;	COMDAT __xmm@01010000010100000101000001010000
CONST	SEGMENT
__xmm@01010000010100000101000001010000 DB 00H, 00H, 01H, 01H, 00H, 00H, 01H
	DB	01H, 00H, 00H, 01H, 01H, 00H, 00H, 01H, 01H
CONST	ENDS
;	COMDAT __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
CONST	SEGMENT
__xmm@00ff00ff00ff00ff00ff00ff00ff00ff DB 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
	DB	0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
CONST	ENDS
;	COMDAT __xmm@00080008000800080008000800080008
CONST	SEGMENT
__xmm@00080008000800080008000800080008 DB 08H, 00H, 08H, 00H, 08H, 00H, 08H
	DB	00H, 08H, 00H, 08H, 00H, 08H, 00H, 08H, 00H
CONST	ENDS
;	COMDAT __xmm@00000200000002000000020000000200
CONST	SEGMENT
__xmm@00000200000002000000020000000200 DB 00H, 02H, 00H, 00H, 00H, 02H, 00H
	DB	00H, 00H, 02H, 00H, 00H, 00H, 02H, 00H, 00H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf543958
CONST	SEGMENT
__real@bf543958 DD 0bf543958r			; -0.829
CONST	ENDS
;	COMDAT __real@bf3ae148
CONST	SEGMENT
__real@bf3ae148 DD 0bf3ae148r			; -0.73
CONST	ENDS
;	COMDAT __real@bf2d5533
CONST	SEGMENT
__real@bf2d5533 DD 0bf2d5533r			; -0.677081
CONST	ENDS
;	COMDAT __real@beef1aa0
CONST	SEGMENT
__real@beef1aa0 DD 0beef1aa0r			; -0.467
CONST	ENDS
;	COMDAT __real@beee147b
CONST	SEGMENT
__real@beee147b DD 0beee147br			; -0.465
CONST	ENDS
;	COMDAT __real@beed097d
CONST	SEGMENT
__real@beed097d DD 0beed097dr			; -0.462963
CONST	ENDS
;	COMDAT __real@be8a3d71
CONST	SEGMENT
__real@be8a3d71 DD 0be8a3d71r			; -0.27
CONST	ENDS
;	COMDAT __real@be333333
CONST	SEGMENT
__real@be333333 DD 0be333333r			; -0.175
CONST	ENDS
;	COMDAT __real@bd8f5c29
CONST	SEGMENT
__real@bd8f5c29 DD 0bd8f5c29r			; -0.07
CONST	ENDS
;	COMDAT __real@bd1b8e3a
CONST	SEGMENT
__real@bd1b8e3a DD 0bd1b8e3ar			; -0.0379774
CONST	ENDS
;	COMDAT __real@bcb49985
CONST	SEGMENT
__real@bcb49985 DD 0bcb49985r			; -0.0220459
CONST	ENDS
;	COMDAT __real@bc23d70a
CONST	SEGMENT
__real@bc23d70a DD 0bc23d70ar			; -0.01
CONST	ENDS
;	COMDAT __real@49742400
CONST	SEGMENT
__real@49742400 DD 049742400r			; 1e+06
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@448a4000
CONST	SEGMENT
__real@448a4000 DD 0448a4000r			; 1106
CONST	ENDS
;	COMDAT __real@447b0000
CONST	SEGMENT
__real@447b0000 DD 0447b0000r			; 1004
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@444d0000
CONST	SEGMENT
__real@444d0000 DD 0444d0000r			; 820
CONST	ENDS
;	COMDAT __real@44210000
CONST	SEGMENT
__real@44210000 DD 044210000r			; 644
CONST	ENDS
;	COMDAT __real@44000000
CONST	SEGMENT
__real@44000000 DD 044000000r			; 512
CONST	ENDS
;	COMDAT __real@43f60000
CONST	SEGMENT
__real@43f60000 DD 043f60000r			; 492
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@42ce0000
CONST	SEGMENT
__real@42ce0000 DD 042ce0000r			; 103
CONST	ENDS
;	COMDAT __real@427c0000
CONST	SEGMENT
__real@427c0000 DD 0427c0000r			; 63
CONST	ENDS
;	COMDAT __real@42740000
CONST	SEGMENT
__real@42740000 DD 042740000r			; 61
CONST	ENDS
;	COMDAT __real@424c0000
CONST	SEGMENT
__real@424c0000 DD 0424c0000r			; 51
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@419e1ba4
CONST	SEGMENT
__real@419e1ba4 DD 0419e1ba4r			; 19.7635
CONST	ENDS
;	COMDAT __real@41880000
CONST	SEGMENT
__real@41880000 DD 041880000r			; 17
CONST	ENDS
;	COMDAT __real@41848ed2
CONST	SEGMENT
__real@41848ed2 DD 041848ed2r			; 16.5697
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40e33333
CONST	SEGMENT
__real@40e33333 DD 040e33333r			; 7.1
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@40dfffc000000000
CONST	SEGMENT
__real@40dfffc000000000 DQ 040dfffc000000000r	; 32767
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f6147ae
CONST	SEGMENT
__real@3f6147ae DD 03f6147aer			; 0.88
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f44aed4
CONST	SEGMENT
__real@3f44aed4 DD 03f44aed4r			; 0.768293
CONST	ENDS
;	COMDAT __real@3f33b646
CONST	SEGMENT
__real@3f33b646 DD 03f33b646r			; 0.702
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f169696
CONST	SEGMENT
__real@3f169696 DD 03f169696r			; 0.588235
CONST	ENDS
;	COMDAT __real@3f053f7d
CONST	SEGMENT
__real@3f053f7d DD 03f053f7dr			; 0.5205
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ed7c57d
CONST	SEGMENT
__real@3ed7c57d DD 03ed7c57dr			; 0.421429
CONST	ENDS
;	COMDAT __real@3ec7ae14
CONST	SEGMENT
__real@3ec7ae14 DD 03ec7ae14r			; 0.39
CONST	ENDS
;	COMDAT __real@3ebb645a
CONST	SEGMENT
__real@3ebb645a DD 03ebb645ar			; 0.366
CONST	ENDS
;	COMDAT __real@3eb5c28f
CONST	SEGMENT
__real@3eb5c28f DD 03eb5c28fr			; 0.355
CONST	ENDS
;	COMDAT __real@3e924925
CONST	SEGMENT
__real@3e924925 DD 03e924925r			; 0.285714
CONST	ENDS
;	COMDAT __real@3e8a3d71
CONST	SEGMENT
__real@3e8a3d71 DD 03e8a3d71r			; 0.27
CONST	ENDS
;	COMDAT __real@3e851eb8
CONST	SEGMENT
__real@3e851eb8 DD 03e851eb8r			; 0.26
CONST	ENDS
;	COMDAT __real@3e740995
CONST	SEGMENT
__real@3e740995 DD 03e740995r			; 0.238318
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e3a9de9
CONST	SEGMENT
__real@3e3a9de9 DD 03e3a9de9r			; 0.182243
CONST	ENDS
;	COMDAT __real@3e1c9c9c
CONST	SEGMENT
__real@3e1c9c9c DD 03e1c9c9cr			; 0.152941
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3daaaaab
CONST	SEGMENT
__real@3daaaaab DD 03daaaaabr			; 0.0833333
CONST	ENDS
;	COMDAT __real@3d75c28f
CONST	SEGMENT
__real@3d75c28f DD 03d75c28fr			; 0.06
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d1b8e3a
CONST	SEGMENT
__real@3d1b8e3a DD 03d1b8e3ar			; 0.0379774
CONST	ENDS
;	COMDAT __real@3d0793de
CONST	SEGMENT
__real@3d0793de DD 03d0793der			; 0.0331
CONST	ENDS
;	COMDAT __real@3cf5c28f
CONST	SEGMENT
__real@3cf5c28f DD 03cf5c28fr			; 0.03
CONST	ENDS
;	COMDAT __real@3c9374bc
CONST	SEGMENT
__real@3c9374bc DD 03c9374bcr			; 0.018
CONST	ENDS
;	COMDAT __real@3ba3d70a
CONST	SEGMENT
__real@3ba3d70a DD 03ba3d70ar			; 0.005
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03fH
	DB	0d8H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 034719H
	DD	012011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	080H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_s_l DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03fH
	DB	0faH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf_s DD 034719H
	DD	012011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	080H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
sprintf_s$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
sprintf_s$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:sprintf_s$rtcName$0
	ORG $+48
sprintf_s$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:sprintf_s$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$print DD 020a01H
	DD	07006720aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:InitAnimator
	DD	03fH
	DD	078cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:InitAnimator2
	DD	03fH
	DD	06a6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:InitSingleTexture
	DD	03eH
	DD	01e9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:InitSingleTexture2
	DD	039H
	DD	01d2H
xdata	SEGMENT
$unwind$InitSingleTexture2 DD 034119H
	DD	0140116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$InitSingleTexture DD 034619H
	DD	012011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$InitAnimator2 DD 034719H
	DD	024011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$InitAnimator DD 034719H
	DD	02a011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	0140H
$unwind$ThrowError DD 020a01H
	DD	07006320aH
InitSingleTexture2$rtcName$0 DB 066H
	DB	072H
	DB	061H
	DB	06dH
	DB	065H
	DB	04eH
	DB	075H
	DB	06cH
	DB	06cH
	DB	00H
	ORG $+6
InitSingleTexture2$rtcVarDesc DD 064H
	DD	01H
	DQ	FLAT:InitSingleTexture2$rtcName$0
	ORG $+48
InitSingleTexture2$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:InitSingleTexture2$rtcVarDesc
InitSingleTexture$rtcName$0 DB 066H
	DB	072H
	DB	061H
	DB	06dH
	DB	065H
	DB	04eH
	DB	075H
	DB	06cH
	DB	06cH
	DB	00H
	ORG $+6
InitSingleTexture$rtcVarDesc DD 054H
	DD	01H
	DQ	FLAT:InitSingleTexture$rtcName$0
	ORG $+48
InitSingleTexture$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:InitSingleTexture$rtcVarDesc
InitAnimator2$rtcName$0 DB 066H
	DB	072H
	DB	061H
	DB	06dH
	DB	065H
	DB	04eH
	DB	075H
	DB	06cH
	DB	06cH
	DB	00H
	ORG $+6
InitAnimator2$rtcVarDesc DD 0a4H
	DD	01H
	DQ	FLAT:InitAnimator2$rtcName$0
	ORG $+48
InitAnimator2$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:InitAnimator2$rtcVarDesc
InitAnimator$rtcName$0 DB 069H
	DB	073H
	DB	04eH
	DB	075H
	DB	06cH
	DB	06cH
	DB	00H
	ORG $+9
InitAnimator$rtcVarDesc DD 0b4H
	DD	01H
	DQ	FLAT:InitAnimator$rtcName$0
	ORG $+48
InitAnimator$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:InitAnimator$rtcVarDesc
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 90   :     {

$LN3:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B3FE3303_stdio@h
  0000d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00012	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00019	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001d	5f		 pop	 rdi
  0001e	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 644  :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7F16006B_ime_cmodes@h
  00020	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00025	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0002a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  0002f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00034	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  00039	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  0003e	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Stream$[rsp]
  00043	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf

; 646  :     }

  0004c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00050	5f		 pop	 rdi
  00051	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 48
_ArgList$ = 72
$T4 = 96
_Stream$ = 104
_Format$ = 112
_ArgList$ = 120
__$ArrayPad$ = 128
_Format$ = 160
printf	PROC						; COMDAT

; 956  :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	57		 push	 rdi
  00015	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  0001c	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00021	b9 18 00 00 00	 mov	 ecx, 24
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+160]
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c4	 xor	 rax, rsp
  0003f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7F16006B_ime_cmodes@h
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

  00053	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0005b	48 89 44 24 48	 mov	 QWORD PTR _ArgList$[rsp], rax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00060	48 8b 44 24 48	 mov	 rax, QWORD PTR _ArgList$[rsp]
  00065	48 89 44 24 78	 mov	 QWORD PTR _ArgList$[rsp], rax
  0006a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR _Format$[rsp]
  00072	48 89 44 24 70	 mov	 QWORD PTR _Format$[rsp], rax
  00077	b9 01 00 00 00	 mov	 ecx, 1
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00082	48 89 44 24 68	 mov	 QWORD PTR _Stream$[rsp], rax

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00087	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0008c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00091	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00096	45 33 c9	 xor	 r9d, r9d
  00099	4c 8b 44 24 70	 mov	 r8, QWORD PTR _Format$[rsp]
  0009e	48 8b 54 24 68	 mov	 rdx, QWORD PTR _Stream$[rsp]
  000a3	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf
  000ac	89 44 24 60	 mov	 DWORD PTR $T4[rsp], eax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  000b0	8b 44 24 60	 mov	 eax, DWORD PTR $T4[rsp]
  000b4	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 961  :         __crt_va_end(_ArgList);

  000b8	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 962  :         return _Result;

  000c1	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]

; 963  :     }

  000c5	8b f8		 mov	 edi, eax
  000c7	48 8b cc	 mov	 rcx, rsp
  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:printf$rtcFrameData
  000d1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000d6	8b c7		 mov	 eax, edi
  000d8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000e0	48 33 cc	 xor	 rcx, rsp
  000e3	e8 00 00 00 00	 call	 __security_check_cookie
  000e8	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  000ef	5f		 pop	 rdi
  000f0	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
;	COMDAT _vsprintf_s_l
_TEXT	SEGMENT
_Result$ = 48
tv73 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsprintf_s_l PROC					; COMDAT

; 1490 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7F16006B_ime_cmodes@h
  00020	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1491 :         int const _Result = __stdio_common_vsprintf_s(

  00025	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0002a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  0002f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00034	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00039	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0003e	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  00043	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  00048	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  0004d	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf_s
  00056	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1492 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1493 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1494 : 
; 1495 :         return _Result < 0 ? -1 : _Result;

  0005a	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  0005f	7d 0a		 jge	 SHORT $LN3@vsprintf_s
  00061	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv73[rsp], -1
  00069	eb 08		 jmp	 SHORT $LN4@vsprintf_s
$LN3@vsprintf_s:
  0006b	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  0006f	89 44 24 34	 mov	 DWORD PTR tv73[rsp], eax
$LN4@vsprintf_s:
  00073	8b 44 24 34	 mov	 eax, DWORD PTR tv73[rsp]

; 1496 :     }

  00077	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0007b	5f		 pop	 rdi
  0007c	c3		 ret	 0
_vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
;	COMDAT sprintf_s
_TEXT	SEGMENT
_Result$ = 48
_ArgList$ = 72
$T4 = 96
_Format$ = 104
_ArgList$ = 112
_Result$5 = 120
tv83 = 124
__$ArrayPad$ = 128
_Buffer$ = 160
_BufferCount$ = 168
_Format$ = 176
sprintf_s PROC						; COMDAT

; 1823 :         {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	57		 push	 rdi
  00015	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  0001c	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00021	b9 18 00 00 00	 mov	 ecx, 24
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+160]
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c4	 xor	 rax, rsp
  0003f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7F16006B_ime_cmodes@h
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1824 :             int _Result;
; 1825 :             va_list _ArgList;
; 1826 :             __crt_va_start(_ArgList, _Format);

  00053	48 8d 84 24 b8
	00 00 00	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0005b	48 89 44 24 48	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1827 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00060	48 8b 44 24 48	 mov	 rax, QWORD PTR _ArgList$[rsp]
  00065	48 89 44 24 70	 mov	 QWORD PTR _ArgList$[rsp], rax
  0006a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Format$[rsp]
  00072	48 89 44 24 68	 mov	 QWORD PTR _Format$[rsp], rax

; 1491 :         int const _Result = __stdio_common_vsprintf_s(

  00077	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0007c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00081	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00086	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0008f	4c 8b 4c 24 68	 mov	 r9, QWORD PTR _Format$[rsp]
  00094	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  0009c	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  000a4	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf_s
  000ad	89 44 24 78	 mov	 DWORD PTR _Result$5[rsp], eax

; 1492 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1493 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1494 : 
; 1495 :         return _Result < 0 ? -1 : _Result;

  000b1	83 7c 24 78 00	 cmp	 DWORD PTR _Result$5[rsp], 0
  000b6	7d 0a		 jge	 SHORT $LN5@sprintf_s
  000b8	c7 44 24 7c ff
	ff ff ff	 mov	 DWORD PTR tv83[rsp], -1
  000c0	eb 08		 jmp	 SHORT $LN6@sprintf_s
$LN5@sprintf_s:
  000c2	8b 44 24 78	 mov	 eax, DWORD PTR _Result$5[rsp]
  000c6	89 44 24 7c	 mov	 DWORD PTR tv83[rsp], eax
$LN6@sprintf_s:
  000ca	8b 44 24 7c	 mov	 eax, DWORD PTR tv83[rsp]
  000ce	89 44 24 60	 mov	 DWORD PTR $T4[rsp], eax

; 1827 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  000d2	8b 44 24 60	 mov	 eax, DWORD PTR $T4[rsp]
  000d6	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1828 :             __crt_va_end(_ArgList);

  000da	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1829 :             return _Result;

  000e3	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]

; 1830 :         }

  000e7	8b f8		 mov	 edi, eax
  000e9	48 8b cc	 mov	 rcx, rsp
  000ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:sprintf_s$rtcFrameData
  000f3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000f8	8b c7		 mov	 eax, edi
  000fa	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00102	48 33 cc	 xor	 rcx, rsp
  00105	e8 00 00 00 00	 call	 __security_check_cookie
  0010a	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00111	5f		 pop	 rdi
  00112	c3		 ret	 0
sprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Debug.h
_TEXT	SEGMENT
message$ = 48
ThrowError PROC

; 30   : static inline void ThrowError(const char* message) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9378A798_Debug@h
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 31   : 	printf("%s\n", message);

  00016	48 8b 54 24 30	 mov	 rdx, QWORD PTR message$[rsp]
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03OFAPEBGM@?$CFs?6@
  00022	e8 00 00 00 00	 call	 printf

; 32   : #ifndef IGNORE_ERRORS
; 33   : 	DebugBreak();

  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DebugBreak
  0002d	90		 npad	 1

; 34   : #endif
; 35   : }

  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5f		 pop	 rdi
  00033	c3		 ret	 0
ThrowError ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Debug.h
;	COMDAT print
_TEXT	SEGMENT
thread$ = 48
toPrint$ = 80
print	PROC						; COMDAT

; 51   : inline void print(char* toPrint) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9378A798_Debug@h
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 52   : 	HANDLE thread = CreateThread(NULL, 0, printMultiThreaded, toPrint, 0, NULL);

  00016	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0001f	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00027	4c 8b 4c 24 50	 mov	 r9, QWORD PTR toPrint$[rsp]
  0002c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:printMultiThreaded
  00033	33 d2		 xor	 edx, edx
  00035	33 c9		 xor	 ecx, ecx
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateThread
  0003d	48 89 44 24 30	 mov	 QWORD PTR thread$[rsp], rax

; 53   : 	WaitForSingleObject(thread, INFINITE);

  00042	ba ff ff ff ff	 mov	 edx, -1			; ffffffffH
  00047	48 8b 4c 24 30	 mov	 rcx, QWORD PTR thread$[rsp]
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitForSingleObject

; 54   : 	CloseHandle(thread);

  00052	48 8b 4c 24 30	 mov	 rcx, QWORD PTR thread$[rsp]
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
  0005d	90		 npad	 1

; 55   : }

  0005e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00062	5f		 pop	 rdi
  00063	c3		 ret	 0
print	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\animations.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Debug.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\animations.c
_TEXT	SEGMENT
bufferSize$ = 80
i$ = 88
maxPathNo$ = 92
curLen$ = 96
images$ = 104
slash$ = 112
pngExtension$ = 120
pathSize$ = 128
path$ = 136
buffer$ = 144
curAnimFrameNo$ = 152
frames$ = 160
j$ = 168
isNull$ = 180
message$ = 208
tv383 = 216
tv384 = 224
tv376 = 232
tv377 = 240
tv369 = 248
tv370 = 256
tv362 = 264
tv363 = 272
tv355 = 280
tv356 = 288
tv139 = 296
tv152 = 304
tv189 = 312
__$ArrayPad$ = 320
Anim$ = 352
paths$ = 360
textureUnitIndex$ = 368
wrapper$ = 376
InitAnimator PROC

; 14   : void InitAnimator(Animator* Anim, char** paths, uint textureUnitIndex, char* wrapper) {//don't call this other than from start. time complexity is ~ O(Anim->noOfAnims * curAnimFrameNo). also, this function should only be called **ONCE PER BATCH OF TEXTURES**. there is no difference if you initialize two animators with the same batch of textures other than an extremely drawn out startup time.

$LN30:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec 50 01
	00 00		 sub	 rsp, 336		; 00000150H
  0001c	48 8d 7c 24 50	 lea	 rdi, QWORD PTR [rsp+80]
  00021	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR [rsp+352]
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c4	 xor	 rax, rsp
  0003f	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 15   : 	const rsize_t bufferSize = sizeof(char) * 4;

  00053	48 c7 44 24 50
	04 00 00 00	 mov	 QWORD PTR bufferSize$[rsp], 4

; 16   : 	uint i;
; 17   : 	ushort maxPathNo = 0;

  0005c	33 c0		 xor	 eax, eax
  0005e	66 89 44 24 5c	 mov	 WORD PTR maxPathNo$[rsp], ax

; 18   : 	ushort curLen;
; 19   : 	for (i = 0; i < Anim->noOfAnims; i++) if ((curLen = strlen(paths[i])) > maxPathNo) maxPathNo = curLen;

  00063	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0006b	eb 0a		 jmp	 SHORT $LN4@InitAnimat
$LN2@InitAnimat:
  0006d	8b 44 24 58	 mov	 eax, DWORD PTR i$[rsp]
  00071	ff c0		 inc	 eax
  00073	89 44 24 58	 mov	 DWORD PTR i$[rsp], eax
$LN4@InitAnimat:
  00077	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR Anim$[rsp]
  0007f	0f b7 40 22	 movzx	 eax, WORD PTR [rax+34]
  00083	39 44 24 58	 cmp	 DWORD PTR i$[rsp], eax
  00087	73 6c		 jae	 SHORT $LN3@InitAnimat
  00089	8b 44 24 58	 mov	 eax, DWORD PTR i$[rsp]
  0008d	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR paths$[rsp]
  00095	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00099	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv383[rsp], rax
  000a1	48 c7 84 24 e0
	00 00 00 ff ff
	ff ff		 mov	 QWORD PTR tv384[rsp], -1
$LL29@InitAnimat:
  000ad	48 ff 84 24 e0
	00 00 00	 inc	 QWORD PTR tv384[rsp]
  000b5	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tv383[rsp]
  000bd	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv384[rsp]
  000c5	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  000c9	75 e2		 jne	 SHORT $LL29@InitAnimat
  000cb	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tv384[rsp]
  000d3	66 89 44 24 60	 mov	 WORD PTR curLen$[rsp], ax
  000d8	0f b7 44 24 60	 movzx	 eax, WORD PTR curLen$[rsp]
  000dd	0f b7 4c 24 5c	 movzx	 ecx, WORD PTR maxPathNo$[rsp]
  000e2	3b c1		 cmp	 eax, ecx
  000e4	7e 0a		 jle	 SHORT $LN11@InitAnimat
  000e6	0f b7 44 24 60	 movzx	 eax, WORD PTR curLen$[rsp]
  000eb	66 89 44 24 5c	 mov	 WORD PTR maxPathNo$[rsp], ax
$LN11@InitAnimat:
  000f0	e9 78 ff ff ff	 jmp	 $LN2@InitAnimat
$LN3@InitAnimat:

; 20   : 	char* images = "images/", *slash = "/", *pngExtension = ".png";

  000f5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07BPPBCINE@images?1@
  000fc	48 89 44 24 68	 mov	 QWORD PTR images$[rsp], rax
  00101	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01KMDKNFGN@?1@
  00108	48 89 44 24 70	 mov	 QWORD PTR slash$[rsp], rax
  0010d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04EEOGCCFB@?4png@
  00114	48 89 44 24 78	 mov	 QWORD PTR pngExtension$[rsp], rax

; 21   : 	const rsize_t pathSize = sizeof(char) * (strlen(images) + NULL_TERM_LEN + strlen(slash) + strlen(pngExtension) + strlen(wrapper) + maxPathNo) + bufferSize;

  00119	48 8b 44 24 68	 mov	 rax, QWORD PTR images$[rsp]
  0011e	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv376[rsp], rax
  00126	48 c7 84 24 f0
	00 00 00 ff ff
	ff ff		 mov	 QWORD PTR tv377[rsp], -1
$LL28@InitAnimat:
  00132	48 ff 84 24 f0
	00 00 00	 inc	 QWORD PTR tv377[rsp]
  0013a	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR tv376[rsp]
  00142	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv377[rsp]
  0014a	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  0014e	75 e2		 jne	 SHORT $LL28@InitAnimat
  00150	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR tv377[rsp]
  00158	48 8b 4c 24 70	 mov	 rcx, QWORD PTR slash$[rsp]
  0015d	48 89 8c 24 f8
	00 00 00	 mov	 QWORD PTR tv369[rsp], rcx
  00165	48 c7 84 24 00
	01 00 00 ff ff
	ff ff		 mov	 QWORD PTR tv370[rsp], -1
$LL27@InitAnimat:
  00171	48 ff 84 24 00
	01 00 00	 inc	 QWORD PTR tv370[rsp]
  00179	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv369[rsp]
  00181	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR tv370[rsp]
  00189	80 3c 11 00	 cmp	 BYTE PTR [rcx+rdx], 0
  0018d	75 e2		 jne	 SHORT $LL27@InitAnimat
  0018f	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv370[rsp]
  00197	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  0019c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pngExtension$[rsp]
  001a1	48 89 8c 24 08
	01 00 00	 mov	 QWORD PTR tv362[rsp], rcx
  001a9	48 c7 84 24 10
	01 00 00 ff ff
	ff ff		 mov	 QWORD PTR tv363[rsp], -1
$LL26@InitAnimat:
  001b5	48 ff 84 24 10
	01 00 00	 inc	 QWORD PTR tv363[rsp]
  001bd	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv362[rsp]
  001c5	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR tv363[rsp]
  001cd	80 3c 11 00	 cmp	 BYTE PTR [rcx+rdx], 0
  001d1	75 e2		 jne	 SHORT $LL26@InitAnimat
  001d3	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv363[rsp]
  001db	48 03 c1	 add	 rax, rcx
  001de	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR wrapper$[rsp]
  001e6	48 89 8c 24 18
	01 00 00	 mov	 QWORD PTR tv355[rsp], rcx
  001ee	48 c7 84 24 20
	01 00 00 ff ff
	ff ff		 mov	 QWORD PTR tv356[rsp], -1
$LL25@InitAnimat:
  001fa	48 ff 84 24 20
	01 00 00	 inc	 QWORD PTR tv356[rsp]
  00202	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv355[rsp]
  0020a	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR tv356[rsp]
  00212	80 3c 11 00	 cmp	 BYTE PTR [rcx+rdx], 0
  00216	75 e2		 jne	 SHORT $LL25@InitAnimat
  00218	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv356[rsp]
  00220	48 03 c1	 add	 rax, rcx
  00223	0f b7 4c 24 5c	 movzx	 ecx, WORD PTR maxPathNo$[rsp]
  00228	48 8b 54 24 50	 mov	 rdx, QWORD PTR bufferSize$[rsp]
  0022d	48 03 d0	 add	 rdx, rax
  00230	48 8b c2	 mov	 rax, rdx
  00233	48 03 c8	 add	 rcx, rax
  00236	48 8b c1	 mov	 rax, rcx
  00239	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pathSize$[rsp], rax

; 22   : 	char* path = malloc(pathSize);

  00241	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pathSize$[rsp]
  00249	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0024f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR path$[rsp], rax

; 23   : 	char* buffer = malloc(bufferSize);

  00257	48 8b 4c 24 50	 mov	 rcx, QWORD PTR bufferSize$[rsp]
  0025c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00262	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR buffer$[rsp], rax

; 24   : 	Anim->frameTextures = malloc(sizeof(uint*) * Anim->noOfAnims);//why do i barely use calloc? because i don't need the overhead of zeroing the memory when most of the time i don't need the memory zeroed. Maybe someday i will want that memory zeroed. (⚆_⚆)

  0026a	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR Anim$[rsp]
  00272	0f b7 40 22	 movzx	 eax, WORD PTR [rax+34]
  00276	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv139[rsp], rax
  0027e	b8 08 00 00 00	 mov	 eax, 8
  00283	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR tv139[rsp]
  0028b	48 f7 e1	 mul	 rcx
  0028e	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00295	48 0f 42 c1	 cmovb	 rax, rcx
  00299	48 8b c8	 mov	 rcx, rax
  0029c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  002a2	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR Anim$[rsp]
  002aa	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 25   : 	ushort curAnimFrameNo;
; 26   : 	byte** frames = malloc(sizeof(byte*) * Anim->noOfAnims);//outer pointer for holding groups of bytes which are in animations, inner pointers for holding the groups of images in each animation.

  002ae	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR Anim$[rsp]
  002b6	0f b7 40 22	 movzx	 eax, WORD PTR [rax+34]
  002ba	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv152[rsp], rax
  002c2	b8 08 00 00 00	 mov	 eax, 8
  002c7	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR tv152[rsp]
  002cf	48 f7 e1	 mul	 rcx
  002d2	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  002d9	48 0f 42 c1	 cmovb	 rax, rcx
  002dd	48 8b c8	 mov	 rcx, rax
  002e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  002e6	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR frames$[rsp], rax

; 27   : 	glActiveTexture(Anim->textureID);

  002ee	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR Anim$[rsp]
  002f6	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  002f9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewActiveTexture
  00300	ff 10		 call	 QWORD PTR [rax]

; 28   : 	int j;
; 29   : 	Anim->animET = .0f;

  00302	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR Anim$[rsp]
  0030a	0f 57 c0	 xorps	 xmm0, xmm0
  0030d	f3 0f 11 40 24	 movss	 DWORD PTR [rax+36], xmm0

; 30   : 	Anim->curAnimFrame = -1;

  00312	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00317	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR Anim$[rsp]
  0031f	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax

; 31   : 	bool isNull;
; 32   : 	for (i = 0; i < Anim->noOfAnims; i++) {

  00323	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0032b	eb 0a		 jmp	 SHORT $LN7@InitAnimat
$LN5@InitAnimat:
  0032d	8b 44 24 58	 mov	 eax, DWORD PTR i$[rsp]
  00331	ff c0		 inc	 eax
  00333	89 44 24 58	 mov	 DWORD PTR i$[rsp], eax
$LN7@InitAnimat:
  00337	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR Anim$[rsp]
  0033f	0f b7 40 22	 movzx	 eax, WORD PTR [rax+34]
  00343	39 44 24 58	 cmp	 DWORD PTR i$[rsp], eax
  00347	0f 83 b3 03 00
	00		 jae	 $LN6@InitAnimat

; 33   : 		curAnimFrameNo = Anim->animFrameNo[i];

  0034d	8b 44 24 58	 mov	 eax, DWORD PTR i$[rsp]
  00351	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR Anim$[rsp]
  00359	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0035c	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00360	66 89 84 24 98
	00 00 00	 mov	 WORD PTR curAnimFrameNo$[rsp], ax

; 34   : 		frames[i] = malloc(sizeof(byte) * curAnimFrameNo);

  00368	0f b7 84 24 98
	00 00 00	 movzx	 eax, WORD PTR curAnimFrameNo$[rsp]
  00370	8b c8		 mov	 ecx, eax
  00372	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00378	8b 4c 24 58	 mov	 ecx, DWORD PTR i$[rsp]
  0037c	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR frames$[rsp]
  00384	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax

; 35   : 		Anim->frameTextures[i] = malloc(sizeof(uint*) * curAnimFrameNo);

  00388	0f b7 84 24 98
	00 00 00	 movzx	 eax, WORD PTR curAnimFrameNo$[rsp]
  00390	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv189[rsp], rax
  00398	b8 08 00 00 00	 mov	 eax, 8
  0039d	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR tv189[rsp]
  003a5	48 f7 e1	 mul	 rcx
  003a8	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  003af	48 0f 42 c1	 cmovb	 rax, rcx
  003b3	48 8b c8	 mov	 rcx, rax
  003b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  003bc	8b 4c 24 58	 mov	 ecx, DWORD PTR i$[rsp]
  003c0	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR Anim$[rsp]
  003c8	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  003cc	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax

; 36   : 		glCreateTextures(GL_TEXTURE_2D, curAnimFrameNo, Anim->frameTextures[i]);

  003d0	8b 44 24 58	 mov	 eax, DWORD PTR i$[rsp]
  003d4	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR Anim$[rsp]
  003dc	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  003e0	0f b7 94 24 98
	00 00 00	 movzx	 edx, WORD PTR curAnimFrameNo$[rsp]
  003e8	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  003ec	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  003f1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewCreateTextures
  003f8	ff 10		 call	 QWORD PTR [rax]
  003fa	90		 npad	 1

; 37   : 		for (j = 0; j < curAnimFrameNo; j++) {

  003fb	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR j$[rsp], 0
  00406	eb 10		 jmp	 SHORT $LN10@InitAnimat
$LN8@InitAnimat:
  00408	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  0040f	ff c0		 inc	 eax
  00411	89 84 24 a8 00
	00 00		 mov	 DWORD PTR j$[rsp], eax
$LN10@InitAnimat:
  00418	0f b7 84 24 98
	00 00 00	 movzx	 eax, WORD PTR curAnimFrameNo$[rsp]
  00420	39 84 24 a8 00
	00 00		 cmp	 DWORD PTR j$[rsp], eax
  00427	0f 8d ce 02 00
	00		 jge	 $LN9@InitAnimat

; 38   : 			memset(path, 0, pathSize);

  0042d	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR path$[rsp]
  00435	33 c0		 xor	 eax, eax
  00437	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pathSize$[rsp]
  0043f	f3 aa		 rep stosb

; 39   : 			strcpy_s(path, pathSize, images);

  00441	4c 8b 44 24 68	 mov	 r8, QWORD PTR images$[rsp]
  00446	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR pathSize$[rsp]
  0044e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  00456	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcpy_s

; 40   : 			if (wrapper) {

  0045c	48 83 bc 24 78
	01 00 00 00	 cmp	 QWORD PTR wrapper$[rsp], 0
  00465	74 3a		 je	 SHORT $LN12@InitAnimat

; 41   : 				strcat_s(path, pathSize, wrapper);

  00467	4c 8b 84 24 78
	01 00 00	 mov	 r8, QWORD PTR wrapper$[rsp]
  0046f	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR pathSize$[rsp]
  00477	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  0047f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcat_s

; 42   : 				strcat_s(path, pathSize, slash);

  00485	4c 8b 44 24 70	 mov	 r8, QWORD PTR slash$[rsp]
  0048a	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR pathSize$[rsp]
  00492	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  0049a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcat_s
  004a0	90		 npad	 1
$LN12@InitAnimat:

; 43   : 			}
; 44   : 			if (paths && paths[i]) {

  004a1	48 83 bc 24 68
	01 00 00 00	 cmp	 QWORD PTR paths$[rsp], 0
  004aa	74 55		 je	 SHORT $LN13@InitAnimat
  004ac	8b 44 24 58	 mov	 eax, DWORD PTR i$[rsp]
  004b0	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR paths$[rsp]
  004b8	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  004bd	74 42		 je	 SHORT $LN13@InitAnimat

; 45   : 				strcat_s(path, pathSize, paths[i]);

  004bf	8b 44 24 58	 mov	 eax, DWORD PTR i$[rsp]
  004c3	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR paths$[rsp]
  004cb	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  004cf	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR pathSize$[rsp]
  004d7	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  004df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcat_s

; 46   : 				strcat_s(path, pathSize, slash);

  004e5	4c 8b 44 24 70	 mov	 r8, QWORD PTR slash$[rsp]
  004ea	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR pathSize$[rsp]
  004f2	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  004fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcat_s
  00500	90		 npad	 1
$LN13@InitAnimat:

; 47   : 			}
; 48   : 			sprintf_s(buffer, bufferSize, "%d", j);

  00501	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR j$[rsp]
  00509	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd@
  00510	48 8b 54 24 50	 mov	 rdx, QWORD PTR bufferSize$[rsp]
  00515	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  0051d	e8 00 00 00 00	 call	 sprintf_s

; 49   : 			strcat_s(path, pathSize, buffer);

  00522	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR buffer$[rsp]
  0052a	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR pathSize$[rsp]
  00532	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  0053a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcat_s

; 50   : 			strcat_s(path, pathSize, pngExtension);

  00540	4c 8b 44 24 78	 mov	 r8, QWORD PTR pngExtension$[rsp]
  00545	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR pathSize$[rsp]
  0054d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  00555	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcat_s

; 51   : 			frames[i] = TryGetFrame2(path, &isNull);

  0055b	48 8d 94 24 b4
	00 00 00	 lea	 rdx, QWORD PTR isNull$[rsp]
  00563	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  0056b	e8 00 00 00 00	 call	 TryGetFrame2
  00570	8b 4c 24 58	 mov	 ecx, DWORD PTR i$[rsp]
  00574	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR frames$[rsp]
  0057c	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax

; 52   : 			if (!frames[i]) ThrowImageError();

  00580	8b 44 24 58	 mov	 eax, DWORD PTR i$[rsp]
  00584	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR frames$[rsp]
  0058c	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00591	75 54		 jne	 SHORT $LN14@InitAnimat
  00593	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFAFENDL@tried?5to?5load?5?$CC@
  0059a	e8 00 00 00 00	 call	 print
  0059f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  005a7	e8 00 00 00 00	 call	 print
  005ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03BMLMMEDG@?$CC?4?6@
  005b3	e8 00 00 00 00	 call	 print
  005b8	e8 00 00 00 00	 call	 stbi_failure_reason
  005bd	48 98		 cdqe
  005bf	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR message$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Debug.h

; 31   : 	printf("%s\n", message);

  005c7	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR message$[rsp]
  005cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03OFAPEBGM@?$CFs?6@
  005d6	e8 00 00 00 00	 call	 printf

; 32   : #ifndef IGNORE_ERRORS
; 33   : 	DebugBreak();

  005db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DebugBreak
  005e1	90		 npad	 1
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\animations.c

; 52   : 			if (!frames[i]) ThrowImageError();

  005e2	e9 96 01 00 00	 jmp	 $LN1@InitAnimat
$LN14@InitAnimat:

; 53   : 			glBindTexture(GL_TEXTURE_2D, Anim->frameTextures[i][j]);

  005e7	8b 44 24 58	 mov	 eax, DWORD PTR i$[rsp]
  005eb	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR Anim$[rsp]
  005f3	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  005f7	48 63 94 24 a8
	00 00 00	 movsxd	 rdx, DWORD PTR j$[rsp]
  005ff	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00603	8b 14 90	 mov	 edx, DWORD PTR [rax+rdx*4]
  00606	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  0060b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glBindTexture

; 54   : 			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);

  00611	41 b8 00 26 00
	00		 mov	 r8d, 9728		; 00002600H
  00617	ba 01 28 00 00	 mov	 edx, 10241		; 00002801H
  0061c	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  00621	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 55   : 			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

  00627	41 b8 00 26 00
	00		 mov	 r8d, 9728		; 00002600H
  0062d	ba 00 28 00 00	 mov	 edx, 10240		; 00002800H
  00632	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  00637	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 56   : 			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER);

  0063d	41 b8 2d 81 00
	00		 mov	 r8d, 33069		; 0000812dH
  00643	ba 02 28 00 00	 mov	 edx, 10242		; 00002802H
  00648	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  0064d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 57   : 			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_BORDER);

  00653	41 b8 2d 81 00
	00		 mov	 r8d, 33069		; 0000812dH
  00659	ba 03 28 00 00	 mov	 edx, 10243		; 00002803H
  0065e	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  00663	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 58   : 			glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, frames[i]);

  00669	8b 44 24 58	 mov	 eax, DWORD PTR i$[rsp]
  0066d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR frames$[rsp]
  00675	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00679	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  0067e	c7 44 24 38 01
	14 00 00	 mov	 DWORD PTR [rsp+56], 5121 ; 00001401H
  00686	c7 44 24 30 08
	19 00 00	 mov	 DWORD PTR [rsp+48], 6408 ; 00001908H
  0068e	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00696	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR height
  0069c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  006a0	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR width
  006a7	41 b8 08 19 00
	00		 mov	 r8d, 6408		; 00001908H
  006ad	33 d2		 xor	 edx, edx
  006af	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  006b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexImage2D

; 59   : 			if (isNull) glBindTextureUnit(textureUnitIndex, Anim->frameTextures[i][j]);

  006ba	0f b6 84 24 b4
	00 00 00	 movzx	 eax, BYTE PTR isNull$[rsp]
  006c2	85 c0		 test	 eax, eax
  006c4	74 30		 je	 SHORT $LN15@InitAnimat
  006c6	8b 44 24 58	 mov	 eax, DWORD PTR i$[rsp]
  006ca	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR Anim$[rsp]
  006d2	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  006d6	48 63 94 24 a8
	00 00 00	 movsxd	 rdx, DWORD PTR j$[rsp]
  006de	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  006e2	8b 14 90	 mov	 edx, DWORD PTR [rax+rdx*4]
  006e5	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR textureUnitIndex$[rsp]
  006ec	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewBindTextureUnit
  006f3	ff 10		 call	 QWORD PTR [rax]
  006f5	90		 npad	 1
$LN15@InitAnimat:

; 60   : 			//printf("binding texture unit index %u to texture %u.\n", textureUnitIndex, Anim->frameTextures[i][j]);
; 61   : 		}

  006f6	e9 0d fd ff ff	 jmp	 $LN8@InitAnimat
$LN9@InitAnimat:

; 62   : 	}

  006fb	e9 2d fc ff ff	 jmp	 $LN5@InitAnimat
$LN6@InitAnimat:

; 63   : 	glBindTexture(GL_TEXTURE_2D, Anim->frameTextures[0][0]);

  00700	b8 08 00 00 00	 mov	 eax, 8
  00705	48 6b c0 00	 imul	 rax, rax, 0
  00709	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR Anim$[rsp]
  00711	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00715	ba 04 00 00 00	 mov	 edx, 4
  0071a	48 6b d2 00	 imul	 rdx, rdx, 0
  0071e	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00722	8b 14 10	 mov	 edx, DWORD PTR [rax+rdx]
  00725	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  0072a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glBindTexture

; 64   : 	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, *frames);

  00730	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR frames$[rsp]
  00738	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0073b	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00740	c7 44 24 38 01
	14 00 00	 mov	 DWORD PTR [rsp+56], 5121 ; 00001401H
  00748	c7 44 24 30 08
	19 00 00	 mov	 DWORD PTR [rsp+48], 6408 ; 00001908H
  00750	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00758	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR height
  0075e	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00762	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR width
  00769	41 b8 08 19 00
	00		 mov	 r8d, 6408		; 00001908H
  0076f	33 d2		 xor	 edx, edx
  00771	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  00776	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexImage2D
  0077c	90		 npad	 1
$LN1@InitAnimat:

; 65   : }

  0077d	48 8b cc	 mov	 rcx, rsp
  00780	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:InitAnimator$rtcFrameData
  00787	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0078c	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00794	48 33 cc	 xor	 rcx, rsp
  00797	e8 00 00 00 00	 call	 __security_check_cookie
  0079c	48 81 c4 50 01
	00 00		 add	 rsp, 336		; 00000150H
  007a3	5f		 pop	 rdi
  007a4	c3		 ret	 0
InitAnimator ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\animations.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Debug.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\animations.c
_TEXT	SEGMENT
bufferSize$ = 80
i$ = 88
maxPathNo$ = 92
isLarger$ = 96
curLen$ = 100
pathSize$ = 104
path$ = 112
buffer$ = 120
curAnimFrameNo$ = 128
frames$ = 136
j$ = 144
frameNull$ = 164
message$ = 192
tv352 = 200
tv353 = 208
tv78 = 216
tv80 = 220
tv85 = 224
tv345 = 232
tv346 = 240
tv145 = 248
tv158 = 256
tv187 = 264
__$ArrayPad$ = 272
Anim$ = 304
paths$ = 312
textureUnitIndex$ = 320
wrapper$ = 328
InitAnimator2 PROC

; 66   : void InitAnimator2(Animator* Anim, char** paths, uint textureUnitIndex, char* wrapper) {//don't call this other than from start. time complexity is ~ O(curAnimFrameNo * noOfAnims). also, this function should only be called **ONCE PER BATCH OF TEXTURES**. there is no difference if you initialize two animators with the same batch of textures other than an extremely drawn out startup time.

$LN32:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec 20 01
	00 00		 sub	 rsp, 288		; 00000120H
  0001c	48 8d 7c 24 50	 lea	 rdi, QWORD PTR [rsp+80]
  00021	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR [rsp+304]
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c4	 xor	 rax, rsp
  0003f	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 67   : 	const rsize_t bufferSize = sizeof(char) * 4;

  00053	48 c7 44 24 50
	04 00 00 00	 mov	 QWORD PTR bufferSize$[rsp], 4

; 68   : 	ushort i;
; 69   : 	ushort maxPathNo = 0;

  0005c	33 c0		 xor	 eax, eax
  0005e	66 89 44 24 5c	 mov	 WORD PTR maxPathNo$[rsp], ax

; 70   : 	bool isLarger;
; 71   : 	ushort curLen;
; 72   : 	for (i = 0; i < Anim->noOfAnims; i++) {

  00063	33 c0		 xor	 eax, eax
  00065	66 89 44 24 58	 mov	 WORD PTR i$[rsp], ax
  0006a	eb 0d		 jmp	 SHORT $LN4@InitAnimat
$LN2@InitAnimat:
  0006c	0f b7 44 24 58	 movzx	 eax, WORD PTR i$[rsp]
  00071	66 ff c0	 inc	 ax
  00074	66 89 44 24 58	 mov	 WORD PTR i$[rsp], ax
$LN4@InitAnimat:
  00079	0f b7 44 24 58	 movzx	 eax, WORD PTR i$[rsp]
  0007e	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR Anim$[rsp]
  00086	0f b7 49 22	 movzx	 ecx, WORD PTR [rcx+34]
  0008a	3b c1		 cmp	 eax, ecx
  0008c	0f 8d eb 00 00
	00		 jge	 $LN3@InitAnimat

; 73   : 		isLarger = (curLen = strlen(paths[i])) > maxPathNo;

  00092	0f b7 44 24 58	 movzx	 eax, WORD PTR i$[rsp]
  00097	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR paths$[rsp]
  0009f	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  000a3	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv352[rsp], rax
  000ab	48 c7 84 24 d0
	00 00 00 ff ff
	ff ff		 mov	 QWORD PTR tv353[rsp], -1
$LL31@InitAnimat:
  000b7	48 ff 84 24 d0
	00 00 00	 inc	 QWORD PTR tv353[rsp]
  000bf	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR tv352[rsp]
  000c7	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tv353[rsp]
  000cf	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  000d3	75 e2		 jne	 SHORT $LL31@InitAnimat
  000d5	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR tv353[rsp]
  000dd	66 89 44 24 64	 mov	 WORD PTR curLen$[rsp], ax
  000e2	0f b7 44 24 64	 movzx	 eax, WORD PTR curLen$[rsp]
  000e7	0f b7 4c 24 5c	 movzx	 ecx, WORD PTR maxPathNo$[rsp]
  000ec	3b c1		 cmp	 eax, ecx
  000ee	7e 0d		 jle	 SHORT $LN16@InitAnimat
  000f0	c7 84 24 d8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv78[rsp], 1
  000fb	eb 0b		 jmp	 SHORT $LN17@InitAnimat
$LN16@InitAnimat:
  000fd	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv78[rsp], 0
$LN17@InitAnimat:
  00108	83 bc 24 d8 00
	00 00 00	 cmp	 DWORD PTR tv78[rsp], 0
  00110	75 0d		 jne	 SHORT $LN18@InitAnimat
  00112	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv80[rsp], 0
  0011d	eb 0b		 jmp	 SHORT $LN19@InitAnimat
$LN18@InitAnimat:
  0011f	c7 84 24 dc 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv80[rsp], 1
$LN19@InitAnimat:
  0012a	0f b6 84 24 dc
	00 00 00	 movzx	 eax, BYTE PTR tv80[rsp]
  00132	88 44 24 60	 mov	 BYTE PTR isLarger$[rsp], al

; 74   : 		maxPathNo = maxPathNo * !isLarger + curLen * isLarger;

  00136	0f b6 44 24 60	 movzx	 eax, BYTE PTR isLarger$[rsp]
  0013b	85 c0		 test	 eax, eax
  0013d	75 0d		 jne	 SHORT $LN20@InitAnimat
  0013f	c7 84 24 e0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv85[rsp], 1
  0014a	eb 0b		 jmp	 SHORT $LN21@InitAnimat
$LN20@InitAnimat:
  0014c	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv85[rsp], 0
$LN21@InitAnimat:
  00157	0f b7 44 24 5c	 movzx	 eax, WORD PTR maxPathNo$[rsp]
  0015c	0f af 84 24 e0
	00 00 00	 imul	 eax, DWORD PTR tv85[rsp]
  00164	0f b7 4c 24 64	 movzx	 ecx, WORD PTR curLen$[rsp]
  00169	0f b6 54 24 60	 movzx	 edx, BYTE PTR isLarger$[rsp]
  0016e	0f af ca	 imul	 ecx, edx
  00171	03 c1		 add	 eax, ecx
  00173	66 89 44 24 5c	 mov	 WORD PTR maxPathNo$[rsp], ax

; 75   : 	}

  00178	e9 ef fe ff ff	 jmp	 $LN2@InitAnimat
$LN3@InitAnimat:

; 76   : 	const rsize_t pathSize = sizeof(char) * (14 + strlen(wrapper) + maxPathNo) + bufferSize;

  0017d	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR wrapper$[rsp]
  00185	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv345[rsp], rax
  0018d	48 c7 84 24 f0
	00 00 00 ff ff
	ff ff		 mov	 QWORD PTR tv346[rsp], -1
$LL30@InitAnimat:
  00199	48 ff 84 24 f0
	00 00 00	 inc	 QWORD PTR tv346[rsp]
  001a1	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR tv345[rsp]
  001a9	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv346[rsp]
  001b1	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  001b5	75 e2		 jne	 SHORT $LL30@InitAnimat
  001b7	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR tv346[rsp]
  001bf	0f b7 4c 24 5c	 movzx	 ecx, WORD PTR maxPathNo$[rsp]
  001c4	48 8b 54 24 50	 mov	 rdx, QWORD PTR bufferSize$[rsp]
  001c9	48 03 d0	 add	 rdx, rax
  001cc	48 8b c2	 mov	 rax, rdx
  001cf	48 8d 44 01 0e	 lea	 rax, QWORD PTR [rcx+rax+14]
  001d4	48 89 44 24 68	 mov	 QWORD PTR pathSize$[rsp], rax

; 77   : 	char* path = malloc(pathSize);

  001d9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pathSize$[rsp]
  001de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  001e4	48 89 44 24 70	 mov	 QWORD PTR path$[rsp], rax

; 78   : 	char* buffer = malloc(bufferSize);

  001e9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR bufferSize$[rsp]
  001ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  001f4	48 89 44 24 78	 mov	 QWORD PTR buffer$[rsp], rax

; 79   : 	Anim->frameTextures = malloc(sizeof(uint*) * Anim->noOfAnims);//why do i barely use calloc? because i don't need the overhead of zeroing the memory when most of the time i don't need the memory zeroed. Maybe someday i will want that memory zeroed. (⚆_⚆)

  001f9	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR Anim$[rsp]
  00201	0f b7 40 22	 movzx	 eax, WORD PTR [rax+34]
  00205	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv145[rsp], rax
  0020d	b8 08 00 00 00	 mov	 eax, 8
  00212	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv145[rsp]
  0021a	48 f7 e1	 mul	 rcx
  0021d	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00224	48 0f 42 c1	 cmovb	 rax, rcx
  00228	48 8b c8	 mov	 rcx, rax
  0022b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00231	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR Anim$[rsp]
  00239	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 80   : 	ushort curAnimFrameNo;
; 81   : 	byte** frames = malloc(sizeof(byte*) * Anim->noOfAnims);//outer pointer for holding groups of bytes which are in animations, inner pointers for holding the groups of images in each animation.

  0023d	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR Anim$[rsp]
  00245	0f b7 40 22	 movzx	 eax, WORD PTR [rax+34]
  00249	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv158[rsp], rax
  00251	b8 08 00 00 00	 mov	 eax, 8
  00256	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv158[rsp]
  0025e	48 f7 e1	 mul	 rcx
  00261	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00268	48 0f 42 c1	 cmovb	 rax, rcx
  0026c	48 8b c8	 mov	 rcx, rax
  0026f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00275	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR frames$[rsp], rax

; 82   : 	glActiveTexture(Anim->textureID);

  0027d	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR Anim$[rsp]
  00285	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00288	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewActiveTexture
  0028f	ff 10		 call	 QWORD PTR [rax]

; 83   : 	int j;
; 84   : 	Anim->animET = .0f;

  00291	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR Anim$[rsp]
  00299	0f 57 c0	 xorps	 xmm0, xmm0
  0029c	f3 0f 11 40 24	 movss	 DWORD PTR [rax+36], xmm0

; 85   : 	Anim->curAnimFrame = -1;

  002a1	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  002a6	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR Anim$[rsp]
  002ae	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax

; 86   : 	bool frameNull;
; 87   : 	for (i = 0; i < Anim->noOfAnims; i++) {

  002b2	33 c0		 xor	 eax, eax
  002b4	66 89 44 24 58	 mov	 WORD PTR i$[rsp], ax
  002b9	eb 0d		 jmp	 SHORT $LN7@InitAnimat
$LN5@InitAnimat:
  002bb	0f b7 44 24 58	 movzx	 eax, WORD PTR i$[rsp]
  002c0	66 ff c0	 inc	 ax
  002c3	66 89 44 24 58	 mov	 WORD PTR i$[rsp], ax
$LN7@InitAnimat:
  002c8	0f b7 44 24 58	 movzx	 eax, WORD PTR i$[rsp]
  002cd	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR Anim$[rsp]
  002d5	0f b7 49 22	 movzx	 ecx, WORD PTR [rcx+34]
  002d9	3b c1		 cmp	 eax, ecx
  002db	0f 8d 69 03 00
	00		 jge	 $LN6@InitAnimat

; 88   : 		curAnimFrameNo = Anim->animFrameNo[i];

  002e1	0f b7 44 24 58	 movzx	 eax, WORD PTR i$[rsp]
  002e6	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR Anim$[rsp]
  002ee	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002f1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002f5	66 89 84 24 80
	00 00 00	 mov	 WORD PTR curAnimFrameNo$[rsp], ax

; 89   : 		Anim->frameTextures[i] = malloc(sizeof(uint*) * curAnimFrameNo);

  002fd	0f b7 84 24 80
	00 00 00	 movzx	 eax, WORD PTR curAnimFrameNo$[rsp]
  00305	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv187[rsp], rax
  0030d	b8 08 00 00 00	 mov	 eax, 8
  00312	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv187[rsp]
  0031a	48 f7 e1	 mul	 rcx
  0031d	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00324	48 0f 42 c1	 cmovb	 rax, rcx
  00328	48 8b c8	 mov	 rcx, rax
  0032b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00331	0f b7 4c 24 58	 movzx	 ecx, WORD PTR i$[rsp]
  00336	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR Anim$[rsp]
  0033e	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00342	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax

; 90   : 		glCreateTextures(GL_TEXTURE_2D, curAnimFrameNo, Anim->frameTextures[i]);

  00346	0f b7 44 24 58	 movzx	 eax, WORD PTR i$[rsp]
  0034b	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR Anim$[rsp]
  00353	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00357	0f b7 94 24 80
	00 00 00	 movzx	 edx, WORD PTR curAnimFrameNo$[rsp]
  0035f	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  00363	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  00368	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewCreateTextures
  0036f	ff 10		 call	 QWORD PTR [rax]
  00371	90		 npad	 1

; 91   : 		for (j = 0; j < curAnimFrameNo; j++) {

  00372	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR j$[rsp], 0
  0037d	eb 10		 jmp	 SHORT $LN10@InitAnimat
$LN8@InitAnimat:
  0037f	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  00386	ff c0		 inc	 eax
  00388	89 84 24 90 00
	00 00		 mov	 DWORD PTR j$[rsp], eax
$LN10@InitAnimat:
  0038f	0f b7 84 24 80
	00 00 00	 movzx	 eax, WORD PTR curAnimFrameNo$[rsp]
  00397	39 84 24 90 00
	00 00		 cmp	 DWORD PTR j$[rsp], eax
  0039e	0f 8d a1 02 00
	00		 jge	 $LN9@InitAnimat

; 92   : 			memset(path, 0, pathSize);

  003a4	48 8b 7c 24 70	 mov	 rdi, QWORD PTR path$[rsp]
  003a9	33 c0		 xor	 eax, eax
  003ab	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pathSize$[rsp]
  003b0	f3 aa		 rep stosb

; 93   : 			strcpy_s(path, pathSize, "images/");

  003b2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07BPPBCINE@images?1@
  003b9	48 8b 54 24 68	 mov	 rdx, QWORD PTR pathSize$[rsp]
  003be	48 8b 4c 24 70	 mov	 rcx, QWORD PTR path$[rsp]
  003c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcpy_s

; 94   : 			if (wrapper) {

  003c9	48 83 bc 24 48
	01 00 00 00	 cmp	 QWORD PTR wrapper$[rsp], 0
  003d2	74 30		 je	 SHORT $LN11@InitAnimat

; 95   : 				strcat_s(path, pathSize, wrapper);

  003d4	4c 8b 84 24 48
	01 00 00	 mov	 r8, QWORD PTR wrapper$[rsp]
  003dc	48 8b 54 24 68	 mov	 rdx, QWORD PTR pathSize$[rsp]
  003e1	48 8b 4c 24 70	 mov	 rcx, QWORD PTR path$[rsp]
  003e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcat_s

; 96   : 				strcat_s(path, pathSize, "/");

  003ec	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01KMDKNFGN@?1@
  003f3	48 8b 54 24 68	 mov	 rdx, QWORD PTR pathSize$[rsp]
  003f8	48 8b 4c 24 70	 mov	 rcx, QWORD PTR path$[rsp]
  003fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcat_s
  00403	90		 npad	 1
$LN11@InitAnimat:

; 97   : 			}
; 98   : 			if (paths && paths[i]) {

  00404	48 83 bc 24 38
	01 00 00 00	 cmp	 QWORD PTR paths$[rsp], 0
  0040d	74 4d		 je	 SHORT $LN12@InitAnimat
  0040f	0f b7 44 24 58	 movzx	 eax, WORD PTR i$[rsp]
  00414	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR paths$[rsp]
  0041c	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00421	74 39		 je	 SHORT $LN12@InitAnimat

; 99   : 				strcat_s(path, pathSize, paths[i]);

  00423	0f b7 44 24 58	 movzx	 eax, WORD PTR i$[rsp]
  00428	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR paths$[rsp]
  00430	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  00434	48 8b 54 24 68	 mov	 rdx, QWORD PTR pathSize$[rsp]
  00439	48 8b 4c 24 70	 mov	 rcx, QWORD PTR path$[rsp]
  0043e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcat_s

; 100  : 				strcat_s(path, pathSize, "/");

  00444	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01KMDKNFGN@?1@
  0044b	48 8b 54 24 68	 mov	 rdx, QWORD PTR pathSize$[rsp]
  00450	48 8b 4c 24 70	 mov	 rcx, QWORD PTR path$[rsp]
  00455	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcat_s
  0045b	90		 npad	 1
$LN12@InitAnimat:

; 101  : 			}
; 102  : 			sprintf_s(buffer, bufferSize, "%d", j);

  0045c	44 8b 8c 24 90
	00 00 00	 mov	 r9d, DWORD PTR j$[rsp]
  00464	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd@
  0046b	48 8b 54 24 50	 mov	 rdx, QWORD PTR bufferSize$[rsp]
  00470	48 8b 4c 24 78	 mov	 rcx, QWORD PTR buffer$[rsp]
  00475	e8 00 00 00 00	 call	 sprintf_s

; 103  : 			strcat_s(path, pathSize, buffer);

  0047a	4c 8b 44 24 78	 mov	 r8, QWORD PTR buffer$[rsp]
  0047f	48 8b 54 24 68	 mov	 rdx, QWORD PTR pathSize$[rsp]
  00484	48 8b 4c 24 70	 mov	 rcx, QWORD PTR path$[rsp]
  00489	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcat_s

; 104  : 			strcat_s(path, pathSize, ".png");

  0048f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04EEOGCCFB@?4png@
  00496	48 8b 54 24 68	 mov	 rdx, QWORD PTR pathSize$[rsp]
  0049b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR path$[rsp]
  004a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcat_s

; 105  : 			frames[i] = TryGetFrame2(path, &frameNull);

  004a6	48 8d 94 24 a4
	00 00 00	 lea	 rdx, QWORD PTR frameNull$[rsp]
  004ae	48 8b 4c 24 70	 mov	 rcx, QWORD PTR path$[rsp]
  004b3	e8 00 00 00 00	 call	 TryGetFrame2
  004b8	0f b7 4c 24 58	 movzx	 ecx, WORD PTR i$[rsp]
  004bd	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR frames$[rsp]
  004c5	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax

; 107  : 			if (!frames[i]) ThrowImageError();

  004c9	0f b7 44 24 58	 movzx	 eax, WORD PTR i$[rsp]
  004ce	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR frames$[rsp]
  004d6	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  004db	75 51		 jne	 SHORT $LN13@InitAnimat
  004dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFAFENDL@tried?5to?5load?5?$CC@
  004e4	e8 00 00 00 00	 call	 print
  004e9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR path$[rsp]
  004ee	e8 00 00 00 00	 call	 print
  004f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03BMLMMEDG@?$CC?4?6@
  004fa	e8 00 00 00 00	 call	 print
  004ff	e8 00 00 00 00	 call	 stbi_failure_reason
  00504	48 98		 cdqe
  00506	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR message$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Debug.h

; 31   : 	printf("%s\n", message);

  0050e	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR message$[rsp]
  00516	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03OFAPEBGM@?$CFs?6@
  0051d	e8 00 00 00 00	 call	 printf

; 32   : #ifndef IGNORE_ERRORS
; 33   : 	DebugBreak();

  00522	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DebugBreak
  00528	90		 npad	 1
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\animations.c

; 107  : 			if (!frames[i]) ThrowImageError();

  00529	e9 69 01 00 00	 jmp	 $LN1@InitAnimat
$LN13@InitAnimat:

; 108  : 			glBindTexture(GL_TEXTURE_2D, Anim->frameTextures[i][j]);

  0052e	0f b7 44 24 58	 movzx	 eax, WORD PTR i$[rsp]
  00533	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR Anim$[rsp]
  0053b	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0053f	48 63 94 24 90
	00 00 00	 movsxd	 rdx, DWORD PTR j$[rsp]
  00547	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0054b	8b 14 90	 mov	 edx, DWORD PTR [rax+rdx*4]
  0054e	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  00553	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glBindTexture

; 109  : 			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);

  00559	41 b8 00 26 00
	00		 mov	 r8d, 9728		; 00002600H
  0055f	ba 01 28 00 00	 mov	 edx, 10241		; 00002801H
  00564	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  00569	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 110  : 			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

  0056f	41 b8 00 26 00
	00		 mov	 r8d, 9728		; 00002600H
  00575	ba 00 28 00 00	 mov	 edx, 10240		; 00002800H
  0057a	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  0057f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 111  : 			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER);

  00585	41 b8 2d 81 00
	00		 mov	 r8d, 33069		; 0000812dH
  0058b	ba 02 28 00 00	 mov	 edx, 10242		; 00002802H
  00590	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  00595	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 112  : 			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_BORDER);

  0059b	41 b8 2d 81 00
	00		 mov	 r8d, 33069		; 0000812dH
  005a1	ba 03 28 00 00	 mov	 edx, 10243		; 00002803H
  005a6	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  005ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 113  : 			glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, frames[i]);

  005b1	0f b7 44 24 58	 movzx	 eax, WORD PTR i$[rsp]
  005b6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR frames$[rsp]
  005be	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  005c2	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  005c7	c7 44 24 38 01
	14 00 00	 mov	 DWORD PTR [rsp+56], 5121 ; 00001401H
  005cf	c7 44 24 30 08
	19 00 00	 mov	 DWORD PTR [rsp+48], 6408 ; 00001908H
  005d7	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  005df	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR height
  005e5	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  005e9	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR width
  005f0	41 b8 08 19 00
	00		 mov	 r8d, 6408		; 00001908H
  005f6	33 d2		 xor	 edx, edx
  005f8	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  005fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexImage2D

; 114  : 			if (frameNull) glBindTextureUnit(textureUnitIndex, Anim->frameTextures[i][j]);

  00603	0f b6 84 24 a4
	00 00 00	 movzx	 eax, BYTE PTR frameNull$[rsp]
  0060b	85 c0		 test	 eax, eax
  0060d	74 31		 je	 SHORT $LN14@InitAnimat
  0060f	0f b7 44 24 58	 movzx	 eax, WORD PTR i$[rsp]
  00614	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR Anim$[rsp]
  0061c	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00620	48 63 94 24 90
	00 00 00	 movsxd	 rdx, DWORD PTR j$[rsp]
  00628	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0062c	8b 14 90	 mov	 edx, DWORD PTR [rax+rdx*4]
  0062f	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR textureUnitIndex$[rsp]
  00636	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewBindTextureUnit
  0063d	ff 10		 call	 QWORD PTR [rax]
  0063f	90		 npad	 1
$LN14@InitAnimat:

; 115  : 			//printf("binding texture unit index %u to texture %u.\n", textureUnitIndex, Anim->frameTextures[i][j]);
; 116  : 		}

  00640	e9 3a fd ff ff	 jmp	 $LN8@InitAnimat
$LN9@InitAnimat:

; 117  : 	}

  00645	e9 71 fc ff ff	 jmp	 $LN5@InitAnimat
$LN6@InitAnimat:

; 118  : 	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, *frames);

  0064a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR frames$[rsp]
  00652	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00655	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  0065a	c7 44 24 38 01
	14 00 00	 mov	 DWORD PTR [rsp+56], 5121 ; 00001401H
  00662	c7 44 24 30 08
	19 00 00	 mov	 DWORD PTR [rsp+48], 6408 ; 00001908H
  0066a	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00672	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR height
  00678	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0067c	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR width
  00683	41 b8 08 19 00
	00		 mov	 r8d, 6408		; 00001908H
  00689	33 d2		 xor	 edx, edx
  0068b	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  00690	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexImage2D
  00696	90		 npad	 1
$LN1@InitAnimat:

; 119  : }

  00697	48 8b cc	 mov	 rcx, rsp
  0069a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:InitAnimator2$rtcFrameData
  006a1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006a6	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006ae	48 33 cc	 xor	 rcx, rsp
  006b1	e8 00 00 00 00	 call	 __security_check_cookie
  006b6	48 81 c4 20 01
	00 00		 add	 rsp, 288		; 00000120H
  006bd	5f		 pop	 rdi
  006be	c3		 ret	 0
InitAnimator2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\animations.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Debug.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\animations.c
_TEXT	SEGMENT
frameNull$ = 84
frame$ = 104
message$ = 120
__$ArrayPad$ = 128
path$ = 160
textureUnitIndex$ = 168
textureID$ = 176
frameTex$ = 184
InitSingleTexture PROC

; 121  : void InitSingleTexture(char* path, uint textureUnitIndex, int textureID, uint **frameTex) {

$LN13:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	57		 push	 rdi
  00014	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  0001b	48 8d 7c 24 50	 lea	 rdi, QWORD PTR [rsp+80]
  00020	b9 10 00 00 00	 mov	 ecx, 16
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+160]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  0004d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 122  : 	glActiveTexture(textureID);

  00052	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR textureID$[rsp]
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewActiveTexture
  00060	ff 10		 call	 QWORD PTR [rax]

; 123  : 	*frameTex = malloc(sizeof(uint));//don't free this. learnt my lesson the hard way. no non-semantic errors generated, but the texture loaded after making this mistake will be the texture of that of the function in which the first of this mistake was made sometimes. this comment is a bit hard to read i know, maybe try freeing this to see for yourself (me when hypocracy). additionally, the texture loaded after freeing this will have a different in-shader texture id, making this error VERY hard to solve and find reasoning for.

  00062	b9 04 00 00 00	 mov	 ecx, 4
  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0006d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR frameTex$[rsp]
  00075	48 89 01	 mov	 QWORD PTR [rcx], rax

; 124  : 	glCreateTextures(GL_TEXTURE_2D, 1, *frameTex);

  00078	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR frameTex$[rsp]
  00080	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00083	ba 01 00 00 00	 mov	 edx, 1
  00088	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  0008d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewCreateTextures
  00094	ff 10		 call	 QWORD PTR [rax]

; 125  : 	//byte *frame = stbi_load(path, &width, &height, &channels, REQ_COMP);
; 126  : 	bool frameNull;
; 127  : 	byte* frame = TryGetFrame2(path, &frameNull);

  00096	48 8d 54 24 54	 lea	 rdx, QWORD PTR frameNull$[rsp]
  0009b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  000a3	e8 00 00 00 00	 call	 TryGetFrame2
  000a8	48 89 44 24 68	 mov	 QWORD PTR frame$[rsp], rax

; 128  : 	if (!frame) ThrowImageError();

  000ad	48 83 7c 24 68
	00		 cmp	 QWORD PTR frame$[rsp], 0
  000b3	75 4e		 jne	 SHORT $LN2@InitSingle
  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFAFENDL@tried?5to?5load?5?$CC@
  000bc	e8 00 00 00 00	 call	 print
  000c1	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  000c9	e8 00 00 00 00	 call	 print
  000ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03BMLMMEDG@?$CC?4?6@
  000d5	e8 00 00 00 00	 call	 print
  000da	e8 00 00 00 00	 call	 stbi_failure_reason
  000df	48 98		 cdqe
  000e1	48 89 44 24 78	 mov	 QWORD PTR message$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Debug.h

; 31   : 	printf("%s\n", message);

  000e6	48 8b 54 24 78	 mov	 rdx, QWORD PTR message$[rsp]
  000eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03OFAPEBGM@?$CFs?6@
  000f2	e8 00 00 00 00	 call	 printf

; 32   : #ifndef IGNORE_ERRORS
; 33   : 	DebugBreak();

  000f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DebugBreak
  000fd	90		 npad	 1
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\animations.c

; 128  : 	if (!frame) ThrowImageError();

  000fe	e9 d7 00 00 00	 jmp	 $LN1@InitSingle
$LN2@InitSingle:

; 129  : 	glBindTexture(GL_TEXTURE_2D, *frameTex);

  00103	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR frameTex$[rsp]
  0010b	8b 10		 mov	 edx, DWORD PTR [rax]
  0010d	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  00112	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glBindTexture

; 130  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);

  00118	41 b8 00 26 00
	00		 mov	 r8d, 9728		; 00002600H
  0011e	ba 01 28 00 00	 mov	 edx, 10241		; 00002801H
  00123	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  00128	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 131  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

  0012e	41 b8 00 26 00
	00		 mov	 r8d, 9728		; 00002600H
  00134	ba 00 28 00 00	 mov	 edx, 10240		; 00002800H
  00139	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  0013e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 132  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER);

  00144	41 b8 2d 81 00
	00		 mov	 r8d, 33069		; 0000812dH
  0014a	ba 02 28 00 00	 mov	 edx, 10242		; 00002802H
  0014f	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  00154	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 133  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_BORDER);

  0015a	41 b8 2d 81 00
	00		 mov	 r8d, 33069		; 0000812dH
  00160	ba 03 28 00 00	 mov	 edx, 10243		; 00002803H
  00165	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  0016a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 134  : 	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, frame);

  00170	48 8b 44 24 68	 mov	 rax, QWORD PTR frame$[rsp]
  00175	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  0017a	c7 44 24 38 01
	14 00 00	 mov	 DWORD PTR [rsp+56], 5121 ; 00001401H
  00182	c7 44 24 30 08
	19 00 00	 mov	 DWORD PTR [rsp+48], 6408 ; 00001908H
  0018a	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00192	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR height
  00198	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0019c	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR width
  001a3	41 b8 08 19 00
	00		 mov	 r8d, 6408		; 00001908H
  001a9	33 d2		 xor	 edx, edx
  001ab	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  001b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexImage2D

; 135  : 	if (frameNull) glBindTextureUnit(textureUnitIndex, *frameTex);

  001b6	0f b6 44 24 54	 movzx	 eax, BYTE PTR frameNull$[rsp]
  001bb	85 c0		 test	 eax, eax
  001bd	74 1b		 je	 SHORT $LN3@InitSingle
  001bf	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR frameTex$[rsp]
  001c7	8b 10		 mov	 edx, DWORD PTR [rax]
  001c9	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR textureUnitIndex$[rsp]
  001d0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewBindTextureUnit
  001d7	ff 10		 call	 QWORD PTR [rax]
  001d9	90		 npad	 1
$LN3@InitSingle:
$LN1@InitSingle:

; 136  : }

  001da	48 8b cc	 mov	 rcx, rsp
  001dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:InitSingleTexture$rtcFrameData
  001e4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001e9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001f1	48 33 cc	 xor	 rcx, rsp
  001f4	e8 00 00 00 00	 call	 __security_check_cookie
  001f9	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00200	5f		 pop	 rdi
  00201	c3		 ret	 0
InitSingleTexture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\animations.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Debug.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\animations.c
_TEXT	SEGMENT
frameTex$ = 80
frameNull$ = 100
frame$ = 120
message$ = 136
__$ArrayPad$ = 144
path$ = 176
textureUnitIndex$ = 184
textureID$ = 192
InitSingleTexture2 PROC

; 138  : void InitSingleTexture2(char* path, uint textureUnitIndex, int textureID) {

$LN13:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00016	48 8d 7c 24 50	 lea	 rdi, QWORD PTR [rsp+80]
  0001b	b9 14 00 00 00	 mov	 ecx, 20
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]
  0002f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00036	48 33 c4	 xor	 rax, rsp
  00039	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00048	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 139  : 	glActiveTexture(textureID);

  0004d	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR textureID$[rsp]
  00054	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewActiveTexture
  0005b	ff 10		 call	 QWORD PTR [rax]

; 140  : 	uint *frameTex = malloc(sizeof(uint));//don't free this. learnt my lesson the hard way. no non-semantic errors generated, but the texture loaded after making this mistake will be the texture of that of the function in which the first of this mistake was made sometimes. this comment is a bit hard to read i know, maybe try freeing this to see for yourself (me when hypocracy). additionally, the texture loaded after freeing this will have a different in-shader texture id, making this error VERY hard to solve and find reasoning for.

  0005d	b9 04 00 00 00	 mov	 ecx, 4
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00068	48 89 44 24 50	 mov	 QWORD PTR frameTex$[rsp], rax

; 141  : 	glCreateTextures(GL_TEXTURE_2D, 1, frameTex);

  0006d	4c 8b 44 24 50	 mov	 r8, QWORD PTR frameTex$[rsp]
  00072	ba 01 00 00 00	 mov	 edx, 1
  00077	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  0007c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewCreateTextures
  00083	ff 10		 call	 QWORD PTR [rax]

; 142  : 	//byte *frame = stbi_load(path, &width, &height, &channels, 4);
; 143  : 	bool frameNull;
; 144  : 	byte *frame = TryGetFrame2(path, &frameNull);

  00085	48 8d 54 24 64	 lea	 rdx, QWORD PTR frameNull$[rsp]
  0008a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  00092	e8 00 00 00 00	 call	 TryGetFrame2
  00097	48 89 44 24 78	 mov	 QWORD PTR frame$[rsp], rax

; 145  : 	if (!frame) ThrowImageError();

  0009c	48 83 7c 24 78
	00		 cmp	 QWORD PTR frame$[rsp], 0
  000a2	75 54		 jne	 SHORT $LN2@InitSingle
  000a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFAFENDL@tried?5to?5load?5?$CC@
  000ab	e8 00 00 00 00	 call	 print
  000b0	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  000b8	e8 00 00 00 00	 call	 print
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03BMLMMEDG@?$CC?4?6@
  000c4	e8 00 00 00 00	 call	 print
  000c9	e8 00 00 00 00	 call	 stbi_failure_reason
  000ce	48 98		 cdqe
  000d0	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR message$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Debug.h

; 31   : 	printf("%s\n", message);

  000d8	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR message$[rsp]
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03OFAPEBGM@?$CFs?6@
  000e7	e8 00 00 00 00	 call	 printf

; 32   : #ifndef IGNORE_ERRORS
; 33   : 	DebugBreak();

  000ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DebugBreak
  000f2	90		 npad	 1
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\animations.c

; 145  : 	if (!frame) ThrowImageError();

  000f3	e9 cb 00 00 00	 jmp	 $LN1@InitSingle
$LN2@InitSingle:

; 146  : 	glBindTexture(GL_TEXTURE_2D, frameTex);

  000f8	8b 54 24 50	 mov	 edx, DWORD PTR frameTex$[rsp]
  000fc	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  00101	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glBindTexture

; 147  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);

  00107	41 b8 00 26 00
	00		 mov	 r8d, 9728		; 00002600H
  0010d	ba 01 28 00 00	 mov	 edx, 10241		; 00002801H
  00112	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  00117	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 148  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

  0011d	41 b8 00 26 00
	00		 mov	 r8d, 9728		; 00002600H
  00123	ba 00 28 00 00	 mov	 edx, 10240		; 00002800H
  00128	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  0012d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 149  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER);

  00133	41 b8 2d 81 00
	00		 mov	 r8d, 33069		; 0000812dH
  00139	ba 02 28 00 00	 mov	 edx, 10242		; 00002802H
  0013e	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  00143	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 150  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_BORDER);

  00149	41 b8 2d 81 00
	00		 mov	 r8d, 33069		; 0000812dH
  0014f	ba 03 28 00 00	 mov	 edx, 10243		; 00002803H
  00154	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  00159	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 151  : 	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, frame);

  0015f	48 8b 44 24 78	 mov	 rax, QWORD PTR frame$[rsp]
  00164	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00169	c7 44 24 38 01
	14 00 00	 mov	 DWORD PTR [rsp+56], 5121 ; 00001401H
  00171	c7 44 24 30 08
	19 00 00	 mov	 DWORD PTR [rsp+48], 6408 ; 00001908H
  00179	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00181	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR height
  00187	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0018b	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR width
  00192	41 b8 08 19 00
	00		 mov	 r8d, 6408		; 00001908H
  00198	33 d2		 xor	 edx, edx
  0019a	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  0019f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexImage2D

; 152  : 	if (frameNull) glBindTextureUnit(textureUnitIndex, frameTex);

  001a5	0f b6 44 24 64	 movzx	 eax, BYTE PTR frameNull$[rsp]
  001aa	85 c0		 test	 eax, eax
  001ac	74 15		 je	 SHORT $LN3@InitSingle
  001ae	8b 54 24 50	 mov	 edx, DWORD PTR frameTex$[rsp]
  001b2	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR textureUnitIndex$[rsp]
  001b9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewBindTextureUnit
  001c0	ff 10		 call	 QWORD PTR [rax]
  001c2	90		 npad	 1
$LN3@InitSingle:
$LN1@InitSingle:

; 153  : }

  001c3	48 8b cc	 mov	 rcx, rsp
  001c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:InitSingleTexture2$rtcFrameData
  001cd	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001d2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001da	48 33 cc	 xor	 rcx, rsp
  001dd	e8 00 00 00 00	 call	 __security_check_cookie
  001e2	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  001e9	5f		 pop	 rdi
  001ea	c3		 ret	 0
InitSingleTexture2 ENDP
_TEXT	ENDS
END
