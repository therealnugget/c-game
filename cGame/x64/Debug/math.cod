; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35211.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	upVector
PUBLIC	rightVector
PUBLIC	leftVector
PUBLIC	downVector
PUBLIC	nugEpsilon
PUBLIC	x_int_tolerance_y
PUBLIC	fallBackVelocity
__4C2AD0C7_winpackagefamily@h DB 01H
__9DED9ED1_winapifamily@h DB 01H
__0B1C67B3_gl@h DB 01H
__D7C03EE9_glu@h DB 01H
__5B769280_glew@h DB 01H
__F2638511_stdbool@h DB 01H
__8C83BECC_concurrencysal@h DB 01H
__608E3340_sal@h DB 01H
__FB67E29A_vadefs@h DB 01H
__1D1B619C_vcruntime@h DB 01H
__735960E1_corecrt@h DB 01H
__955456CD_stddef@h DB 01H
__836A8CFC_stdint@h DB 01H
__0A1327A7_glfw3@h DB 01H
__1D9A7FA2_corecrt_math@h DB 01H
__2E93F1C0_math@h DB 01H
__7570C268_vectors@h DB 01H
__12FEDF4E_sdkddkver@h DB 01H
__9BAEE128_excpt@h DB 01H
__B7B53233_stdarg@h DB 01H
__6B04FCB3_specstrings_undef@h DB 01H
__F4027AF7_specstrings_strict@h DB 01H
__B90340D4_sdv_driverspecs@h DB 01H
__BFFF5AD3_driverspecs@h DB 01H
__32847078_specstrings@h DB 01H
__108B2620_corecrt_wctype@h DB 01H
__6CD6613D_ctype@h DB 01H
__30902A1F_kernelspecs@h DB 01H
__376FD5CA_basetsd@h DB 01H
__13DE2371_errno@h DB 01H
__8C6AE390_vcruntime_string@h DB 01H
__8ACB2152_corecrt_memcpy_s@h DB 01H
__EA6C9D17_corecrt_memory@h DB 01H
__0DF2AF52_corecrt_wstring@h DB 01H
__6E889ECC_string@h DB 01H
__9BEDF4DE_guiddef@h DB 01H
__51BFD2FE_pshpack4@h DB 01H
__31652CEA_poppack@h DB 01H
__5532AE4C_pshpack2@h DB 01H
__58A52B9A_pshpack8@h DB 01H
__57741015_pshpack1@h DB 01H
__CDE68C90_apiset@h DB 01H
__0BF06E8D_ktmtypes@h DB 01H
__40C200C0_winnt@h DB 01H
__9336F789_minwindef@h DB 01H
__55136115_windef@h DB 01H
__32205BF0_apisetcconv@h DB 01H
__B48FDEA0_minwinbase@h DB 01H
__3551B028_apiquery2@h DB 01H
__65BE04AA_processenv@h DB 01H
__4767CA46_fileapi@h DB 01H
__282E6C4B_fileapifromapp@h DB 01H
__393AF12C_debugapi@h DB 01H
__EBC502B8_utilapiset@h DB 01H
__1EAD8C69_handleapi@h DB 01H
__D8EF9B29_errhandlingapi@h DB 01H
__97FC1204_fibersapi@h DB 01H
__27448220_namedpipeapi@h DB 01H
__6EA33B2A_profileapi@h DB 01H
__EAC6F673_heapapi@h DB 01H
__D64EEA5A_ioapiset@h DB 01H
__144BD4B6_synchapi@h DB 01H
__03B1C640_interlockedapi@h DB 01H
__DC64CB38_processthreadsapi@h DB 01H
__D719B518_sysinfoapi@h DB 01H
__410385B1_memoryapi@h DB 01H
__C1AD45EF_enclaveapi@h DB 01H
__F4C3AA32_threadpoollegacyapiset@h DB 01H
__AC5A7A9F_threadpoolapiset@h DB 01H
__F5254B21_jobapi@h DB 01H
__BCEA6EE8_jobapi2@h DB 01H
__D18ACE72_wow64apiset@h DB 01H
__669B0D4A_libloaderapi@h DB 01H
__645F7034_securitybaseapi@h DB 01H
__67E58557_namespaceapi@h DB 01H
__599D9D3A_systemtopologyapi@h DB 01H
__2337E373_processtopologyapi@h DB 01H
__02BFF239_securityappcontainer@h DB 01H
__9C196272_realtimeapiset@h DB 01H
__5AB313A4_winerror@h DB 01H
__B7E7187B_timezoneapi@h DB 01H
__6DE9EB6F_winbase@h DB 01H
__56B2AFF2_wingdi@h DB 01H
__BA1161A9_tvout@h DB 01H
__0501A018_winuser@h DB 01H
__EF12FA99_datetimeapi@h DB 01H
__8FA7C3CA_winnls@h DB 01H
__390F0C47_stringapiset@h DB 01H
__28605B0A_wincontypes@h DB 01H
__BFBDE86D_consoleapi@h DB 01H
__C3CAFBF0_consoleapi2@h DB 01H
__C20891C7_consoleapi3@h DB 01H
__717C98B6_wincon@h DB 01H
__2884C177_verrsrc@h DB 01H
__A3FD3A34_winver@h DB 01H
__6F8AD9F1_reason@h DB 01H
__4C90FD6F_winreg@h DB 01H
__68AFEBAD_wnnc@h DB 01H
__5A7AB086_winnetwk@h DB 01H
__859C3CD3_cderr@h DB 01H
__81B12F1A_dde@h DB 01H
__DD3AF97A_ddeml@h DB 01H
__E6B47715_dlgs@h DB 01H
__944BD57D_lzexpand@h DB 01H
__E4B2DFC7_mmsyscom@h DB 01H
__5287D88F_mciapi@h DB 01H
__DBDC1384_mmiscapi@h DB 01H
__1A78C0D7_mmiscapi2@h DB 01H
__0D05975C_playsoundapi@h DB 01H
__757A63A9_mmeapi@h DB 01H
__6326AB05_timeapi@h DB 01H
__77D483B2_joystickapi@h DB 01H
__59CF7431_mmsystem@h DB 01H
__CEAC417E_nb30@h DB 01H
__3BA1A118_rpcdcep@h DB 01H
__74064437_rpcdce@h DB 01H
__90546602_rpcnsi@h DB 01H
__83114A2C_rpcnterr@h DB 01H
__CA67519E_rpcasync@h DB 01H
__D8CEBCD8_rpc@h DB 01H
__9F43AC2D_shellapi@h DB 01H
__6C8D3703_winperf@h DB 01H
__AB40A29E_inaddr@h DB 01H
__40D4FEA5_winsock@h DB 01H
__51394074_bcrypt@h DB 01H
__F177C154_ncrypt@h DB 01H
__1445529E_dpapi@h DB 01H
__5743FB20_wincrypt@h DB 01H
__97CA12BF_winefs@h DB 01H
__6DF63719_rpcnsip@h DB 01H
__031EFCA1_rpcsal@h DB 01H
__BA08D1DA_rpcndr@h DB 01H
__3A941F83_wtypesbase@h DB 01H
__C244FEE1_wtypes@h DB 01H
__FB7C5F97_winioctl@h DB 01H
__4B65E4AC_winsmcrd@h DB 01H
__1EA80168_winscard@h DB 01H
__516FC0F9_prsht@h DB 01H
__88BA11C6_winspool@h DB 01H
__211DB995_corecrt_malloc@h DB 01H
__99AED4FB_corecrt_search@h DB 01H
__8B813BF6_corecrt_wstdlib@h DB 01H
__3D1CA2C3_limits@h DB 01H
__E8FB0A68_stdlib@h DB 01H
__18DB4C56_unknwnbase@h DB 01H
__1AE6FA1A_objidlbase@h DB 01H
__7F98E437_cguid@h DB 01H
__6B2DFB49_combaseapi@h DB 01H
__CB0E8B37_unknwn@h DB 01H
__D981EF0A_objidl@h DB 01H
__37089EB8_oaidl@h DB 01H
__CA2DDD8B_propidlbase@h DB 01H
__39ED323E_coml2api@h DB 01H
__78E82682_oleidl@h DB 01H
__97883CFE_servprov@h DB 01H
__CE01DDB9_msxml@h DB 01H
__A4784895_urlmon@h DB 01H
__325F1C97_propidl@h DB 01H
__D3D43343_objbase@h DB 01H
__B3A2AF1B_oleauto@h DB 01H
__5722A8AA_ole2@h DB 01H
__590A450A_commdlg@h DB 01H
__2FE8A10C_stralign@h DB 01H
__34558472_winsvc@h DB 01H
__058845F1_mcx@h DB 01H
__7F16006B_ime_cmodes@h DB 01H
__0A3AF599_imm@h DB 01H
__11B87C25_Windows@h DB 01H
__60B45B40_corecrt_stdio_config@h DB 01H
__CFA3741E_corecrt_wstdio@h DB 01H
__B3FE3303_stdio@h DB 01H
__DD0D2CA2_main@h DB 01H
__9378A798_Debug@h DB 01H
__29DBA756_animations@h DB 01H
__A6D01AF2_Physics@h DB 01H
__1408441D_Mesh@h DB 01H
__7CA6EAD6_EntityManager@h DB 01H
__7BF3DF52_math@h DB 01H
__FAAF98CA_Player@h DB 01H
__60BF1C41_scene 1@h DB 01H
__94624A77_Dictionary@h DB 01H
__EC2106DA_math@c DB 01H
nugEpsilon DD	03727c5acr			; 1e-05
x_int_tolerance_y DD 03d8f5c29r			; 0.07
upVector DD	000000000r			; 0
	DD	03f800000r			; 1
rightVector DD	03f800000r			; 1
	DD	000000000r			; 0
leftVector DD	0bf800000r			; -1
	DD	000000000r			; 0
downVector DD	000000000r			; 0
	DD	0bf800000r			; -1
$S1	DD	00H
	DD	01H
fallBackVelocity DD 03e99999ar			; 0.3
	DD	03e99999ar			; 0.3
maxNugRand DQ	0000000100000000H
PUBLIC	AABBsOverlap
PUBLIC	IsX
PUBLIC	TakePlrDmg
PUBLIC	FMin
PUBLIC	FMax
PUBLIC	IsLayer
PUBLIC	NormalDot
PUBLIC	DotProduct
PUBLIC	NormalizeVector
PUBLIC	NormalizedVector
PUBLIC	VectorDivByScalar
PUBLIC	Magnitude
PUBLIC	VectorMultAssign
PUBLIC	VectorMult
PUBLIC	FromToVector
PUBLIC	VectorByScalar
PUBLIC	TakeVectorsAssign
PUBLIC	AddVectorsAssign
PUBLIC	TakeVectors
PUBLIC	AddVectors
PUBLIC	FAbs
pdata	SEGMENT
$pdata$AABBsOverlap DD imagerel $LN243
	DD	imagerel $LN243+6442
	DD	imagerel $unwind$AABBsOverlap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IsX DD	imagerel $LN15
	DD	imagerel $LN15+241
	DD	imagerel $unwind$IsX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TakePlrDmg DD imagerel $LN13
	DD	imagerel $LN13+137
	DD	imagerel $unwind$TakePlrDmg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$FMin DD	imagerel $LN9
	DD	imagerel $LN9+172
	DD	imagerel $unwind$FMin
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$FMax DD	imagerel $LN9
	DD	imagerel $LN9+172
	DD	imagerel $unwind$FMax
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IsLayer DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$IsLayer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$NormalDot DD imagerel $LN23
	DD	imagerel $LN23+208
	DD	imagerel $unwind$NormalDot
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DotProduct DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$DotProduct
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$NormalizeVector DD imagerel $LN10
	DD	imagerel $LN10+49
	DD	imagerel $unwind$NormalizeVector
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$NormalizedVector DD imagerel $LN9
	DD	imagerel $LN9+234
	DD	imagerel $unwind$NormalizedVector
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$VectorDivByScalar DD imagerel $LN3
	DD	imagerel $LN3+118
	DD	imagerel $unwind$VectorDivByScalar
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Magnitude DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$Magnitude
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$VectorMultAssign DD imagerel $LN5
	DD	imagerel $LN5+170
	DD	imagerel $unwind$VectorMultAssign
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$VectorMult DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$VectorMult
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$FromToVector DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$FromToVector
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$VectorByScalar DD imagerel $LN3
	DD	imagerel $LN3+118
	DD	imagerel $unwind$VectorByScalar
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TakeVectorsAssign DD imagerel $LN5
	DD	imagerel $LN5+170
	DD	imagerel $unwind$TakeVectorsAssign
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AddVectorsAssign DD imagerel $LN5
	DD	imagerel $LN5+170
	DD	imagerel $unwind$AddVectorsAssign
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TakeVectors DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$TakeVectors
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AddVectors DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$AddVectors
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$FAbs DD	imagerel $LN5
	DD	imagerel $LN5+97
	DD	imagerel $unwind$FAbs
;	COMDAT xdata
xdata	SEGMENT
$unwind$FAbs DD	020b01H
	DD	07007720bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AddVectors DD 022501H
	DD	0700b720fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
AddVectors$rtcName$0 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+10
AddVectors$rtcVarDesc DD 028H
	DD	08H
	DQ	FLAT:AddVectors$rtcName$0
	ORG $+48
AddVectors$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:AddVectors$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TakeVectors DD 022501H
	DD	0700b720fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TakeVectors$rtcName$0 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+10
TakeVectors$rtcVarDesc DD 028H
	DD	08H
	DQ	FLAT:TakeVectors$rtcName$0
	ORG $+48
TakeVectors$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:TakeVectors$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AddVectorsAssign DD 032b01H
	DD	0120112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
AddVectorsAssign$rtcName$0 DB 06cH
	DB	068H
	DB	073H
	DB	00H
AddVectorsAssign$rtcName$1 DB 072H
	DB	068H
	DB	073H
	DB	00H
AddVectorsAssign$rtcName$2 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
AddVectorsAssign$rtcVarDesc DD 078H
	DD	08H
	DQ	FLAT:AddVectorsAssign$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:AddVectorsAssign$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:AddVectorsAssign$rtcName$0
	ORG $+144
AddVectorsAssign$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:AddVectorsAssign$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TakeVectorsAssign DD 032b01H
	DD	0120112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TakeVectorsAssign$rtcName$0 DB 06cH
	DB	068H
	DB	073H
	DB	00H
TakeVectorsAssign$rtcName$1 DB 072H
	DB	068H
	DB	073H
	DB	00H
TakeVectorsAssign$rtcName$2 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
TakeVectorsAssign$rtcVarDesc DD 078H
	DD	08H
	DQ	FLAT:TakeVectorsAssign$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:TakeVectorsAssign$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:TakeVectorsAssign$rtcName$0
	ORG $+144
TakeVectorsAssign$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:TakeVectorsAssign$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$VectorByScalar DD 022601H
	DD	0700c7210H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
VectorByScalar$rtcName$0 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+10
VectorByScalar$rtcVarDesc DD 028H
	DD	08H
	DQ	FLAT:VectorByScalar$rtcName$0
	ORG $+48
VectorByScalar$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:VectorByScalar$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$FromToVector DD 022501H
	DD	0700b720fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
FromToVector$rtcName$0 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+10
FromToVector$rtcVarDesc DD 028H
	DD	08H
	DQ	FLAT:FromToVector$rtcName$0
	ORG $+48
FromToVector$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:FromToVector$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$VectorMult DD 022501H
	DD	0700b720fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
VectorMult$rtcName$0 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+10
VectorMult$rtcVarDesc DD 028H
	DD	08H
	DQ	FLAT:VectorMult$rtcName$0
	ORG $+48
VectorMult$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:VectorMult$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$VectorMultAssign DD 032b01H
	DD	0120112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
VectorMultAssign$rtcName$0 DB 061H
	DB	00H
	ORG $+2
VectorMultAssign$rtcName$1 DB 062H
	DB	00H
	ORG $+2
VectorMultAssign$rtcName$2 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
VectorMultAssign$rtcVarDesc DD 078H
	DD	08H
	DQ	FLAT:VectorMultAssign$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:VectorMultAssign$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:VectorMultAssign$rtcName$0
	ORG $+144
VectorMultAssign$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:VectorMultAssign$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Magnitude DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$VectorDivByScalar DD 022601H
	DD	0700c7210H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
VectorDivByScalar$rtcName$0 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+10
VectorDivByScalar$rtcVarDesc DD 028H
	DD	08H
	DQ	FLAT:VectorDivByScalar$rtcName$0
	ORG $+48
VectorDivByScalar$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:VectorDivByScalar$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$NormalizedVector DD 032601H
	DD	012010dH
	DD	07006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
NormalizedVector$rtcName$0 DB 061H
	DB	00H
	ORG $+2
NormalizedVector$rtcName$1 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
NormalizedVector$rtcName$2 DB 076H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+13
NormalizedVector$rtcVarDesc DD 078H
	DD	08H
	DQ	FLAT:NormalizedVector$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:NormalizedVector$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:NormalizedVector$rtcName$0
	ORG $+144
NormalizedVector$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:NormalizedVector$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$NormalizeVector DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DotProduct DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$NormalDot DD 032b01H
	DD	0140112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
NormalDot$rtcName$0 DB 04cH
	DB	048H
	DB	053H
	DB	00H
NormalDot$rtcName$1 DB 052H
	DB	048H
	DB	053H
	DB	00H
	ORG $+8
NormalDot$rtcVarDesc DD 088H
	DD	08H
	DQ	FLAT:NormalDot$rtcName$1
	DD	068H
	DD	08H
	DQ	FLAT:NormalDot$rtcName$0
	ORG $+96
NormalDot$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:NormalDot$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IsLayer DD 020d01H
	DD	07009520dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$FMax DD	021101H
	DD	0700d7211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$FMin DD	021101H
	DD	0700d7211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TakePlrDmg DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IsX DD	020a01H
	DD	07006720aH
xdata	ENDS
xdata	SEGMENT
$unwind$AABBsOverlap DD 033d19H
	DD	0b60112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	05a0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:AABBsOverlap
	DD	035H
	DD	01911H
AABBsOverlap$rtcName$0 DB 06eH
	DB	06fH
	DB	072H
	DB	06dH
	DB	061H
	DB	06cH
	DB	00H
	ORG $+1
AABBsOverlap$rtcName$1 DB 066H
	DB	072H
	DB	06fH
	DB	06dH
	DB	054H
	DB	06fH
	DB	00H
	ORG $+1
AABBsOverlap$rtcName$2 DB 072H
	DB	065H
	DB	06cH
	DB	061H
	DB	074H
	DB	069H
	DB	076H
	DB	065H
	DB	056H
	DB	065H
	DB	06cH
	DB	00H
	ORG $+4
AABBsOverlap$rtcName$3 DB 063H
	DB	068H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	064H
	DB	00H
AABBsOverlap$rtcName$4 DB 06aH
	DB	06eH
	DB	00H
	ORG $+1
AABBsOverlap$rtcName$5 DB 06cH
	DB	068H
	DB	073H
	DB	00H
AABBsOverlap$rtcName$6 DB 072H
	DB	068H
	DB	073H
	DB	00H
AABBsOverlap$rtcName$7 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
AABBsOverlap$rtcName$8 DB 076H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+1
AABBsOverlap$rtcName$9 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
AABBsOverlap$rtcName$10 DB 06cH
	DB	068H
	DB	073H
	DB	00H
AABBsOverlap$rtcName$11 DB 072H
	DB	068H
	DB	073H
	DB	00H
AABBsOverlap$rtcName$12 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
AABBsOverlap$rtcName$13 DB 076H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+1
AABBsOverlap$rtcName$14 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
AABBsOverlap$rtcName$15 DB 061H
	DB	00H
	ORG $+2
AABBsOverlap$rtcName$16 DB 062H
	DB	00H
	ORG $+2
AABBsOverlap$rtcName$17 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
AABBsOverlap$rtcName$18 DB 076H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+1
AABBsOverlap$rtcName$19 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
AABBsOverlap$rtcName$20 DB 04cH
	DB	048H
	DB	053H
	DB	00H
AABBsOverlap$rtcName$21 DB 052H
	DB	048H
	DB	053H
	DB	00H
AABBsOverlap$rtcName$22 DB 04cH
	DB	048H
	DB	053H
	DB	00H
AABBsOverlap$rtcName$23 DB 052H
	DB	048H
	DB	053H
	DB	00H
AABBsOverlap$rtcName$24 DB 06cH
	DB	068H
	DB	073H
	DB	00H
AABBsOverlap$rtcName$25 DB 072H
	DB	068H
	DB	073H
	DB	00H
AABBsOverlap$rtcName$26 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
AABBsOverlap$rtcName$27 DB 066H
	DB	072H
	DB	06fH
	DB	06dH
	DB	00H
	ORG $+3
AABBsOverlap$rtcName$28 DB 074H
	DB	06fH
	DB	00H
	ORG $+1
AABBsOverlap$rtcName$29 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
AABBsOverlap$rtcVarDesc DD 04c8H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$29
	DD	04a8H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$28
	DD	0488H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$27
	DD	0468H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$26
	DD	0448H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$25
	DD	0428H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$24
	DD	0408H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$23
	DD	03e8H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$22
	DD	03c8H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$21
	DD	03a8H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$20
	DD	0388H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$19
	DD	0368H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$18
	DD	0348H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$17
	DD	0328H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$16
	DD	0308H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$15
	DD	02e8H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$14
	DD	02c8H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$13
	DD	02a8H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$12
	DD	0288H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$11
	DD	0268H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$10
	DD	0248H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$9
	DD	0228H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$8
	DD	0208H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$7
	DD	01e8H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$6
	DD	01c8H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$5
	DD	0d8H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$4
	DD	0b8H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$3
	DD	098H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$2
	DD	078H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:AABBsOverlap$rtcName$0
	ORG $+1440
AABBsOverlap$rtcFrameData DD 01eH
	DD	00H
	DQ	FLAT:AABBsOverlap$rtcVarDesc
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h
;	COMDAT FAbs
_TEXT	SEGMENT
tv65 = 48
orig$ = 80
FAbs	PROC						; COMDAT

; 18   : inline float FAbs(float orig) {

$LN5:
  00000	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  00006	57		 push	 rdi
  00007	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7CA6EAD6_EntityManager@h
  00012	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 19   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  00017	f3 0f 10 44 24
	50		 movss	 xmm0, DWORD PTR orig$[rsp]
  0001d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00024	72 0a		 jb	 SHORT $LN3@FAbs
  00026	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv65[rsp], 1
  0002e	eb 08		 jmp	 SHORT $LN4@FAbs
$LN3@FAbs:
  00030	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv65[rsp], 0
$LN4@FAbs:
  00038	f3 0f 2a 44 24
	30		 cvtsi2ss xmm0, DWORD PTR tv65[rsp]
  0003e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00046	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0004e	f3 0f 10 4c 24
	50		 movss	 xmm1, DWORD PTR orig$[rsp]
  00054	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00058	0f 28 c1	 movaps	 xmm0, xmm1

; 20   : }

  0005b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
FAbs	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
;	COMDAT AddVectors
_TEXT	SEGMENT
_this$ = 40
lhs$ = 80
rhs$ = 88
AddVectors PROC						; COMDAT

; 33   : inline Vector2 AddVectors(Vector2 lhs, Vector2 rhs) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00014	b9 08 00 00 00	 mov	 ecx, 8
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__29DBA756_animations@h
  0002c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 34   : 	Vector2 _this;
; 35   : 	_this.x = lhs.x + rhs.x;

  00031	f3 0f 10 44 24
	50		 movss	 xmm0, DWORD PTR lhs$[rsp]
  00037	f3 0f 58 44 24
	58		 addss	 xmm0, DWORD PTR rhs$[rsp]
  0003d	f3 0f 11 44 24
	28		 movss	 DWORD PTR _this$[rsp], xmm0

; 36   : 	_this.y = lhs.y + rhs.y;

  00043	f3 0f 10 44 24
	54		 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  00049	f3 0f 58 44 24
	5c		 addss	 xmm0, DWORD PTR rhs$[rsp+4]
  0004f	f3 0f 11 44 24
	2c		 movss	 DWORD PTR _this$[rsp+4], xmm0

; 37   : 	return _this;

  00055	48 8b 44 24 28	 mov	 rax, QWORD PTR _this$[rsp]

; 38   : }

  0005a	48 8b f8	 mov	 rdi, rax
  0005d	48 8b cc	 mov	 rcx, rsp
  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AddVectors$rtcFrameData
  00067	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0006c	48 8b c7	 mov	 rax, rdi
  0006f	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00073	5f		 pop	 rdi
  00074	c3		 ret	 0
AddVectors ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
;	COMDAT TakeVectors
_TEXT	SEGMENT
_this$ = 40
lhs$ = 80
rhs$ = 88
TakeVectors PROC					; COMDAT

; 39   : inline Vector2 TakeVectors(Vector2 lhs, Vector2 rhs) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00014	b9 08 00 00 00	 mov	 ecx, 8
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__29DBA756_animations@h
  0002c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 40   : 	Vector2 _this;
; 41   : 	_this.x = lhs.x - rhs.x;

  00031	f3 0f 10 44 24
	50		 movss	 xmm0, DWORD PTR lhs$[rsp]
  00037	f3 0f 5c 44 24
	58		 subss	 xmm0, DWORD PTR rhs$[rsp]
  0003d	f3 0f 11 44 24
	28		 movss	 DWORD PTR _this$[rsp], xmm0

; 42   : 	_this.y = lhs.y - rhs.y;

  00043	f3 0f 10 44 24
	54		 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  00049	f3 0f 5c 44 24
	5c		 subss	 xmm0, DWORD PTR rhs$[rsp+4]
  0004f	f3 0f 11 44 24
	2c		 movss	 DWORD PTR _this$[rsp+4], xmm0

; 43   : 	return _this;

  00055	48 8b 44 24 28	 mov	 rax, QWORD PTR _this$[rsp]

; 44   : }

  0005a	48 8b f8	 mov	 rdi, rax
  0005d	48 8b cc	 mov	 rcx, rsp
  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:TakeVectors$rtcFrameData
  00067	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0006c	48 8b c7	 mov	 rax, rdi
  0006f	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00073	5f		 pop	 rdi
  00074	c3		 ret	 0
TakeVectors ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
;	COMDAT AddVectorsAssign
_TEXT	SEGMENT
$T6 = 32
lhs$ = 56
rhs$ = 88
_this$7 = 120
lhs$ = 160
rhs$ = 168
AddVectorsAssign PROC					; COMDAT

; 51   : inline void AddVectorsAssign(Vector2* lhs, Vector2 rhs) {//the lhs will be the one added to

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  00012	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00017	b9 1c 00 00 00	 mov	 ecx, 28
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+160]
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__29DBA756_animations@h
  00032	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 52   : 	*lhs = AddVectors(*lhs, rhs);

  00037	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR rhs$[rsp]
  0003f	48 89 44 24 58	 mov	 QWORD PTR rhs$[rsp], rax
  00044	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR lhs$[rsp]
  0004c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004f	48 89 44 24 38	 mov	 QWORD PTR lhs$[rsp], rax

; 35   : 	_this.x = lhs.x + rhs.x;

  00054	f3 0f 10 44 24
	38		 movss	 xmm0, DWORD PTR lhs$[rsp]
  0005a	f3 0f 58 44 24
	58		 addss	 xmm0, DWORD PTR rhs$[rsp]
  00060	f3 0f 11 44 24
	78		 movss	 DWORD PTR _this$7[rsp], xmm0

; 36   : 	_this.y = lhs.y + rhs.y;

  00066	f3 0f 10 44 24
	3c		 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  0006c	f3 0f 58 44 24
	5c		 addss	 xmm0, DWORD PTR rhs$[rsp+4]
  00072	f3 0f 11 44 24
	7c		 movss	 DWORD PTR _this$7[rsp+4], xmm0

; 37   : 	return _this;

  00078	48 8b 44 24 78	 mov	 rax, QWORD PTR _this$7[rsp]
  0007d	48 89 44 24 20	 mov	 QWORD PTR $T6[rsp], rax

; 52   : 	*lhs = AddVectors(*lhs, rhs);

  00082	48 8b 44 24 20	 mov	 rax, QWORD PTR $T6[rsp]
  00087	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR lhs$[rsp]
  0008f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 53   : }

  00092	48 8b cc	 mov	 rcx, rsp
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AddVectorsAssign$rtcFrameData
  0009c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000a1	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  000a8	5f		 pop	 rdi
  000a9	c3		 ret	 0
AddVectorsAssign ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
;	COMDAT TakeVectorsAssign
_TEXT	SEGMENT
$T6 = 32
lhs$ = 56
rhs$ = 88
_this$7 = 120
lhs$ = 160
rhs$ = 168
TakeVectorsAssign PROC					; COMDAT

; 54   : inline void TakeVectorsAssign(Vector2* lhs, Vector2 rhs) {//the lhs will be the one added to

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  00012	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00017	b9 1c 00 00 00	 mov	 ecx, 28
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+160]
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__29DBA756_animations@h
  00032	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 	*lhs = TakeVectors(*lhs, rhs);

  00037	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR rhs$[rsp]
  0003f	48 89 44 24 58	 mov	 QWORD PTR rhs$[rsp], rax
  00044	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR lhs$[rsp]
  0004c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004f	48 89 44 24 38	 mov	 QWORD PTR lhs$[rsp], rax

; 41   : 	_this.x = lhs.x - rhs.x;

  00054	f3 0f 10 44 24
	38		 movss	 xmm0, DWORD PTR lhs$[rsp]
  0005a	f3 0f 5c 44 24
	58		 subss	 xmm0, DWORD PTR rhs$[rsp]
  00060	f3 0f 11 44 24
	78		 movss	 DWORD PTR _this$7[rsp], xmm0

; 42   : 	_this.y = lhs.y - rhs.y;

  00066	f3 0f 10 44 24
	3c		 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  0006c	f3 0f 5c 44 24
	5c		 subss	 xmm0, DWORD PTR rhs$[rsp+4]
  00072	f3 0f 11 44 24
	7c		 movss	 DWORD PTR _this$7[rsp+4], xmm0

; 43   : 	return _this;

  00078	48 8b 44 24 78	 mov	 rax, QWORD PTR _this$7[rsp]
  0007d	48 89 44 24 20	 mov	 QWORD PTR $T6[rsp], rax

; 55   : 	*lhs = TakeVectors(*lhs, rhs);

  00082	48 8b 44 24 20	 mov	 rax, QWORD PTR $T6[rsp]
  00087	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR lhs$[rsp]
  0008f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 56   : }

  00092	48 8b cc	 mov	 rcx, rsp
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:TakeVectorsAssign$rtcFrameData
  0009c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000a1	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  000a8	5f		 pop	 rdi
  000a9	c3		 ret	 0
TakeVectorsAssign ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
;	COMDAT VectorByScalar
_TEXT	SEGMENT
_this$ = 40
vector$ = 80
scalar$ = 88
VectorByScalar PROC					; COMDAT

; 60   : inline Vector2 VectorByScalar(Vector2 vector, float scalar) {

$LN3:
  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000b	57		 push	 rdi
  0000c	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00010	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00015	b9 08 00 00 00	 mov	 ecx, 8
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__29DBA756_animations@h
  0002d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 61   : 	Vector2 _this = { vector.x * scalar, vector.y * scalar };

  00032	f3 0f 10 44 24
	50		 movss	 xmm0, DWORD PTR vector$[rsp]
  00038	f3 0f 59 44 24
	58		 mulss	 xmm0, DWORD PTR scalar$[rsp]
  0003e	f3 0f 11 44 24
	28		 movss	 DWORD PTR _this$[rsp], xmm0
  00044	f3 0f 10 44 24
	54		 movss	 xmm0, DWORD PTR vector$[rsp+4]
  0004a	f3 0f 59 44 24
	58		 mulss	 xmm0, DWORD PTR scalar$[rsp]
  00050	f3 0f 11 44 24
	2c		 movss	 DWORD PTR _this$[rsp+4], xmm0

; 62   : 	return _this;

  00056	48 8b 44 24 28	 mov	 rax, QWORD PTR _this$[rsp]

; 63   : }

  0005b	48 8b f8	 mov	 rdi, rax
  0005e	48 8b cc	 mov	 rcx, rsp
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:VectorByScalar$rtcFrameData
  00068	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0006d	48 8b c7	 mov	 rax, rdi
  00070	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00074	5f		 pop	 rdi
  00075	c3		 ret	 0
VectorByScalar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
;	COMDAT FromToVector
_TEXT	SEGMENT
_this$ = 40
from$ = 80
to$ = 88
FromToVector PROC					; COMDAT

; 73   : inline Vector2 FromToVector(Vector2 from, Vector2 to) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00014	b9 08 00 00 00	 mov	 ecx, 8
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__29DBA756_animations@h
  0002c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 74   : 	Vector2 _this;
; 75   : 	_this.x = to.x - from.x;

  00031	f3 0f 10 44 24
	58		 movss	 xmm0, DWORD PTR to$[rsp]
  00037	f3 0f 5c 44 24
	50		 subss	 xmm0, DWORD PTR from$[rsp]
  0003d	f3 0f 11 44 24
	28		 movss	 DWORD PTR _this$[rsp], xmm0

; 76   : 	_this.y = to.y - from.y;

  00043	f3 0f 10 44 24
	5c		 movss	 xmm0, DWORD PTR to$[rsp+4]
  00049	f3 0f 5c 44 24
	54		 subss	 xmm0, DWORD PTR from$[rsp+4]
  0004f	f3 0f 11 44 24
	2c		 movss	 DWORD PTR _this$[rsp+4], xmm0

; 77   : 	return _this;

  00055	48 8b 44 24 28	 mov	 rax, QWORD PTR _this$[rsp]

; 78   : }

  0005a	48 8b f8	 mov	 rdi, rax
  0005d	48 8b cc	 mov	 rcx, rsp
  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:FromToVector$rtcFrameData
  00067	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0006c	48 8b c7	 mov	 rax, rdi
  0006f	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00073	5f		 pop	 rdi
  00074	c3		 ret	 0
FromToVector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
;	COMDAT VectorMult
_TEXT	SEGMENT
_this$ = 40
a$ = 80
b$ = 88
VectorMult PROC						; COMDAT

; 105  : inline Vector2 VectorMult(Vector2 a, Vector2 b) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00014	b9 08 00 00 00	 mov	 ecx, 8
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__29DBA756_animations@h
  0002c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 106  : 	Vector2 _this;
; 107  : 	_this.x = a.x * b.x;

  00031	f3 0f 10 44 24
	50		 movss	 xmm0, DWORD PTR a$[rsp]
  00037	f3 0f 59 44 24
	58		 mulss	 xmm0, DWORD PTR b$[rsp]
  0003d	f3 0f 11 44 24
	28		 movss	 DWORD PTR _this$[rsp], xmm0

; 108  : 	_this.y = a.y * b.y;

  00043	f3 0f 10 44 24
	54		 movss	 xmm0, DWORD PTR a$[rsp+4]
  00049	f3 0f 59 44 24
	5c		 mulss	 xmm0, DWORD PTR b$[rsp+4]
  0004f	f3 0f 11 44 24
	2c		 movss	 DWORD PTR _this$[rsp+4], xmm0

; 109  : 	return _this;

  00055	48 8b 44 24 28	 mov	 rax, QWORD PTR _this$[rsp]

; 110  : }

  0005a	48 8b f8	 mov	 rdi, rax
  0005d	48 8b cc	 mov	 rcx, rsp
  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:VectorMult$rtcFrameData
  00067	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0006c	48 8b c7	 mov	 rax, rdi
  0006f	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00073	5f		 pop	 rdi
  00074	c3		 ret	 0
VectorMult ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
;	COMDAT VectorMultAssign
_TEXT	SEGMENT
$T6 = 32
a$ = 56
b$ = 88
_this$7 = 120
a$ = 160
b$ = 168
VectorMultAssign PROC					; COMDAT

; 111  : inline void VectorMultAssign(Vector2* a, Vector2 b) {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  00012	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00017	b9 1c 00 00 00	 mov	 ecx, 28
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+160]
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__29DBA756_animations@h
  00032	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 112  : 	*a = VectorMult(*a, b);

  00037	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  0003f	48 89 44 24 58	 mov	 QWORD PTR b$[rsp], rax
  00044	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  0004c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004f	48 89 44 24 38	 mov	 QWORD PTR a$[rsp], rax

; 107  : 	_this.x = a.x * b.x;

  00054	f3 0f 10 44 24
	38		 movss	 xmm0, DWORD PTR a$[rsp]
  0005a	f3 0f 59 44 24
	58		 mulss	 xmm0, DWORD PTR b$[rsp]
  00060	f3 0f 11 44 24
	78		 movss	 DWORD PTR _this$7[rsp], xmm0

; 108  : 	_this.y = a.y * b.y;

  00066	f3 0f 10 44 24
	3c		 movss	 xmm0, DWORD PTR a$[rsp+4]
  0006c	f3 0f 59 44 24
	5c		 mulss	 xmm0, DWORD PTR b$[rsp+4]
  00072	f3 0f 11 44 24
	7c		 movss	 DWORD PTR _this$7[rsp+4], xmm0

; 109  : 	return _this;

  00078	48 8b 44 24 78	 mov	 rax, QWORD PTR _this$7[rsp]
  0007d	48 89 44 24 20	 mov	 QWORD PTR $T6[rsp], rax

; 112  : 	*a = VectorMult(*a, b);

  00082	48 8b 44 24 20	 mov	 rax, QWORD PTR $T6[rsp]
  00087	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR a$[rsp]
  0008f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 113  : }

  00092	48 8b cc	 mov	 rcx, rsp
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:VectorMultAssign$rtcFrameData
  0009c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000a1	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  000a8	5f		 pop	 rdi
  000a9	c3		 ret	 0
VectorMultAssign ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
;	COMDAT Magnitude
_TEXT	SEGMENT
vector$ = 64
Magnitude PROC						; COMDAT

; 121  : inline float Magnitude(Vector2 vector) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__29DBA756_animations@h
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 122  : 	return sqrtf(vector.x * vector.x + vector.y * vector.y);

  00016	f3 0f 10 44 24
	40		 movss	 xmm0, DWORD PTR vector$[rsp]
  0001c	f3 0f 59 44 24
	40		 mulss	 xmm0, DWORD PTR vector$[rsp]
  00022	f3 0f 10 4c 24
	44		 movss	 xmm1, DWORD PTR vector$[rsp+4]
  00028	f3 0f 59 4c 24
	44		 mulss	 xmm1, DWORD PTR vector$[rsp+4]
  0002e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00032	e8 00 00 00 00	 call	 sqrtf

; 123  : }

  00037	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003b	5f		 pop	 rdi
  0003c	c3		 ret	 0
Magnitude ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
;	COMDAT VectorDivByScalar
_TEXT	SEGMENT
_this$ = 40
a$ = 80
b$ = 88
VectorDivByScalar PROC					; COMDAT

; 127  : inline Vector2 VectorDivByScalar(Vector2 a, float b) {

$LN3:
  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000b	57		 push	 rdi
  0000c	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00010	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00015	b9 08 00 00 00	 mov	 ecx, 8
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__29DBA756_animations@h
  0002d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 128  : 	Vector2 _this;
; 129  : 	_this.x = a.x / b;

  00032	f3 0f 10 44 24
	50		 movss	 xmm0, DWORD PTR a$[rsp]
  00038	f3 0f 5e 44 24
	58		 divss	 xmm0, DWORD PTR b$[rsp]
  0003e	f3 0f 11 44 24
	28		 movss	 DWORD PTR _this$[rsp], xmm0

; 130  : 	_this.y = a.y / b;

  00044	f3 0f 10 44 24
	54		 movss	 xmm0, DWORD PTR a$[rsp+4]
  0004a	f3 0f 5e 44 24
	58		 divss	 xmm0, DWORD PTR b$[rsp]
  00050	f3 0f 11 44 24
	2c		 movss	 DWORD PTR _this$[rsp+4], xmm0

; 131  : 	return _this;

  00056	48 8b 44 24 28	 mov	 rax, QWORD PTR _this$[rsp]

; 132  : }

  0005b	48 8b f8	 mov	 rdi, rax
  0005e	48 8b cc	 mov	 rcx, rsp
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:VectorDivByScalar$rtcFrameData
  00068	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0006d	48 8b c7	 mov	 rax, rdi
  00070	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00074	5f		 pop	 rdi
  00075	c3		 ret	 0
VectorDivByScalar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
;	COMDAT NormalizedVector
_TEXT	SEGMENT
magnitude$ = 32
$T6 = 36
$T7 = 40
a$ = 56
_this$8 = 88
vector$ = 120
vector$ = 160
NormalizedVector PROC					; COMDAT

; 151  : inline Vector2 NormalizedVector(Vector2 vector) {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  0000d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00012	b9 1c 00 00 00	 mov	 ecx, 28
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+160]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__29DBA756_animations@h
  0002d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 152  : 	float magnitude = Magnitude(vector);

  00032	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR vector$[rsp]
  0003a	48 89 44 24 78	 mov	 QWORD PTR vector$[rsp], rax

; 122  : 	return sqrtf(vector.x * vector.x + vector.y * vector.y);

  0003f	f3 0f 10 44 24
	78		 movss	 xmm0, DWORD PTR vector$[rsp]
  00045	f3 0f 59 44 24
	78		 mulss	 xmm0, DWORD PTR vector$[rsp]
  0004b	f3 0f 10 4c 24
	7c		 movss	 xmm1, DWORD PTR vector$[rsp+4]
  00051	f3 0f 59 4c 24
	7c		 mulss	 xmm1, DWORD PTR vector$[rsp+4]
  00057	f3 0f 58 c1	 addss	 xmm0, xmm1
  0005b	e8 00 00 00 00	 call	 sqrtf
  00060	f3 0f 11 44 24
	24		 movss	 DWORD PTR $T6[rsp], xmm0

; 152  : 	float magnitude = Magnitude(vector);

  00066	f3 0f 10 44 24
	24		 movss	 xmm0, DWORD PTR $T6[rsp]
  0006c	f3 0f 11 44 24
	20		 movss	 DWORD PTR magnitude$[rsp], xmm0

; 153  : 	if (magnitude) return VectorDivByScalar(vector, magnitude);

  00072	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR magnitude$[rsp]
  00078	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0007f	7a 02		 jp	 SHORT $LN8@Normalized
  00081	74 42		 je	 SHORT $LN2@Normalized
$LN8@Normalized:
  00083	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR vector$[rsp]
  0008b	48 89 44 24 38	 mov	 QWORD PTR a$[rsp], rax

; 129  : 	_this.x = a.x / b;

  00090	f3 0f 10 44 24
	38		 movss	 xmm0, DWORD PTR a$[rsp]
  00096	f3 0f 5e 44 24
	20		 divss	 xmm0, DWORD PTR magnitude$[rsp]
  0009c	f3 0f 11 44 24
	58		 movss	 DWORD PTR _this$8[rsp], xmm0

; 130  : 	_this.y = a.y / b;

  000a2	f3 0f 10 44 24
	3c		 movss	 xmm0, DWORD PTR a$[rsp+4]
  000a8	f3 0f 5e 44 24
	20		 divss	 xmm0, DWORD PTR magnitude$[rsp]
  000ae	f3 0f 11 44 24
	5c		 movss	 DWORD PTR _this$8[rsp+4], xmm0

; 131  : 	return _this;

  000b4	48 8b 44 24 58	 mov	 rax, QWORD PTR _this$8[rsp]
  000b9	48 89 44 24 28	 mov	 QWORD PTR $T7[rsp], rax

; 153  : 	if (magnitude) return VectorDivByScalar(vector, magnitude);

  000be	48 8b 44 24 28	 mov	 rax, QWORD PTR $T7[rsp]
  000c3	eb 07		 jmp	 SHORT $LN1@Normalized
$LN2@Normalized:

; 154  : 	return zeroVector;

  000c5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR zeroVector
$LN1@Normalized:

; 155  : }

  000cc	48 8b f8	 mov	 rdi, rax
  000cf	48 8b cc	 mov	 rcx, rsp
  000d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:NormalizedVector$rtcFrameData
  000d9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000de	48 8b c7	 mov	 rax, rdi
  000e1	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  000e8	5f		 pop	 rdi
  000e9	c3		 ret	 0
NormalizedVector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
;	COMDAT NormalizeVector
_TEXT	SEGMENT
vector$ = 64
NormalizeVector PROC					; COMDAT

; 156  : inline void NormalizeVector(Vector2 *vector) {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__29DBA756_animations@h
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 157  : 	*vector = NormalizedVector(*vector);

  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR vector$[rsp]
  0001b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001e	e8 00 00 00 00	 call	 NormalizedVector
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR vector$[rsp]
  00028	48 89 01	 mov	 QWORD PTR [rcx], rax

; 158  : }

  0002b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002f	5f		 pop	 rdi
  00030	c3		 ret	 0
NormalizeVector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
;	COMDAT DotProduct
_TEXT	SEGMENT
LHS$ = 64
RHS$ = 72
DotProduct PROC						; COMDAT

; 164  : inline float DotProduct(Vector2 LHS, Vector2 RHS) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__29DBA756_animations@h
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 165  : 	return LHS.x * RHS.x + LHS.y * RHS.y;

  0001b	f3 0f 10 44 24
	40		 movss	 xmm0, DWORD PTR LHS$[rsp]
  00021	f3 0f 59 44 24
	48		 mulss	 xmm0, DWORD PTR RHS$[rsp]
  00027	f3 0f 10 4c 24
	44		 movss	 xmm1, DWORD PTR LHS$[rsp+4]
  0002d	f3 0f 59 4c 24
	4c		 mulss	 xmm1, DWORD PTR RHS$[rsp+4]
  00033	f3 0f 58 c1	 addss	 xmm0, xmm1

; 166  : }

  00037	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003b	5f		 pop	 rdi
  0003c	c3		 ret	 0
DotProduct ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
;	COMDAT NormalDot
_TEXT	SEGMENT
$T5 = 80
LHS$ = 104
RHS$ = 136
LHS$ = 176
RHS$ = 184
NormalDot PROC						; COMDAT

; 167  : inline float NormalDot(Vector2 LHS, Vector2 RHS) {

$LN23:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00012	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00017	b9 1c 00 00 00	 mov	 ecx, 28
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__29DBA756_animations@h
  00032	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 157  : 	*vector = NormalizedVector(*vector);

  00037	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR LHS$[rsp]
  0003f	e8 00 00 00 00	 call	 NormalizedVector
  00044	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR LHS$[rsp], rax
  0004c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR RHS$[rsp]
  00054	e8 00 00 00 00	 call	 NormalizedVector
  00059	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR RHS$[rsp], rax

; 168  : 	NormalizeVector(&LHS);
; 169  : 	NormalizeVector(&RHS);
; 170  : 	return DotProduct(LHS, RHS);

  00061	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR RHS$[rsp]
  00069	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR RHS$[rsp], rax
  00071	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR LHS$[rsp]
  00079	48 89 44 24 68	 mov	 QWORD PTR LHS$[rsp], rax

; 165  : 	return LHS.x * RHS.x + LHS.y * RHS.y;

  0007e	f3 0f 10 44 24
	68		 movss	 xmm0, DWORD PTR LHS$[rsp]
  00084	f3 0f 59 84 24
	88 00 00 00	 mulss	 xmm0, DWORD PTR RHS$[rsp]
  0008d	f3 0f 10 4c 24
	6c		 movss	 xmm1, DWORD PTR LHS$[rsp+4]
  00093	f3 0f 59 8c 24
	8c 00 00 00	 mulss	 xmm1, DWORD PTR RHS$[rsp+4]
  0009c	f3 0f 58 c1	 addss	 xmm0, xmm1
  000a0	f3 0f 11 44 24
	50		 movss	 DWORD PTR $T5[rsp], xmm0

; 168  : 	NormalizeVector(&LHS);
; 169  : 	NormalizeVector(&RHS);
; 170  : 	return DotProduct(LHS, RHS);

  000a6	f3 0f 10 44 24
	50		 movss	 xmm0, DWORD PTR $T5[rsp]

; 171  : }

  000ac	f3 0f 7f 44 24
	20		 movdqu	 XMMWORD PTR [rsp+32], xmm0
  000b2	48 8b cc	 mov	 rcx, rsp
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:NormalDot$rtcFrameData
  000bc	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c1	f3 0f 6f 44 24
	20		 movdqu	 xmm0, XMMWORD PTR [rsp+32]
  000c7	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  000ce	5f		 pop	 rdi
  000cf	c3		 ret	 0
NormalDot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Physics.h
;	COMDAT IsLayer
_TEXT	SEGMENT
tv72 = 32
layer1$ = 64
layer2$ = 72
IsLayer	PROC						; COMDAT

; 7    : inline bool IsLayer(uint layer1, uint layer2) {

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	57		 push	 rdi
  00009	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A6D01AF2_Physics@h
  00014	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 8    : 	return collisionMatrix[layer1] & collisionMatrix[layer2];

  00019	8b 44 24 40	 mov	 eax, DWORD PTR layer1$[rsp]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:collisionMatrix
  00024	8b 54 24 48	 mov	 edx, DWORD PTR layer2$[rsp]
  00028	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:collisionMatrix
  0002f	49 8b 14 d0	 mov	 rdx, QWORD PTR [r8+rdx*8]
  00033	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00037	48 23 c2	 and	 rax, rdx
  0003a	48 85 c0	 test	 rax, rax
  0003d	75 0a		 jne	 SHORT $LN3@IsLayer
  0003f	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
  00047	eb 08		 jmp	 SHORT $LN4@IsLayer
$LN3@IsLayer:
  00049	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
$LN4@IsLayer:
  00051	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv72[rsp]

; 9    : }

  00056	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
IsLayer	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h
;	COMDAT FMax
_TEXT	SEGMENT
b$ = 48
tv65 = 52
tv67 = 56
tv74 = 60
lhs$ = 80
rhs$ = 88
FMax	PROC						; COMDAT

; 21   : inline float FMax(float lhs, float rhs) {

$LN9:
  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  0000c	57		 push	 rdi
  0000d	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7CA6EAD6_EntityManager@h
  00018	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 22   : 	bool b = lhs >= rhs;

  0001d	f3 0f 10 44 24
	50		 movss	 xmm0, DWORD PTR lhs$[rsp]
  00023	0f 2f 44 24 58	 comiss	 xmm0, DWORD PTR rhs$[rsp]
  00028	72 0a		 jb	 SHORT $LN3@FMax
  0002a	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv65[rsp], 1
  00032	eb 08		 jmp	 SHORT $LN4@FMax
$LN3@FMax:
  00034	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv65[rsp], 0
$LN4@FMax:
  0003c	83 7c 24 34 00	 cmp	 DWORD PTR tv65[rsp], 0
  00041	75 0a		 jne	 SHORT $LN5@FMax
  00043	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv67[rsp], 0
  0004b	eb 08		 jmp	 SHORT $LN6@FMax
$LN5@FMax:
  0004d	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv67[rsp], 1
$LN6@FMax:
  00055	0f b6 44 24 38	 movzx	 eax, BYTE PTR tv67[rsp]
  0005a	88 44 24 30	 mov	 BYTE PTR b$[rsp], al

; 23   : 	return lhs * b + rhs * !b;

  0005e	0f b6 44 24 30	 movzx	 eax, BYTE PTR b$[rsp]
  00063	85 c0		 test	 eax, eax
  00065	75 0a		 jne	 SHORT $LN7@FMax
  00067	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0006f	eb 08		 jmp	 SHORT $LN8@FMax
$LN7@FMax:
  00071	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN8@FMax:
  00079	0f b6 44 24 30	 movzx	 eax, BYTE PTR b$[rsp]
  0007e	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00082	f3 0f 10 4c 24
	50		 movss	 xmm1, DWORD PTR lhs$[rsp]
  00088	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0008c	0f 28 c1	 movaps	 xmm0, xmm1
  0008f	f3 0f 2a 4c 24
	3c		 cvtsi2ss xmm1, DWORD PTR tv74[rsp]
  00095	f3 0f 10 54 24
	58		 movss	 xmm2, DWORD PTR rhs$[rsp]
  0009b	f3 0f 59 d1	 mulss	 xmm2, xmm1
  0009f	0f 28 ca	 movaps	 xmm1, xmm2
  000a2	f3 0f 58 c1	 addss	 xmm0, xmm1

; 24   : }

  000a6	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000aa	5f		 pop	 rdi
  000ab	c3		 ret	 0
FMax	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h
;	COMDAT FMin
_TEXT	SEGMENT
b$ = 48
tv65 = 52
tv67 = 56
tv74 = 60
lhs$ = 80
rhs$ = 88
FMin	PROC						; COMDAT

; 25   : inline float FMin(float lhs, float rhs) {

$LN9:
  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  0000c	57		 push	 rdi
  0000d	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7CA6EAD6_EntityManager@h
  00018	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 26   : 	bool b = lhs <= rhs;

  0001d	f3 0f 10 44 24
	58		 movss	 xmm0, DWORD PTR rhs$[rsp]
  00023	0f 2f 44 24 50	 comiss	 xmm0, DWORD PTR lhs$[rsp]
  00028	72 0a		 jb	 SHORT $LN3@FMin
  0002a	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv65[rsp], 1
  00032	eb 08		 jmp	 SHORT $LN4@FMin
$LN3@FMin:
  00034	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv65[rsp], 0
$LN4@FMin:
  0003c	83 7c 24 34 00	 cmp	 DWORD PTR tv65[rsp], 0
  00041	75 0a		 jne	 SHORT $LN5@FMin
  00043	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv67[rsp], 0
  0004b	eb 08		 jmp	 SHORT $LN6@FMin
$LN5@FMin:
  0004d	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv67[rsp], 1
$LN6@FMin:
  00055	0f b6 44 24 38	 movzx	 eax, BYTE PTR tv67[rsp]
  0005a	88 44 24 30	 mov	 BYTE PTR b$[rsp], al

; 27   : 	return lhs * b + rhs * !b;

  0005e	0f b6 44 24 30	 movzx	 eax, BYTE PTR b$[rsp]
  00063	85 c0		 test	 eax, eax
  00065	75 0a		 jne	 SHORT $LN7@FMin
  00067	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0006f	eb 08		 jmp	 SHORT $LN8@FMin
$LN7@FMin:
  00071	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN8@FMin:
  00079	0f b6 44 24 30	 movzx	 eax, BYTE PTR b$[rsp]
  0007e	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00082	f3 0f 10 4c 24
	50		 movss	 xmm1, DWORD PTR lhs$[rsp]
  00088	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0008c	0f 28 c1	 movaps	 xmm0, xmm1
  0008f	f3 0f 2a 4c 24
	3c		 cvtsi2ss xmm1, DWORD PTR tv74[rsp]
  00095	f3 0f 10 54 24
	58		 movss	 xmm2, DWORD PTR rhs$[rsp]
  0009b	f3 0f 59 d1	 mulss	 xmm2, xmm1
  0009f	0f 28 ca	 movaps	 xmm1, xmm2
  000a2	f3 0f 58 c1	 addss	 xmm0, xmm1

; 28   : }

  000a6	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000aa	5f		 pop	 rdi
  000ab	c3		 ret	 0
FMin	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Player.h
;	COMDAT TakePlrDmg
_TEXT	SEGMENT
amount$ = 48
type$ = 56
TakePlrDmg PROC						; COMDAT

; 18   : inline void TakePlrDmg(float amount, PlrDmgType type){

$LN13:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__03D9FA9C_player@h
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 19   : 	if (playerFullyImmune || plrImmune[type]) return;

  0001b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR playerFullyImmune
  00022	85 c0		 test	 eax, eax
  00024	75 14		 jne	 SHORT $LN3@TakePlrDmg
  00026	48 63 44 24 38	 movsxd	 rax, DWORD PTR type$[rsp]
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR plrImmune
  00032	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00036	85 c0		 test	 eax, eax
  00038	74 02		 je	 SHORT $LN2@TakePlrDmg
$LN3@TakePlrDmg:
  0003a	eb 47		 jmp	 SHORT $LN1@TakePlrDmg
$LN2@TakePlrDmg:

; 20   : 	TakeSliderVal(hb_Bar, amount);

  0003c	f3 0f 10 0d 08
	00 00 00	 movss	 xmm1, DWORD PTR hb_Bar+8
  00044	f3 0f 10 44 24
	30		 movss	 xmm0, DWORD PTR amount$[rsp]
  0004a	e8 00 00 00 00	 call	 FMin
  0004f	f3 0f 10 0d 08
	00 00 00	 movss	 xmm1, DWORD PTR hb_Bar+8
  00057	f3 0f 5c c8	 subss	 xmm1, xmm0
  0005b	0f 28 c1	 movaps	 xmm0, xmm1
  0005e	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR hb_Bar+8, xmm0
  00066	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR hb_Bar
  0006d	c6 40 14 01	 mov	 BYTE PTR [rax+20], 1

; 21   : 	playerFullyImmune = true;

  00071	c6 05 00 00 00
	00 01		 mov	 BYTE PTR playerFullyImmune, 1

; 22   : 	playerImmuneET = .0f;

  00078	0f 57 c0	 xorps	 xmm0, xmm0
  0007b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR playerImmuneET, xmm0
$LN1@TakePlrDmg:

; 23   : }

  00083	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00087	5f		 pop	 rdi
  00088	c3		 ret	 0
TakePlrDmg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c
;	COMDAT IsX
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
tv75 = 40
tv81 = 44
tv69 = 48
tv71 = 52
v$ = 80
IsX	PROC						; COMDAT

; 29   : inline bool IsX(Vector2 v) {

$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h

; 19   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  00016	f3 0f 10 44 24
	50		 movss	 xmm0, DWORD PTR v$[rsp]
  0001c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00023	72 0a		 jb	 SHORT $LN9@IsX
  00025	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  0002d	eb 08		 jmp	 SHORT $LN10@IsX
$LN9@IsX:
  0002f	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN10@IsX:
  00037	f3 0f 2a 44 24
	28		 cvtsi2ss xmm0, DWORD PTR tv75[rsp]
  0003d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00045	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0004d	f3 0f 10 4c 24
	50		 movss	 xmm1, DWORD PTR v$[rsp]
  00053	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00057	0f 28 c1	 movaps	 xmm0, xmm1
  0005a	f3 0f 11 44 24
	20		 movss	 DWORD PTR $T1[rsp], xmm0
  00060	f3 0f 10 44 24
	54		 movss	 xmm0, DWORD PTR v$[rsp+4]
  00066	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0006d	72 0a		 jb	 SHORT $LN13@IsX
  0006f	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv81[rsp], 1
  00077	eb 08		 jmp	 SHORT $LN14@IsX
$LN13@IsX:
  00079	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
$LN14@IsX:
  00081	f3 0f 2a 44 24
	2c		 cvtsi2ss xmm0, DWORD PTR tv81[rsp]
  00087	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0008f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00097	f3 0f 10 4c 24
	54		 movss	 xmm1, DWORD PTR v$[rsp+4]
  0009d	f3 0f 59 c8	 mulss	 xmm1, xmm0
  000a1	0f 28 c1	 movaps	 xmm0, xmm1
  000a4	f3 0f 11 44 24
	24		 movss	 DWORD PTR $T2[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c

; 30   : 	return FAbs(v.x) > FAbs(v.y);

  000aa	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR $T1[rsp]
  000b0	f3 0f 10 4c 24
	24		 movss	 xmm1, DWORD PTR $T2[rsp]
  000b6	0f 2f c1	 comiss	 xmm0, xmm1
  000b9	76 0a		 jbe	 SHORT $LN3@IsX
  000bb	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv69[rsp], 1
  000c3	eb 08		 jmp	 SHORT $LN4@IsX
$LN3@IsX:
  000c5	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv69[rsp], 0
$LN4@IsX:
  000cd	83 7c 24 30 00	 cmp	 DWORD PTR tv69[rsp], 0
  000d2	75 0a		 jne	 SHORT $LN5@IsX
  000d4	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
  000dc	eb 08		 jmp	 SHORT $LN6@IsX
$LN5@IsX:
  000de	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
$LN6@IsX:
  000e6	0f b6 44 24 34	 movzx	 eax, BYTE PTR tv71[rsp]

; 31   : }

  000eb	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000ef	5f		 pop	 rdi
  000f0	c3		 ret	 0
IsX	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Physics.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c
_TEXT	SEGMENT
minMoreMinX$ = 32
maxMoreMinX$ = 33
minLessMaxX$ = 34
maxLessMaxX$ = 35
minMoreMinY$ = 36
maxMoreMinY$ = 37
minLessMaxY$ = 38
maxLessMaxY$ = 39
normalIsX$ = 40
normal$ = 56
_this$33 = 68
colData$34 = 72
othData$35 = 80
colNotStatic$36 = 88
otherNotStatic$37 = 92
colMult$38 = 96
otherMult$39 = 100
fromTo$40 = 120
fromToIsX$41 = 132
fromToIsRight$42 = 133
fromToIsUp$43 = 134
relativeVel$44 = 152
intX$45 = 164
velIsX$46 = 165
changed$47 = 184
dot$48 = 196
e$49 = 200
jn$50 = 216
temp$51 = 228
temp2$52 = 232
colEnemy$53 = 236
monkIndex$54 = 240
damage$55 = 244
monkIndex$56 = 248
slider$57 = 256
$T58 = 272
$T59 = 280
$T60 = 288
$T61 = 304
$T62 = 328
$T63 = 376
$T64 = 380
$T65 = 384
$T66 = 392
$T67 = 400
$T68 = 408
$T69 = 416
$T70 = 424
lhs$ = 432
lhs$ = 456
rhs$ = 488
_this$71 = 520
vector$ = 552
_this$72 = 584
lhs$ = 600
lhs$ = 616
rhs$ = 648
_this$73 = 680
vector$ = 712
_this$74 = 744
a$ = 776
b$ = 808
_this$75 = 840
vector$ = 872
scalar$ = 888
_this$76 = 904
LHS$ = 936
RHS$ = 968
LHS$ = 1000
RHS$ = 1032
lhs$ = 1064
rhs$ = 1096
_this$77 = 1128
from$ = 1160
to$ = 1192
_this$78 = 1224
tv82 = 1236
tv84 = 1240
tv88 = 1244
tv90 = 1248
tv144 = 1252
tv146 = 1256
tv150 = 1260
tv152 = 1264
tv174 = 1268
tv176 = 1272
tv180 = 1276
tv182 = 1280
tv204 = 1284
tv206 = 1288
tv210 = 1292
tv212 = 1296
tv763 = 1300
tv236 = 1304
tv241 = 1308
tv265 = 1312
tv267 = 1316
tv270 = 1320
tv272 = 1324
tv812 = 1328
tv358 = 1332
tv360 = 1336
tv369 = 1340
tv378 = 1344
tv364 = 1352
tv386 = 1360
tv365 = 1368
tv412 = 1372
tv453 = 1376
tv407 = 1384
tv461 = 1392
tv479 = 1400
tv408 = 1404
tv490 = 1408
tv496 = 1412
tv682 = 1416
tv684 = 1420
tv699 = 1424
tv729 = 1432
__$ArrayPad$ = 1440
collider$ = 1472
other$ = 1480
AABBsOverlap PROC

; 35   : bool AABBsOverlap(Entity* collider, Entity* other) {

$LN243:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec b0 05
	00 00		 sub	 rsp, 1456		; 000005b0H
  00012	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00017	b9 64 01 00 00	 mov	 ecx, 356		; 00000164H
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 c0
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1472]
  0002b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00032	48 33 c4	 xor	 rax, rsp
  00035	48 89 84 24 a0
	05 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 36   : 	bool minMoreMinX = false, maxMoreMinX = false, minLessMaxX = false, maxLessMaxX = false, minMoreMinY = false, maxMoreMinY = false, minLessMaxY = false, maxLessMaxY = false;

  00049	c6 44 24 20 00	 mov	 BYTE PTR minMoreMinX$[rsp], 0
  0004e	c6 44 24 21 00	 mov	 BYTE PTR maxMoreMinX$[rsp], 0
  00053	c6 44 24 22 00	 mov	 BYTE PTR minLessMaxX$[rsp], 0
  00058	c6 44 24 23 00	 mov	 BYTE PTR maxLessMaxX$[rsp], 0
  0005d	c6 44 24 24 00	 mov	 BYTE PTR minMoreMinY$[rsp], 0
  00062	c6 44 24 25 00	 mov	 BYTE PTR maxMoreMinY$[rsp], 0
  00067	c6 44 24 26 00	 mov	 BYTE PTR minLessMaxY$[rsp], 0
  0006c	c6 44 24 27 00	 mov	 BYTE PTR maxLessMaxY$[rsp], 0

; 37   : 	bool normalIsX = false;

  00071	c6 44 24 28 00	 mov	 BYTE PTR normalIsX$[rsp], 0

; 38   : 	Vector2 normal = zeroVector;

  00076	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR zeroVector
  0007d	48 89 44 24 38	 mov	 QWORD PTR normal$[rsp], rax

; 39   : 	if ((minMoreMinX = collider->trueAABB[0].x > other->trueAABB[0].x || (maxMoreMinX = collider->trueAABB[1].x > other->trueAABB[0].x)) && (minLessMaxX = collider->trueAABB[0].x < other->trueAABB[1].x || (maxLessMaxX = collider->trueAABB[1].x < other->trueAABB[1].x)) && (minMoreMinY = collider->trueAABB[0].y > other->trueAABB[0].y || (maxMoreMinY = collider->trueAABB[1].y > other->trueAABB[0].y)) && (minLessMaxY = collider->trueAABB[0].y < other->trueAABB[1].y || (maxLessMaxY = collider->trueAABB[1].y < other->trueAABB[1].y))) {

  00082	b8 08 00 00 00	 mov	 eax, 8
  00087	48 6b c0 00	 imul	 rax, rax, 0
  0008b	b9 08 00 00 00	 mov	 ecx, 8
  00090	48 6b c9 00	 imul	 rcx, rcx, 0
  00094	48 8b 94 24 c0
	05 00 00	 mov	 rdx, QWORD PTR collider$[rsp]
  0009c	4c 8b 84 24 c8
	05 00 00	 mov	 r8, QWORD PTR other$[rsp]
  000a4	f3 0f 10 44 02
	3c		 movss	 xmm0, DWORD PTR [rdx+rax+60]
  000aa	41 0f 2f 44 08
	3c		 comiss	 xmm0, DWORD PTR [r8+rcx+60]
  000b0	0f 87 8c 00 00
	00		 ja	 $LN31@AABBsOverl
  000b6	b8 08 00 00 00	 mov	 eax, 8
  000bb	48 6b c0 01	 imul	 rax, rax, 1
  000bf	b9 08 00 00 00	 mov	 ecx, 8
  000c4	48 6b c9 00	 imul	 rcx, rcx, 0
  000c8	48 8b 94 24 c0
	05 00 00	 mov	 rdx, QWORD PTR collider$[rsp]
  000d0	4c 8b 84 24 c8
	05 00 00	 mov	 r8, QWORD PTR other$[rsp]
  000d8	f3 0f 10 44 02
	3c		 movss	 xmm0, DWORD PTR [rdx+rax+60]
  000de	41 0f 2f 44 08
	3c		 comiss	 xmm0, DWORD PTR [r8+rcx+60]
  000e4	76 0d		 jbe	 SHORT $LN27@AABBsOverl
  000e6	c7 84 24 d4 04
	00 00 01 00 00
	00		 mov	 DWORD PTR tv82[rsp], 1
  000f1	eb 0b		 jmp	 SHORT $LN28@AABBsOverl
$LN27@AABBsOverl:
  000f3	c7 84 24 d4 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv82[rsp], 0
$LN28@AABBsOverl:
  000fe	83 bc 24 d4 04
	00 00 00	 cmp	 DWORD PTR tv82[rsp], 0
  00106	75 0d		 jne	 SHORT $LN29@AABBsOverl
  00108	c7 84 24 d8 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv84[rsp], 0
  00113	eb 0b		 jmp	 SHORT $LN30@AABBsOverl
$LN29@AABBsOverl:
  00115	c7 84 24 d8 04
	00 00 01 00 00
	00		 mov	 DWORD PTR tv84[rsp], 1
$LN30@AABBsOverl:
  00120	0f b6 84 24 d8
	04 00 00	 movzx	 eax, BYTE PTR tv84[rsp]
  00128	88 44 24 21	 mov	 BYTE PTR maxMoreMinX$[rsp], al
  0012c	0f b6 44 24 21	 movzx	 eax, BYTE PTR maxMoreMinX$[rsp]
  00131	85 c0		 test	 eax, eax
  00133	75 0d		 jne	 SHORT $LN31@AABBsOverl
  00135	c7 84 24 dc 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv88[rsp], 0
  00140	eb 0b		 jmp	 SHORT $LN32@AABBsOverl
$LN31@AABBsOverl:
  00142	c7 84 24 dc 04
	00 00 01 00 00
	00		 mov	 DWORD PTR tv88[rsp], 1
$LN32@AABBsOverl:
  0014d	83 bc 24 dc 04
	00 00 00	 cmp	 DWORD PTR tv88[rsp], 0
  00155	75 0d		 jne	 SHORT $LN33@AABBsOverl
  00157	c7 84 24 e0 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv90[rsp], 0
  00162	eb 0b		 jmp	 SHORT $LN34@AABBsOverl
$LN33@AABBsOverl:
  00164	c7 84 24 e0 04
	00 00 01 00 00
	00		 mov	 DWORD PTR tv90[rsp], 1
$LN34@AABBsOverl:
  0016f	0f b6 84 24 e0
	04 00 00	 movzx	 eax, BYTE PTR tv90[rsp]
  00177	88 44 24 20	 mov	 BYTE PTR minMoreMinX$[rsp], al
  0017b	0f b6 44 24 20	 movzx	 eax, BYTE PTR minMoreMinX$[rsp]
  00180	85 c0		 test	 eax, eax
  00182	0f 84 72 17 00
	00		 je	 $LN2@AABBsOverl
  00188	b8 08 00 00 00	 mov	 eax, 8
  0018d	48 6b c0 00	 imul	 rax, rax, 0
  00191	b9 08 00 00 00	 mov	 ecx, 8
  00196	48 6b c9 01	 imul	 rcx, rcx, 1
  0019a	48 8b 94 24 c8
	05 00 00	 mov	 rdx, QWORD PTR other$[rsp]
  001a2	4c 8b 84 24 c0
	05 00 00	 mov	 r8, QWORD PTR collider$[rsp]
  001aa	f3 0f 10 44 0a
	3c		 movss	 xmm0, DWORD PTR [rdx+rcx+60]
  001b0	41 0f 2f 44 00
	3c		 comiss	 xmm0, DWORD PTR [r8+rax+60]
  001b6	0f 87 8c 00 00
	00		 ja	 $LN39@AABBsOverl
  001bc	b8 08 00 00 00	 mov	 eax, 8
  001c1	48 6b c0 01	 imul	 rax, rax, 1
  001c5	b9 08 00 00 00	 mov	 ecx, 8
  001ca	48 6b c9 01	 imul	 rcx, rcx, 1
  001ce	48 8b 94 24 c8
	05 00 00	 mov	 rdx, QWORD PTR other$[rsp]
  001d6	4c 8b 84 24 c0
	05 00 00	 mov	 r8, QWORD PTR collider$[rsp]
  001de	f3 0f 10 44 0a
	3c		 movss	 xmm0, DWORD PTR [rdx+rcx+60]
  001e4	41 0f 2f 44 00
	3c		 comiss	 xmm0, DWORD PTR [r8+rax+60]
  001ea	76 0d		 jbe	 SHORT $LN35@AABBsOverl
  001ec	c7 84 24 e4 04
	00 00 01 00 00
	00		 mov	 DWORD PTR tv144[rsp], 1
  001f7	eb 0b		 jmp	 SHORT $LN36@AABBsOverl
$LN35@AABBsOverl:
  001f9	c7 84 24 e4 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv144[rsp], 0
$LN36@AABBsOverl:
  00204	83 bc 24 e4 04
	00 00 00	 cmp	 DWORD PTR tv144[rsp], 0
  0020c	75 0d		 jne	 SHORT $LN37@AABBsOverl
  0020e	c7 84 24 e8 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv146[rsp], 0
  00219	eb 0b		 jmp	 SHORT $LN38@AABBsOverl
$LN37@AABBsOverl:
  0021b	c7 84 24 e8 04
	00 00 01 00 00
	00		 mov	 DWORD PTR tv146[rsp], 1
$LN38@AABBsOverl:
  00226	0f b6 84 24 e8
	04 00 00	 movzx	 eax, BYTE PTR tv146[rsp]
  0022e	88 44 24 23	 mov	 BYTE PTR maxLessMaxX$[rsp], al
  00232	0f b6 44 24 23	 movzx	 eax, BYTE PTR maxLessMaxX$[rsp]
  00237	85 c0		 test	 eax, eax
  00239	75 0d		 jne	 SHORT $LN39@AABBsOverl
  0023b	c7 84 24 ec 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv150[rsp], 0
  00246	eb 0b		 jmp	 SHORT $LN40@AABBsOverl
$LN39@AABBsOverl:
  00248	c7 84 24 ec 04
	00 00 01 00 00
	00		 mov	 DWORD PTR tv150[rsp], 1
$LN40@AABBsOverl:
  00253	83 bc 24 ec 04
	00 00 00	 cmp	 DWORD PTR tv150[rsp], 0
  0025b	75 0d		 jne	 SHORT $LN41@AABBsOverl
  0025d	c7 84 24 f0 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv152[rsp], 0
  00268	eb 0b		 jmp	 SHORT $LN42@AABBsOverl
$LN41@AABBsOverl:
  0026a	c7 84 24 f0 04
	00 00 01 00 00
	00		 mov	 DWORD PTR tv152[rsp], 1
$LN42@AABBsOverl:
  00275	0f b6 84 24 f0
	04 00 00	 movzx	 eax, BYTE PTR tv152[rsp]
  0027d	88 44 24 22	 mov	 BYTE PTR minLessMaxX$[rsp], al
  00281	0f b6 44 24 22	 movzx	 eax, BYTE PTR minLessMaxX$[rsp]
  00286	85 c0		 test	 eax, eax
  00288	0f 84 6c 16 00
	00		 je	 $LN2@AABBsOverl
  0028e	b8 08 00 00 00	 mov	 eax, 8
  00293	48 6b c0 00	 imul	 rax, rax, 0
  00297	b9 08 00 00 00	 mov	 ecx, 8
  0029c	48 6b c9 00	 imul	 rcx, rcx, 0
  002a0	48 8b 94 24 c0
	05 00 00	 mov	 rdx, QWORD PTR collider$[rsp]
  002a8	4c 8b 84 24 c8
	05 00 00	 mov	 r8, QWORD PTR other$[rsp]
  002b0	f3 0f 10 44 02
	40		 movss	 xmm0, DWORD PTR [rdx+rax+64]
  002b6	41 0f 2f 44 08
	40		 comiss	 xmm0, DWORD PTR [r8+rcx+64]
  002bc	0f 87 8c 00 00
	00		 ja	 $LN47@AABBsOverl
  002c2	b8 08 00 00 00	 mov	 eax, 8
  002c7	48 6b c0 01	 imul	 rax, rax, 1
  002cb	b9 08 00 00 00	 mov	 ecx, 8
  002d0	48 6b c9 00	 imul	 rcx, rcx, 0
  002d4	48 8b 94 24 c0
	05 00 00	 mov	 rdx, QWORD PTR collider$[rsp]
  002dc	4c 8b 84 24 c8
	05 00 00	 mov	 r8, QWORD PTR other$[rsp]
  002e4	f3 0f 10 44 02
	40		 movss	 xmm0, DWORD PTR [rdx+rax+64]
  002ea	41 0f 2f 44 08
	40		 comiss	 xmm0, DWORD PTR [r8+rcx+64]
  002f0	76 0d		 jbe	 SHORT $LN43@AABBsOverl
  002f2	c7 84 24 f4 04
	00 00 01 00 00
	00		 mov	 DWORD PTR tv174[rsp], 1
  002fd	eb 0b		 jmp	 SHORT $LN44@AABBsOverl
$LN43@AABBsOverl:
  002ff	c7 84 24 f4 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv174[rsp], 0
$LN44@AABBsOverl:
  0030a	83 bc 24 f4 04
	00 00 00	 cmp	 DWORD PTR tv174[rsp], 0
  00312	75 0d		 jne	 SHORT $LN45@AABBsOverl
  00314	c7 84 24 f8 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv176[rsp], 0
  0031f	eb 0b		 jmp	 SHORT $LN46@AABBsOverl
$LN45@AABBsOverl:
  00321	c7 84 24 f8 04
	00 00 01 00 00
	00		 mov	 DWORD PTR tv176[rsp], 1
$LN46@AABBsOverl:
  0032c	0f b6 84 24 f8
	04 00 00	 movzx	 eax, BYTE PTR tv176[rsp]
  00334	88 44 24 25	 mov	 BYTE PTR maxMoreMinY$[rsp], al
  00338	0f b6 44 24 25	 movzx	 eax, BYTE PTR maxMoreMinY$[rsp]
  0033d	85 c0		 test	 eax, eax
  0033f	75 0d		 jne	 SHORT $LN47@AABBsOverl
  00341	c7 84 24 fc 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv180[rsp], 0
  0034c	eb 0b		 jmp	 SHORT $LN48@AABBsOverl
$LN47@AABBsOverl:
  0034e	c7 84 24 fc 04
	00 00 01 00 00
	00		 mov	 DWORD PTR tv180[rsp], 1
$LN48@AABBsOverl:
  00359	83 bc 24 fc 04
	00 00 00	 cmp	 DWORD PTR tv180[rsp], 0
  00361	75 0d		 jne	 SHORT $LN49@AABBsOverl
  00363	c7 84 24 00 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv182[rsp], 0
  0036e	eb 0b		 jmp	 SHORT $LN50@AABBsOverl
$LN49@AABBsOverl:
  00370	c7 84 24 00 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv182[rsp], 1
$LN50@AABBsOverl:
  0037b	0f b6 84 24 00
	05 00 00	 movzx	 eax, BYTE PTR tv182[rsp]
  00383	88 44 24 24	 mov	 BYTE PTR minMoreMinY$[rsp], al
  00387	0f b6 44 24 24	 movzx	 eax, BYTE PTR minMoreMinY$[rsp]
  0038c	85 c0		 test	 eax, eax
  0038e	0f 84 66 15 00
	00		 je	 $LN2@AABBsOverl
  00394	b8 08 00 00 00	 mov	 eax, 8
  00399	48 6b c0 00	 imul	 rax, rax, 0
  0039d	b9 08 00 00 00	 mov	 ecx, 8
  003a2	48 6b c9 01	 imul	 rcx, rcx, 1
  003a6	48 8b 94 24 c8
	05 00 00	 mov	 rdx, QWORD PTR other$[rsp]
  003ae	4c 8b 84 24 c0
	05 00 00	 mov	 r8, QWORD PTR collider$[rsp]
  003b6	f3 0f 10 44 0a
	40		 movss	 xmm0, DWORD PTR [rdx+rcx+64]
  003bc	41 0f 2f 44 00
	40		 comiss	 xmm0, DWORD PTR [r8+rax+64]
  003c2	0f 87 8c 00 00
	00		 ja	 $LN55@AABBsOverl
  003c8	b8 08 00 00 00	 mov	 eax, 8
  003cd	48 6b c0 01	 imul	 rax, rax, 1
  003d1	b9 08 00 00 00	 mov	 ecx, 8
  003d6	48 6b c9 01	 imul	 rcx, rcx, 1
  003da	48 8b 94 24 c8
	05 00 00	 mov	 rdx, QWORD PTR other$[rsp]
  003e2	4c 8b 84 24 c0
	05 00 00	 mov	 r8, QWORD PTR collider$[rsp]
  003ea	f3 0f 10 44 0a
	40		 movss	 xmm0, DWORD PTR [rdx+rcx+64]
  003f0	41 0f 2f 44 00
	40		 comiss	 xmm0, DWORD PTR [r8+rax+64]
  003f6	76 0d		 jbe	 SHORT $LN51@AABBsOverl
  003f8	c7 84 24 04 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv204[rsp], 1
  00403	eb 0b		 jmp	 SHORT $LN52@AABBsOverl
$LN51@AABBsOverl:
  00405	c7 84 24 04 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv204[rsp], 0
$LN52@AABBsOverl:
  00410	83 bc 24 04 05
	00 00 00	 cmp	 DWORD PTR tv204[rsp], 0
  00418	75 0d		 jne	 SHORT $LN53@AABBsOverl
  0041a	c7 84 24 08 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv206[rsp], 0
  00425	eb 0b		 jmp	 SHORT $LN54@AABBsOverl
$LN53@AABBsOverl:
  00427	c7 84 24 08 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv206[rsp], 1
$LN54@AABBsOverl:
  00432	0f b6 84 24 08
	05 00 00	 movzx	 eax, BYTE PTR tv206[rsp]
  0043a	88 44 24 27	 mov	 BYTE PTR maxLessMaxY$[rsp], al
  0043e	0f b6 44 24 27	 movzx	 eax, BYTE PTR maxLessMaxY$[rsp]
  00443	85 c0		 test	 eax, eax
  00445	75 0d		 jne	 SHORT $LN55@AABBsOverl
  00447	c7 84 24 0c 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv210[rsp], 0
  00452	eb 0b		 jmp	 SHORT $LN56@AABBsOverl
$LN55@AABBsOverl:
  00454	c7 84 24 0c 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv210[rsp], 1
$LN56@AABBsOverl:
  0045f	83 bc 24 0c 05
	00 00 00	 cmp	 DWORD PTR tv210[rsp], 0
  00467	75 0d		 jne	 SHORT $LN57@AABBsOverl
  00469	c7 84 24 10 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv212[rsp], 0
  00474	eb 0b		 jmp	 SHORT $LN58@AABBsOverl
$LN57@AABBsOverl:
  00476	c7 84 24 10 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv212[rsp], 1
$LN58@AABBsOverl:
  00481	0f b6 84 24 10
	05 00 00	 movzx	 eax, BYTE PTR tv212[rsp]
  00489	88 44 24 26	 mov	 BYTE PTR minLessMaxY$[rsp], al
  0048d	0f b6 44 24 26	 movzx	 eax, BYTE PTR minLessMaxY$[rsp]
  00492	85 c0		 test	 eax, eax
  00494	0f 84 60 14 00
	00		 je	 $LN2@AABBsOverl

; 40   : 		bool _this;
; 41   : 		PhysicsData* colData = collider->physicsData, * othData = other->physicsData;

  0049a	48 8b 84 24 c0
	05 00 00	 mov	 rax, QWORD PTR collider$[rsp]
  004a2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  004a5	48 89 44 24 48	 mov	 QWORD PTR colData$34[rsp], rax
  004aa	48 8b 84 24 c8
	05 00 00	 mov	 rax, QWORD PTR other$[rsp]
  004b2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  004b5	48 89 44 24 50	 mov	 QWORD PTR othData$35[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Physics.h

; 8    : 	return collisionMatrix[layer1] & collisionMatrix[layer2];

  004ba	48 8b 84 24 c0
	05 00 00	 mov	 rax, QWORD PTR collider$[rsp]
  004c2	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  004c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:collisionMatrix
  004cc	48 8b 94 24 c8
	05 00 00	 mov	 rdx, QWORD PTR other$[rsp]
  004d4	8b 52 08	 mov	 edx, DWORD PTR [rdx+8]
  004d7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:collisionMatrix
  004de	49 8b 14 d0	 mov	 rdx, QWORD PTR [r8+rdx*8]
  004e2	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  004e6	48 23 c2	 and	 rax, rdx
  004e9	48 85 c0	 test	 rax, rax
  004ec	75 0d		 jne	 SHORT $LN111@AABBsOverl
  004ee	c7 84 24 14 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv763[rsp], 0
  004f9	eb 0b		 jmp	 SHORT $LN112@AABBsOverl
$LN111@AABBsOverl:
  004fb	c7 84 24 14 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv763[rsp], 1
$LN112@AABBsOverl:
  00506	0f b6 84 24 14
	05 00 00	 movzx	 eax, BYTE PTR tv763[rsp]
  0050e	88 84 24 18 01
	00 00		 mov	 BYTE PTR $T59[rsp], al
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c

; 42   : 		if (!IsLayer(collider->layer, other->layer) || !colData || !othData || colData->bIsTrigger || othData->bIsTrigger) {

  00515	0f b6 84 24 18
	01 00 00	 movzx	 eax, BYTE PTR $T59[rsp]
  0051d	0f b6 c0	 movzx	 eax, al
  00520	85 c0		 test	 eax, eax
  00522	74 2a		 je	 SHORT $LN4@AABBsOverl
  00524	48 83 7c 24 48
	00		 cmp	 QWORD PTR colData$34[rsp], 0
  0052a	74 22		 je	 SHORT $LN4@AABBsOverl
  0052c	48 83 7c 24 50
	00		 cmp	 QWORD PTR othData$35[rsp], 0
  00532	74 1a		 je	 SHORT $LN4@AABBsOverl
  00534	48 8b 44 24 48	 mov	 rax, QWORD PTR colData$34[rsp]
  00539	0f b6 40 51	 movzx	 eax, BYTE PTR [rax+81]
  0053d	85 c0		 test	 eax, eax
  0053f	75 0d		 jne	 SHORT $LN4@AABBsOverl
  00541	48 8b 44 24 50	 mov	 rax, QWORD PTR othData$35[rsp]
  00546	0f b6 40 51	 movzx	 eax, BYTE PTR [rax+81]
  0054a	85 c0		 test	 eax, eax
  0054c	74 0a		 je	 SHORT $LN3@AABBsOverl
$LN4@AABBsOverl:

; 43   : 			_this = false;

  0054e	c6 44 24 44 00	 mov	 BYTE PTR _this$33[rsp], 0

; 44   : 			goto collision_event;

  00553	e9 f6 10 00 00	 jmp	 $collision_event$244
$LN3@AABBsOverl:

; 45   : 		}
; 46   : 		_this = true;

  00558	c6 44 24 44 01	 mov	 BYTE PTR _this$33[rsp], 1

; 47   : 		const float colNotStatic = !colData->bIsStatic;

  0055d	48 8b 44 24 48	 mov	 rax, QWORD PTR colData$34[rsp]
  00562	0f b6 40 50	 movzx	 eax, BYTE PTR [rax+80]
  00566	85 c0		 test	 eax, eax
  00568	75 0d		 jne	 SHORT $LN59@AABBsOverl
  0056a	c7 84 24 18 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv236[rsp], 1
  00575	eb 0b		 jmp	 SHORT $LN60@AABBsOverl
$LN59@AABBsOverl:
  00577	c7 84 24 18 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv236[rsp], 0
$LN60@AABBsOverl:
  00582	f3 0f 2a 84 24
	18 05 00 00	 cvtsi2ss xmm0, DWORD PTR tv236[rsp]
  0058b	f3 0f 11 44 24
	58		 movss	 DWORD PTR colNotStatic$36[rsp], xmm0

; 48   : 		const float otherNotStatic = !othData->bIsStatic;

  00591	48 8b 44 24 50	 mov	 rax, QWORD PTR othData$35[rsp]
  00596	0f b6 40 50	 movzx	 eax, BYTE PTR [rax+80]
  0059a	85 c0		 test	 eax, eax
  0059c	75 0d		 jne	 SHORT $LN61@AABBsOverl
  0059e	c7 84 24 1c 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv241[rsp], 1
  005a9	eb 0b		 jmp	 SHORT $LN62@AABBsOverl
$LN61@AABBsOverl:
  005ab	c7 84 24 1c 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv241[rsp], 0
$LN62@AABBsOverl:
  005b6	f3 0f 2a 84 24
	1c 05 00 00	 cvtsi2ss xmm0, DWORD PTR tv241[rsp]
  005bf	f3 0f 11 44 24
	5c		 movss	 DWORD PTR otherNotStatic$37[rsp], xmm0

; 49   : 		const float colMult = (othData->bIsStatic + 1.0f) / 2.0f * colNotStatic, otherMult = (colData->bIsStatic + 1.0f) / 2.0f * otherNotStatic;

  005c5	48 8b 44 24 50	 mov	 rax, QWORD PTR othData$35[rsp]
  005ca	0f b6 40 50	 movzx	 eax, BYTE PTR [rax+80]
  005ce	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  005d2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  005da	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  005e2	f3 0f 59 44 24
	58		 mulss	 xmm0, DWORD PTR colNotStatic$36[rsp]
  005e8	f3 0f 11 44 24
	60		 movss	 DWORD PTR colMult$38[rsp], xmm0
  005ee	48 8b 44 24 48	 mov	 rax, QWORD PTR colData$34[rsp]
  005f3	0f b6 40 50	 movzx	 eax, BYTE PTR [rax+80]
  005f7	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  005fb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00603	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0060b	f3 0f 59 44 24
	5c		 mulss	 xmm0, DWORD PTR otherNotStatic$37[rsp]
  00611	f3 0f 11 44 24
	64		 movss	 DWORD PTR otherMult$39[rsp], xmm0

; 50   : 		const Vector2 fromTo = FromToVector(collider->midPoint, other->midPoint);

  00617	48 8b 84 24 c8
	05 00 00	 mov	 rax, QWORD PTR other$[rsp]
  0061f	48 8b 40 14	 mov	 rax, QWORD PTR [rax+20]
  00623	48 89 84 24 a8
	04 00 00	 mov	 QWORD PTR to$[rsp], rax
  0062b	48 8b 84 24 c0
	05 00 00	 mov	 rax, QWORD PTR collider$[rsp]
  00633	48 8b 40 14	 mov	 rax, QWORD PTR [rax+20]
  00637	48 89 84 24 88
	04 00 00	 mov	 QWORD PTR from$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 75   : 	_this.x = to.x - from.x;

  0063f	f3 0f 10 84 24
	a8 04 00 00	 movss	 xmm0, DWORD PTR to$[rsp]
  00648	f3 0f 5c 84 24
	88 04 00 00	 subss	 xmm0, DWORD PTR from$[rsp]
  00651	f3 0f 11 84 24
	c8 04 00 00	 movss	 DWORD PTR _this$78[rsp], xmm0

; 76   : 	_this.y = to.y - from.y;

  0065a	f3 0f 10 84 24
	ac 04 00 00	 movss	 xmm0, DWORD PTR to$[rsp+4]
  00663	f3 0f 5c 84 24
	8c 04 00 00	 subss	 xmm0, DWORD PTR from$[rsp+4]
  0066c	f3 0f 11 84 24
	cc 04 00 00	 movss	 DWORD PTR _this$78[rsp+4], xmm0

; 77   : 	return _this;

  00675	48 8b 84 24 c8
	04 00 00	 mov	 rax, QWORD PTR _this$78[rsp]
  0067d	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR $T60[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c

; 50   : 		const Vector2 fromTo = FromToVector(collider->midPoint, other->midPoint);

  00685	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR $T60[rsp]
  0068d	48 89 44 24 78	 mov	 QWORD PTR fromTo$40[rsp], rax

; 51   : 		const bool fromToIsX = IsX(fromTo);

  00692	48 8b 4c 24 78	 mov	 rcx, QWORD PTR fromTo$40[rsp]
  00697	e8 00 00 00 00	 call	 IsX
  0069c	88 84 24 84 00
	00 00		 mov	 BYTE PTR fromToIsX$41[rsp], al

; 52   : 		bool fromToIsRight = fromTo.x > .0f;

  006a3	f3 0f 10 44 24
	78		 movss	 xmm0, DWORD PTR fromTo$40[rsp]
  006a9	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  006b0	76 0d		 jbe	 SHORT $LN63@AABBsOverl
  006b2	c7 84 24 20 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv265[rsp], 1
  006bd	eb 0b		 jmp	 SHORT $LN64@AABBsOverl
$LN63@AABBsOverl:
  006bf	c7 84 24 20 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv265[rsp], 0
$LN64@AABBsOverl:
  006ca	83 bc 24 20 05
	00 00 00	 cmp	 DWORD PTR tv265[rsp], 0
  006d2	75 0d		 jne	 SHORT $LN65@AABBsOverl
  006d4	c7 84 24 24 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv267[rsp], 0
  006df	eb 0b		 jmp	 SHORT $LN66@AABBsOverl
$LN65@AABBsOverl:
  006e1	c7 84 24 24 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv267[rsp], 1
$LN66@AABBsOverl:
  006ec	0f b6 84 24 24
	05 00 00	 movzx	 eax, BYTE PTR tv267[rsp]
  006f4	88 84 24 85 00
	00 00		 mov	 BYTE PTR fromToIsRight$42[rsp], al

; 53   : 		bool fromToIsUp = fromTo.y > .0f;

  006fb	f3 0f 10 44 24
	7c		 movss	 xmm0, DWORD PTR fromTo$40[rsp+4]
  00701	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00708	76 0d		 jbe	 SHORT $LN67@AABBsOverl
  0070a	c7 84 24 28 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv270[rsp], 1
  00715	eb 0b		 jmp	 SHORT $LN68@AABBsOverl
$LN67@AABBsOverl:
  00717	c7 84 24 28 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv270[rsp], 0
$LN68@AABBsOverl:
  00722	83 bc 24 28 05
	00 00 00	 cmp	 DWORD PTR tv270[rsp], 0
  0072a	75 0d		 jne	 SHORT $LN69@AABBsOverl
  0072c	c7 84 24 2c 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv272[rsp], 0
  00737	eb 0b		 jmp	 SHORT $LN70@AABBsOverl
$LN69@AABBsOverl:
  00739	c7 84 24 2c 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv272[rsp], 1
$LN70@AABBsOverl:
  00744	0f b6 84 24 2c
	05 00 00	 movzx	 eax, BYTE PTR tv272[rsp]
  0074c	88 84 24 86 00
	00 00		 mov	 BYTE PTR fromToIsUp$43[rsp], al

; 54   : 		const Vector2 relativeVel = TakeVectors(othData->velocity, colData->velocity);

  00753	48 8b 44 24 48	 mov	 rax, QWORD PTR colData$34[rsp]
  00758	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  0075c	48 89 84 24 48
	04 00 00	 mov	 QWORD PTR rhs$[rsp], rax
  00764	48 8b 44 24 50	 mov	 rax, QWORD PTR othData$35[rsp]
  00769	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  0076d	48 89 84 24 28
	04 00 00	 mov	 QWORD PTR lhs$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 41   : 	_this.x = lhs.x - rhs.x;

  00775	f3 0f 10 84 24
	28 04 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp]
  0077e	f3 0f 5c 84 24
	48 04 00 00	 subss	 xmm0, DWORD PTR rhs$[rsp]
  00787	f3 0f 11 84 24
	68 04 00 00	 movss	 DWORD PTR _this$77[rsp], xmm0

; 42   : 	_this.y = lhs.y - rhs.y;

  00790	f3 0f 10 84 24
	2c 04 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  00799	f3 0f 5c 84 24
	4c 04 00 00	 subss	 xmm0, DWORD PTR rhs$[rsp+4]
  007a2	f3 0f 11 84 24
	6c 04 00 00	 movss	 DWORD PTR _this$77[rsp+4], xmm0

; 43   : 	return _this;

  007ab	48 8b 84 24 68
	04 00 00	 mov	 rax, QWORD PTR _this$77[rsp]
  007b3	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR $T61[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c

; 54   : 		const Vector2 relativeVel = TakeVectors(othData->velocity, colData->velocity);

  007bb	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR $T61[rsp]
  007c3	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR relativeVel$44[rsp], rax

; 55   : 		const bool intX = (CheckIntX(collider, other) && CheckIntY(collider, other) || CheckIntX(other, collider) && CheckIntY(other, collider) || FAbs(NormalizedVector(fromTo).x) >= .6f);

  007cb	b8 08 00 00 00	 mov	 eax, 8
  007d0	48 6b c0 00	 imul	 rax, rax, 0
  007d4	b9 08 00 00 00	 mov	 ecx, 8
  007d9	48 6b c9 00	 imul	 rcx, rcx, 0
  007dd	48 8b 94 24 c8
	05 00 00	 mov	 rdx, QWORD PTR other$[rsp]
  007e5	4c 8b 84 24 c0
	05 00 00	 mov	 r8, QWORD PTR collider$[rsp]
  007ed	f3 0f 10 44 0a
	3c		 movss	 xmm0, DWORD PTR [rdx+rcx+60]
  007f3	41 0f 2f 44 00
	3c		 comiss	 xmm0, DWORD PTR [r8+rax+60]
  007f9	77 30		 ja	 SHORT $LN71@AABBsOverl
  007fb	b8 08 00 00 00	 mov	 eax, 8
  00800	48 6b c0 01	 imul	 rax, rax, 1
  00804	b9 08 00 00 00	 mov	 ecx, 8
  00809	48 6b c9 01	 imul	 rcx, rcx, 1
  0080d	48 8b 94 24 c0
	05 00 00	 mov	 rdx, QWORD PTR collider$[rsp]
  00815	4c 8b 84 24 c8
	05 00 00	 mov	 r8, QWORD PTR other$[rsp]
  0081d	f3 0f 10 44 02
	3c		 movss	 xmm0, DWORD PTR [rdx+rax+60]
  00823	41 0f 2f 44 08
	3c		 comiss	 xmm0, DWORD PTR [r8+rcx+60]
  00829	76 6b		 jbe	 SHORT $LN72@AABBsOverl
$LN71@AABBsOverl:
  0082b	b8 08 00 00 00	 mov	 eax, 8
  00830	48 6b c0 00	 imul	 rax, rax, 0
  00834	b9 08 00 00 00	 mov	 ecx, 8
  00839	48 6b c9 00	 imul	 rcx, rcx, 0
  0083d	48 8b 94 24 c0
	05 00 00	 mov	 rdx, QWORD PTR collider$[rsp]
  00845	4c 8b 84 24 c8
	05 00 00	 mov	 r8, QWORD PTR other$[rsp]
  0084d	f3 0f 10 44 02
	40		 movss	 xmm0, DWORD PTR [rdx+rax+64]
  00853	41 0f 2f 44 08
	40		 comiss	 xmm0, DWORD PTR [r8+rcx+64]
  00859	76 3b		 jbe	 SHORT $LN72@AABBsOverl
  0085b	b8 08 00 00 00	 mov	 eax, 8
  00860	48 6b c0 00	 imul	 rax, rax, 0
  00864	b9 08 00 00 00	 mov	 ecx, 8
  00869	48 6b c9 01	 imul	 rcx, rcx, 1
  0086d	48 8b 94 24 c8
	05 00 00	 mov	 rdx, QWORD PTR other$[rsp]
  00875	f3 0f 10 44 0a
	40		 movss	 xmm0, DWORD PTR [rdx+rcx+64]
  0087b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR x_int_tolerance_y
  00883	48 8b 8c 24 c0
	05 00 00	 mov	 rcx, QWORD PTR collider$[rsp]
  0088b	0f 2f 44 01 40	 comiss	 xmm0, DWORD PTR [rcx+rax+64]
  00890	0f 87 58 01 00
	00		 ja	 $LN75@AABBsOverl
$LN72@AABBsOverl:
  00896	b8 08 00 00 00	 mov	 eax, 8
  0089b	48 6b c0 00	 imul	 rax, rax, 0
  0089f	b9 08 00 00 00	 mov	 ecx, 8
  008a4	48 6b c9 00	 imul	 rcx, rcx, 0
  008a8	48 8b 94 24 c0
	05 00 00	 mov	 rdx, QWORD PTR collider$[rsp]
  008b0	4c 8b 84 24 c8
	05 00 00	 mov	 r8, QWORD PTR other$[rsp]
  008b8	f3 0f 10 44 0a
	3c		 movss	 xmm0, DWORD PTR [rdx+rcx+60]
  008be	41 0f 2f 44 00
	3c		 comiss	 xmm0, DWORD PTR [r8+rax+60]
  008c4	77 30		 ja	 SHORT $LN73@AABBsOverl
  008c6	b8 08 00 00 00	 mov	 eax, 8
  008cb	48 6b c0 01	 imul	 rax, rax, 1
  008cf	b9 08 00 00 00	 mov	 ecx, 8
  008d4	48 6b c9 01	 imul	 rcx, rcx, 1
  008d8	48 8b 94 24 c8
	05 00 00	 mov	 rdx, QWORD PTR other$[rsp]
  008e0	4c 8b 84 24 c0
	05 00 00	 mov	 r8, QWORD PTR collider$[rsp]
  008e8	f3 0f 10 44 02
	3c		 movss	 xmm0, DWORD PTR [rdx+rax+60]
  008ee	41 0f 2f 44 08
	3c		 comiss	 xmm0, DWORD PTR [r8+rcx+60]
  008f4	76 6b		 jbe	 SHORT $LN74@AABBsOverl
$LN73@AABBsOverl:
  008f6	b8 08 00 00 00	 mov	 eax, 8
  008fb	48 6b c0 00	 imul	 rax, rax, 0
  008ff	b9 08 00 00 00	 mov	 ecx, 8
  00904	48 6b c9 00	 imul	 rcx, rcx, 0
  00908	48 8b 94 24 c8
	05 00 00	 mov	 rdx, QWORD PTR other$[rsp]
  00910	4c 8b 84 24 c0
	05 00 00	 mov	 r8, QWORD PTR collider$[rsp]
  00918	f3 0f 10 44 02
	40		 movss	 xmm0, DWORD PTR [rdx+rax+64]
  0091e	41 0f 2f 44 08
	40		 comiss	 xmm0, DWORD PTR [r8+rcx+64]
  00924	76 3b		 jbe	 SHORT $LN74@AABBsOverl
  00926	b8 08 00 00 00	 mov	 eax, 8
  0092b	48 6b c0 00	 imul	 rax, rax, 0
  0092f	b9 08 00 00 00	 mov	 ecx, 8
  00934	48 6b c9 01	 imul	 rcx, rcx, 1
  00938	48 8b 94 24 c0
	05 00 00	 mov	 rdx, QWORD PTR collider$[rsp]
  00940	f3 0f 10 44 0a
	40		 movss	 xmm0, DWORD PTR [rdx+rcx+64]
  00946	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR x_int_tolerance_y
  0094e	48 8b 8c 24 c8
	05 00 00	 mov	 rcx, QWORD PTR other$[rsp]
  00956	0f 2f 44 01 40	 comiss	 xmm0, DWORD PTR [rcx+rax+64]
  0095b	0f 87 8d 00 00
	00		 ja	 $LN75@AABBsOverl
$LN74@AABBsOverl:
  00961	48 8b 4c 24 78	 mov	 rcx, QWORD PTR fromTo$40[rsp]
  00966	e8 00 00 00 00	 call	 NormalizedVector
  0096b	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR $T58[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h

; 19   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  00973	f3 0f 10 84 24
	10 01 00 00	 movss	 xmm0, DWORD PTR $T58[rsp]
  0097c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00983	72 0d		 jb	 SHORT $LN140@AABBsOverl
  00985	c7 84 24 30 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv812[rsp], 1
  00990	eb 0b		 jmp	 SHORT $LN141@AABBsOverl
$LN140@AABBsOverl:
  00992	c7 84 24 30 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv812[rsp], 0
$LN141@AABBsOverl:
  0099d	f3 0f 2a 84 24
	30 05 00 00	 cvtsi2ss xmm0, DWORD PTR tv812[rsp]
  009a6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  009ae	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  009b6	f3 0f 10 8c 24
	10 01 00 00	 movss	 xmm1, DWORD PTR $T58[rsp]
  009bf	f3 0f 59 c8	 mulss	 xmm1, xmm0
  009c3	0f 28 c1	 movaps	 xmm0, xmm1
  009c6	f3 0f 11 84 24
	48 01 00 00	 movss	 DWORD PTR $T62[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c

; 55   : 		const bool intX = (CheckIntX(collider, other) && CheckIntY(collider, other) || CheckIntX(other, collider) && CheckIntY(other, collider) || FAbs(NormalizedVector(fromTo).x) >= .6f);

  009cf	f3 0f 10 84 24
	48 01 00 00	 movss	 xmm0, DWORD PTR $T62[rsp]
  009d8	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f19999a
  009df	73 0d		 jae	 SHORT $LN75@AABBsOverl
  009e1	c7 84 24 34 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv358[rsp], 0
  009ec	eb 0b		 jmp	 SHORT $LN76@AABBsOverl
$LN75@AABBsOverl:
  009ee	c7 84 24 34 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv358[rsp], 1
$LN76@AABBsOverl:
  009f9	83 bc 24 34 05
	00 00 00	 cmp	 DWORD PTR tv358[rsp], 0
  00a01	75 0d		 jne	 SHORT $LN77@AABBsOverl
  00a03	c7 84 24 38 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv360[rsp], 0
  00a0e	eb 0b		 jmp	 SHORT $LN78@AABBsOverl
$LN77@AABBsOverl:
  00a10	c7 84 24 38 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv360[rsp], 1
$LN78@AABBsOverl:
  00a1b	0f b6 84 24 38
	05 00 00	 movzx	 eax, BYTE PTR tv360[rsp]
  00a23	88 84 24 a4 00
	00 00		 mov	 BYTE PTR intX$45[rsp], al

; 56   : 		normal.x = ((fromToIsRight ? FMax : FMin)(collider->trueAABB[!fromToIsRight].x, other->trueAABB[!fromToIsRight].x) - (fromToIsX ? FMin : FMax)(collider->trueAABB[fromToIsRight].x, collider->trueAABB[fromToIsRight].x)) * intX;

  00a2a	0f b6 84 24 85
	00 00 00	 movzx	 eax, BYTE PTR fromToIsRight$42[rsp]
  00a32	85 c0		 test	 eax, eax
  00a34	75 0d		 jne	 SHORT $LN81@AABBsOverl
  00a36	c7 84 24 3c 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv369[rsp], 1
  00a41	eb 0b		 jmp	 SHORT $LN82@AABBsOverl
$LN81@AABBsOverl:
  00a43	c7 84 24 3c 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv369[rsp], 0
$LN82@AABBsOverl:
  00a4e	0f b6 84 24 85
	00 00 00	 movzx	 eax, BYTE PTR fromToIsRight$42[rsp]
  00a56	85 c0		 test	 eax, eax
  00a58	75 0d		 jne	 SHORT $LN83@AABBsOverl
  00a5a	c7 84 24 40 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv378[rsp], 1
  00a65	eb 0b		 jmp	 SHORT $LN84@AABBsOverl
$LN83@AABBsOverl:
  00a67	c7 84 24 40 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv378[rsp], 0
$LN84@AABBsOverl:
  00a72	0f b6 84 24 85
	00 00 00	 movzx	 eax, BYTE PTR fromToIsRight$42[rsp]
  00a7a	85 c0		 test	 eax, eax
  00a7c	74 11		 je	 SHORT $LN79@AABBsOverl
  00a7e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:FMax
  00a85	48 89 84 24 48
	05 00 00	 mov	 QWORD PTR tv364[rsp], rax
  00a8d	eb 0f		 jmp	 SHORT $LN80@AABBsOverl
$LN79@AABBsOverl:
  00a8f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:FMin
  00a96	48 89 84 24 48
	05 00 00	 mov	 QWORD PTR tv364[rsp], rax
$LN80@AABBsOverl:
  00a9e	0f b6 84 24 84
	00 00 00	 movzx	 eax, BYTE PTR fromToIsX$41[rsp]
  00aa6	85 c0		 test	 eax, eax
  00aa8	74 11		 je	 SHORT $LN85@AABBsOverl
  00aaa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:FMin
  00ab1	48 89 84 24 50
	05 00 00	 mov	 QWORD PTR tv386[rsp], rax
  00ab9	eb 0f		 jmp	 SHORT $LN86@AABBsOverl
$LN85@AABBsOverl:
  00abb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:FMax
  00ac2	48 89 84 24 50
	05 00 00	 mov	 QWORD PTR tv386[rsp], rax
$LN86@AABBsOverl:
  00aca	48 63 84 24 3c
	05 00 00	 movsxd	 rax, DWORD PTR tv369[rsp]
  00ad2	48 63 8c 24 40
	05 00 00	 movsxd	 rcx, DWORD PTR tv378[rsp]
  00ada	48 8b 94 24 c8
	05 00 00	 mov	 rdx, QWORD PTR other$[rsp]
  00ae2	f3 0f 10 4c c2
	3c		 movss	 xmm1, DWORD PTR [rdx+rax*8+60]
  00ae8	48 8b 84 24 c0
	05 00 00	 mov	 rax, QWORD PTR collider$[rsp]
  00af0	f3 0f 10 44 c8
	3c		 movss	 xmm0, DWORD PTR [rax+rcx*8+60]
  00af6	ff 94 24 48 05
	00 00		 call	 QWORD PTR tv364[rsp]
  00afd	f3 0f 11 84 24
	58 05 00 00	 movss	 DWORD PTR tv365[rsp], xmm0
  00b06	0f b6 84 24 85
	00 00 00	 movzx	 eax, BYTE PTR fromToIsRight$42[rsp]
  00b0e	0f b6 8c 24 85
	00 00 00	 movzx	 ecx, BYTE PTR fromToIsRight$42[rsp]
  00b16	48 8b 94 24 c0
	05 00 00	 mov	 rdx, QWORD PTR collider$[rsp]
  00b1e	f3 0f 10 4c c2
	3c		 movss	 xmm1, DWORD PTR [rdx+rax*8+60]
  00b24	48 8b 84 24 c0
	05 00 00	 mov	 rax, QWORD PTR collider$[rsp]
  00b2c	f3 0f 10 44 c8
	3c		 movss	 xmm0, DWORD PTR [rax+rcx*8+60]
  00b32	ff 94 24 50 05
	00 00		 call	 QWORD PTR tv386[rsp]
  00b39	f3 0f 10 8c 24
	58 05 00 00	 movss	 xmm1, DWORD PTR tv365[rsp]
  00b42	f3 0f 5c c8	 subss	 xmm1, xmm0
  00b46	0f 28 c1	 movaps	 xmm0, xmm1
  00b49	0f b6 84 24 a4
	00 00 00	 movzx	 eax, BYTE PTR intX$45[rsp]
  00b51	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00b55	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00b59	f3 0f 11 44 24
	38		 movss	 DWORD PTR normal$[rsp], xmm0

; 57   : 		normal.y = ((fromToIsUp ? FMax : FMin)(collider->trueAABB[!fromToIsUp].y, other->trueAABB[!fromToIsUp].y) - (fromToIsUp ? FMin : FMax)(collider->trueAABB[fromToIsUp].y, collider->trueAABB[fromToIsUp].y)) * !intX;//positive overlap

  00b5f	0f b6 84 24 86
	00 00 00	 movzx	 eax, BYTE PTR fromToIsUp$43[rsp]
  00b67	85 c0		 test	 eax, eax
  00b69	75 0d		 jne	 SHORT $LN89@AABBsOverl
  00b6b	c7 84 24 5c 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv412[rsp], 1
  00b76	eb 0b		 jmp	 SHORT $LN90@AABBsOverl
$LN89@AABBsOverl:
  00b78	c7 84 24 5c 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv412[rsp], 0
$LN90@AABBsOverl:
  00b83	0f b6 84 24 86
	00 00 00	 movzx	 eax, BYTE PTR fromToIsUp$43[rsp]
  00b8b	85 c0		 test	 eax, eax
  00b8d	75 0d		 jne	 SHORT $LN91@AABBsOverl
  00b8f	c7 84 24 60 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv453[rsp], 1
  00b9a	eb 0b		 jmp	 SHORT $LN92@AABBsOverl
$LN91@AABBsOverl:
  00b9c	c7 84 24 60 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv453[rsp], 0
$LN92@AABBsOverl:
  00ba7	0f b6 84 24 86
	00 00 00	 movzx	 eax, BYTE PTR fromToIsUp$43[rsp]
  00baf	85 c0		 test	 eax, eax
  00bb1	74 11		 je	 SHORT $LN87@AABBsOverl
  00bb3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:FMax
  00bba	48 89 84 24 68
	05 00 00	 mov	 QWORD PTR tv407[rsp], rax
  00bc2	eb 0f		 jmp	 SHORT $LN88@AABBsOverl
$LN87@AABBsOverl:
  00bc4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:FMin
  00bcb	48 89 84 24 68
	05 00 00	 mov	 QWORD PTR tv407[rsp], rax
$LN88@AABBsOverl:
  00bd3	0f b6 84 24 86
	00 00 00	 movzx	 eax, BYTE PTR fromToIsUp$43[rsp]
  00bdb	85 c0		 test	 eax, eax
  00bdd	74 11		 je	 SHORT $LN93@AABBsOverl
  00bdf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:FMin
  00be6	48 89 84 24 70
	05 00 00	 mov	 QWORD PTR tv461[rsp], rax
  00bee	eb 0f		 jmp	 SHORT $LN94@AABBsOverl
$LN93@AABBsOverl:
  00bf0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:FMax
  00bf7	48 89 84 24 70
	05 00 00	 mov	 QWORD PTR tv461[rsp], rax
$LN94@AABBsOverl:
  00bff	0f b6 84 24 a4
	00 00 00	 movzx	 eax, BYTE PTR intX$45[rsp]
  00c07	85 c0		 test	 eax, eax
  00c09	75 0d		 jne	 SHORT $LN95@AABBsOverl
  00c0b	c7 84 24 78 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv479[rsp], 1
  00c16	eb 0b		 jmp	 SHORT $LN96@AABBsOverl
$LN95@AABBsOverl:
  00c18	c7 84 24 78 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv479[rsp], 0
$LN96@AABBsOverl:
  00c23	48 63 84 24 5c
	05 00 00	 movsxd	 rax, DWORD PTR tv412[rsp]
  00c2b	48 63 8c 24 60
	05 00 00	 movsxd	 rcx, DWORD PTR tv453[rsp]
  00c33	48 8b 94 24 c8
	05 00 00	 mov	 rdx, QWORD PTR other$[rsp]
  00c3b	f3 0f 10 4c c2
	40		 movss	 xmm1, DWORD PTR [rdx+rax*8+64]
  00c41	48 8b 84 24 c0
	05 00 00	 mov	 rax, QWORD PTR collider$[rsp]
  00c49	f3 0f 10 44 c8
	40		 movss	 xmm0, DWORD PTR [rax+rcx*8+64]
  00c4f	ff 94 24 68 05
	00 00		 call	 QWORD PTR tv407[rsp]
  00c56	f3 0f 11 84 24
	7c 05 00 00	 movss	 DWORD PTR tv408[rsp], xmm0
  00c5f	0f b6 84 24 86
	00 00 00	 movzx	 eax, BYTE PTR fromToIsUp$43[rsp]
  00c67	0f b6 8c 24 86
	00 00 00	 movzx	 ecx, BYTE PTR fromToIsUp$43[rsp]
  00c6f	48 8b 94 24 c0
	05 00 00	 mov	 rdx, QWORD PTR collider$[rsp]
  00c77	f3 0f 10 4c c2
	40		 movss	 xmm1, DWORD PTR [rdx+rax*8+64]
  00c7d	48 8b 84 24 c0
	05 00 00	 mov	 rax, QWORD PTR collider$[rsp]
  00c85	f3 0f 10 44 c8
	40		 movss	 xmm0, DWORD PTR [rax+rcx*8+64]
  00c8b	ff 94 24 70 05
	00 00		 call	 QWORD PTR tv461[rsp]
  00c92	f3 0f 10 8c 24
	7c 05 00 00	 movss	 xmm1, DWORD PTR tv408[rsp]
  00c9b	f3 0f 5c c8	 subss	 xmm1, xmm0
  00c9f	0f 28 c1	 movaps	 xmm0, xmm1
  00ca2	f3 0f 2a 8c 24
	78 05 00 00	 cvtsi2ss xmm1, DWORD PTR tv479[rsp]
  00cab	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00caf	f3 0f 11 44 24
	3c		 movss	 DWORD PTR normal$[rsp+4], xmm0

; 58   : 		normalIsX = IsX(normal);

  00cb5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR normal$[rsp]
  00cba	e8 00 00 00 00	 call	 IsX
  00cbf	88 44 24 28	 mov	 BYTE PTR normalIsX$[rsp], al

; 59   : 		const bool velIsX = IsX(relativeVel);

  00cc3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR relativeVel$44[rsp]
  00ccb	e8 00 00 00 00	 call	 IsX
  00cd0	88 84 24 a5 00
	00 00		 mov	 BYTE PTR velIsX$46[rsp], al

; 60   : 		Vector2 changed = { normalIsX && velIsX , !normalIsX && !velIsX };

  00cd7	0f b6 44 24 28	 movzx	 eax, BYTE PTR normalIsX$[rsp]
  00cdc	85 c0		 test	 eax, eax
  00cde	74 19		 je	 SHORT $LN97@AABBsOverl
  00ce0	0f b6 84 24 a5
	00 00 00	 movzx	 eax, BYTE PTR velIsX$46[rsp]
  00ce8	85 c0		 test	 eax, eax
  00cea	74 0d		 je	 SHORT $LN97@AABBsOverl
  00cec	c7 84 24 80 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv490[rsp], 1
  00cf7	eb 0b		 jmp	 SHORT $LN98@AABBsOverl
$LN97@AABBsOverl:
  00cf9	c7 84 24 80 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv490[rsp], 0
$LN98@AABBsOverl:
  00d04	f3 0f 2a 84 24
	80 05 00 00	 cvtsi2ss xmm0, DWORD PTR tv490[rsp]
  00d0d	f3 0f 11 84 24
	b8 00 00 00	 movss	 DWORD PTR changed$47[rsp], xmm0
  00d16	0f b6 44 24 28	 movzx	 eax, BYTE PTR normalIsX$[rsp]
  00d1b	85 c0		 test	 eax, eax
  00d1d	75 19		 jne	 SHORT $LN99@AABBsOverl
  00d1f	0f b6 84 24 a5
	00 00 00	 movzx	 eax, BYTE PTR velIsX$46[rsp]
  00d27	85 c0		 test	 eax, eax
  00d29	75 0d		 jne	 SHORT $LN99@AABBsOverl
  00d2b	c7 84 24 84 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv496[rsp], 1
  00d36	eb 0b		 jmp	 SHORT $LN100@AABBsOverl
$LN99@AABBsOverl:
  00d38	c7 84 24 84 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv496[rsp], 0
$LN100@AABBsOverl:
  00d43	f3 0f 2a 84 24
	84 05 00 00	 cvtsi2ss xmm0, DWORD PTR tv496[rsp]
  00d4c	f3 0f 11 84 24
	bc 00 00 00	 movss	 DWORD PTR changed$47[rsp+4], xmm0

; 61   : 		float dot = NormalDot(normal, relativeVel);

  00d55	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR relativeVel$44[rsp]
  00d5d	48 89 84 24 c8
	03 00 00	 mov	 QWORD PTR RHS$[rsp], rax
  00d65	48 8b 44 24 38	 mov	 rax, QWORD PTR normal$[rsp]
  00d6a	48 89 84 24 a8
	03 00 00	 mov	 QWORD PTR LHS$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 157  : 	*vector = NormalizedVector(*vector);

  00d72	48 8b 8c 24 a8
	03 00 00	 mov	 rcx, QWORD PTR LHS$[rsp]
  00d7a	e8 00 00 00 00	 call	 NormalizedVector
  00d7f	48 89 84 24 a8
	03 00 00	 mov	 QWORD PTR LHS$[rsp], rax
  00d87	48 8b 8c 24 c8
	03 00 00	 mov	 rcx, QWORD PTR RHS$[rsp]
  00d8f	e8 00 00 00 00	 call	 NormalizedVector
  00d94	48 89 84 24 c8
	03 00 00	 mov	 QWORD PTR RHS$[rsp], rax

; 170  : 	return DotProduct(LHS, RHS);

  00d9c	48 8b 84 24 c8
	03 00 00	 mov	 rax, QWORD PTR RHS$[rsp]
  00da4	48 89 84 24 08
	04 00 00	 mov	 QWORD PTR RHS$[rsp], rax
  00dac	48 8b 84 24 a8
	03 00 00	 mov	 rax, QWORD PTR LHS$[rsp]
  00db4	48 89 84 24 e8
	03 00 00	 mov	 QWORD PTR LHS$[rsp], rax

; 165  : 	return LHS.x * RHS.x + LHS.y * RHS.y;

  00dbc	f3 0f 10 84 24
	e8 03 00 00	 movss	 xmm0, DWORD PTR LHS$[rsp]
  00dc5	f3 0f 59 84 24
	08 04 00 00	 mulss	 xmm0, DWORD PTR RHS$[rsp]
  00dce	f3 0f 10 8c 24
	ec 03 00 00	 movss	 xmm1, DWORD PTR LHS$[rsp+4]
  00dd7	f3 0f 59 8c 24
	0c 04 00 00	 mulss	 xmm1, DWORD PTR RHS$[rsp+4]
  00de0	f3 0f 58 c1	 addss	 xmm0, xmm1
  00de4	f3 0f 11 84 24
	78 01 00 00	 movss	 DWORD PTR $T63[rsp], xmm0

; 170  : 	return DotProduct(LHS, RHS);

  00ded	f3 0f 10 84 24
	78 01 00 00	 movss	 xmm0, DWORD PTR $T63[rsp]
  00df6	f3 0f 11 84 24
	7c 01 00 00	 movss	 DWORD PTR $T64[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c

; 61   : 		float dot = NormalDot(normal, relativeVel);

  00dff	f3 0f 10 84 24
	7c 01 00 00	 movss	 xmm0, DWORD PTR $T64[rsp]
  00e08	f3 0f 11 84 24
	c4 00 00 00	 movss	 DWORD PTR dot$48[rsp], xmm0

; 62   : 		float e =

  00e11	48 8b 44 24 50	 mov	 rax, QWORD PTR othData$35[rsp]
  00e16	f3 0f 10 48 34	 movss	 xmm1, DWORD PTR [rax+52]
  00e1b	48 8b 44 24 48	 mov	 rax, QWORD PTR colData$34[rsp]
  00e20	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [rax+52]
  00e25	e8 00 00 00 00	 call	 FMin
  00e2a	f3 0f 11 84 24
	c8 00 00 00	 movss	 DWORD PTR e$49[rsp], xmm0

; 72   : 		Vector2 jn = VectorByScalar(normal, (-1.0f - e) * dot / (colData->invMass + othData->invMass));

  00e33	48 8b 44 24 48	 mov	 rax, QWORD PTR colData$34[rsp]
  00e38	48 8b 4c 24 50	 mov	 rcx, QWORD PTR othData$35[rsp]
  00e3d	f3 0f 10 40 44	 movss	 xmm0, DWORD PTR [rax+68]
  00e42	f3 0f 58 41 44	 addss	 xmm0, DWORD PTR [rcx+68]
  00e47	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00e4f	f3 0f 5c 8c 24
	c8 00 00 00	 subss	 xmm1, DWORD PTR e$49[rsp]
  00e58	f3 0f 59 8c 24
	c4 00 00 00	 mulss	 xmm1, DWORD PTR dot$48[rsp]
  00e61	f3 0f 5e c8	 divss	 xmm1, xmm0
  00e65	0f 28 c1	 movaps	 xmm0, xmm1
  00e68	f3 0f 11 84 24
	78 03 00 00	 movss	 DWORD PTR scalar$[rsp], xmm0
  00e71	48 8b 44 24 38	 mov	 rax, QWORD PTR normal$[rsp]
  00e76	48 89 84 24 68
	03 00 00	 mov	 QWORD PTR vector$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 61   : 	Vector2 _this = { vector.x * scalar, vector.y * scalar };

  00e7e	f3 0f 10 84 24
	68 03 00 00	 movss	 xmm0, DWORD PTR vector$[rsp]
  00e87	f3 0f 59 84 24
	78 03 00 00	 mulss	 xmm0, DWORD PTR scalar$[rsp]
  00e90	f3 0f 11 84 24
	88 03 00 00	 movss	 DWORD PTR _this$76[rsp], xmm0
  00e99	f3 0f 10 84 24
	6c 03 00 00	 movss	 xmm0, DWORD PTR vector$[rsp+4]
  00ea2	f3 0f 59 84 24
	78 03 00 00	 mulss	 xmm0, DWORD PTR scalar$[rsp]
  00eab	f3 0f 11 84 24
	8c 03 00 00	 movss	 DWORD PTR _this$76[rsp+4], xmm0

; 62   : 	return _this;

  00eb4	48 8b 84 24 88
	03 00 00	 mov	 rax, QWORD PTR _this$76[rsp]
  00ebc	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR $T65[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c

; 72   : 		Vector2 jn = VectorByScalar(normal, (-1.0f - e) * dot / (colData->invMass + othData->invMass));

  00ec4	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR $T65[rsp]
  00ecc	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR jn$50[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 112  : 	*a = VectorMult(*a, b);

  00ed4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR changed$47[rsp]
  00edc	48 89 84 24 28
	03 00 00	 mov	 QWORD PTR b$[rsp], rax
  00ee4	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR jn$50[rsp]
  00eec	48 89 84 24 08
	03 00 00	 mov	 QWORD PTR a$[rsp], rax

; 107  : 	_this.x = a.x * b.x;

  00ef4	f3 0f 10 84 24
	08 03 00 00	 movss	 xmm0, DWORD PTR a$[rsp]
  00efd	f3 0f 59 84 24
	28 03 00 00	 mulss	 xmm0, DWORD PTR b$[rsp]
  00f06	f3 0f 11 84 24
	48 03 00 00	 movss	 DWORD PTR _this$75[rsp], xmm0

; 108  : 	_this.y = a.y * b.y;

  00f0f	f3 0f 10 84 24
	0c 03 00 00	 movss	 xmm0, DWORD PTR a$[rsp+4]
  00f18	f3 0f 59 84 24
	2c 03 00 00	 mulss	 xmm0, DWORD PTR b$[rsp+4]
  00f21	f3 0f 11 84 24
	4c 03 00 00	 movss	 DWORD PTR _this$75[rsp+4], xmm0

; 109  : 	return _this;

  00f2a	48 8b 84 24 48
	03 00 00	 mov	 rax, QWORD PTR _this$75[rsp]
  00f32	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR $T66[rsp], rax

; 112  : 	*a = VectorMult(*a, b);

  00f3a	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR $T66[rsp]
  00f42	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR jn$50[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c

; 74   : 		if (dot > .0f) {

  00f4a	f3 0f 10 84 24
	c4 00 00 00	 movss	 xmm0, DWORD PTR dot$48[rsp]
  00f53	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00f5a	0f 86 ba 01 00
	00		 jbe	 $LN5@AABBsOverl

; 75   : 			TakeVectorsAssign(&colData->velocity, VectorByScalar(jn, colNotStatic));

  00f60	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR jn$50[rsp]
  00f68	48 89 84 24 c8
	02 00 00	 mov	 QWORD PTR vector$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 61   : 	Vector2 _this = { vector.x * scalar, vector.y * scalar };

  00f70	f3 0f 10 84 24
	c8 02 00 00	 movss	 xmm0, DWORD PTR vector$[rsp]
  00f79	f3 0f 59 44 24
	58		 mulss	 xmm0, DWORD PTR colNotStatic$36[rsp]
  00f7f	f3 0f 11 84 24
	e8 02 00 00	 movss	 DWORD PTR _this$74[rsp], xmm0
  00f88	f3 0f 10 84 24
	cc 02 00 00	 movss	 xmm0, DWORD PTR vector$[rsp+4]
  00f91	f3 0f 59 44 24
	58		 mulss	 xmm0, DWORD PTR colNotStatic$36[rsp]
  00f97	f3 0f 11 84 24
	ec 02 00 00	 movss	 DWORD PTR _this$74[rsp+4], xmm0

; 62   : 	return _this;

  00fa0	48 8b 84 24 e8
	02 00 00	 mov	 rax, QWORD PTR _this$74[rsp]
  00fa8	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR $T67[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c

; 75   : 			TakeVectorsAssign(&colData->velocity, VectorByScalar(jn, colNotStatic));

  00fb0	48 8b 44 24 48	 mov	 rax, QWORD PTR colData$34[rsp]
  00fb5	48 83 c0 48	 add	 rax, 72			; 00000048H
  00fb9	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR lhs$[rsp], rax
  00fc1	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR $T67[rsp]
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 55   : 	*lhs = TakeVectors(*lhs, rhs);

  00fc9	48 89 84 24 88
	02 00 00	 mov	 QWORD PTR rhs$[rsp], rax
  00fd1	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR lhs$[rsp]
  00fd9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00fdc	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR lhs$[rsp], rax

; 41   : 	_this.x = lhs.x - rhs.x;

  00fe4	f3 0f 10 84 24
	68 02 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp]
  00fed	f3 0f 5c 84 24
	88 02 00 00	 subss	 xmm0, DWORD PTR rhs$[rsp]
  00ff6	f3 0f 11 84 24
	a8 02 00 00	 movss	 DWORD PTR _this$73[rsp], xmm0

; 42   : 	_this.y = lhs.y - rhs.y;

  00fff	f3 0f 10 84 24
	6c 02 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  01008	f3 0f 5c 84 24
	8c 02 00 00	 subss	 xmm0, DWORD PTR rhs$[rsp+4]
  01011	f3 0f 11 84 24
	ac 02 00 00	 movss	 DWORD PTR _this$73[rsp+4], xmm0

; 43   : 	return _this;

  0101a	48 8b 84 24 a8
	02 00 00	 mov	 rax, QWORD PTR _this$73[rsp]
  01022	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR $T68[rsp], rax

; 55   : 	*lhs = TakeVectors(*lhs, rhs);

  0102a	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR $T68[rsp]
  01032	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR lhs$[rsp]
  0103a	48 89 01	 mov	 QWORD PTR [rcx], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c

; 76   : 			AddVectorsAssign(&othData->velocity, VectorByScalar(jn, otherNotStatic));

  0103d	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR jn$50[rsp]
  01045	48 89 84 24 28
	02 00 00	 mov	 QWORD PTR vector$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 61   : 	Vector2 _this = { vector.x * scalar, vector.y * scalar };

  0104d	f3 0f 10 84 24
	28 02 00 00	 movss	 xmm0, DWORD PTR vector$[rsp]
  01056	f3 0f 59 44 24
	5c		 mulss	 xmm0, DWORD PTR otherNotStatic$37[rsp]
  0105c	f3 0f 11 84 24
	48 02 00 00	 movss	 DWORD PTR _this$72[rsp], xmm0
  01065	f3 0f 10 84 24
	2c 02 00 00	 movss	 xmm0, DWORD PTR vector$[rsp+4]
  0106e	f3 0f 59 44 24
	5c		 mulss	 xmm0, DWORD PTR otherNotStatic$37[rsp]
  01074	f3 0f 11 84 24
	4c 02 00 00	 movss	 DWORD PTR _this$72[rsp+4], xmm0

; 62   : 	return _this;

  0107d	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR _this$72[rsp]
  01085	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR $T69[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c

; 76   : 			AddVectorsAssign(&othData->velocity, VectorByScalar(jn, otherNotStatic));

  0108d	48 8b 44 24 50	 mov	 rax, QWORD PTR othData$35[rsp]
  01092	48 83 c0 48	 add	 rax, 72			; 00000048H
  01096	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR lhs$[rsp], rax
  0109e	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR $T69[rsp]
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 52   : 	*lhs = AddVectors(*lhs, rhs);

  010a6	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR rhs$[rsp], rax
  010ae	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR lhs$[rsp]
  010b6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  010b9	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR lhs$[rsp], rax

; 35   : 	_this.x = lhs.x + rhs.x;

  010c1	f3 0f 10 84 24
	c8 01 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp]
  010ca	f3 0f 58 84 24
	e8 01 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp]
  010d3	f3 0f 11 84 24
	08 02 00 00	 movss	 DWORD PTR _this$71[rsp], xmm0

; 36   : 	_this.y = lhs.y + rhs.y;

  010dc	f3 0f 10 84 24
	cc 01 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  010e5	f3 0f 58 84 24
	ec 01 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp+4]
  010ee	f3 0f 11 84 24
	0c 02 00 00	 movss	 DWORD PTR _this$71[rsp+4], xmm0

; 37   : 	return _this;

  010f7	48 8b 84 24 08
	02 00 00	 mov	 rax, QWORD PTR _this$71[rsp]
  010ff	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR $T70[rsp], rax

; 52   : 	*lhs = AddVectors(*lhs, rhs);

  01107	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR $T70[rsp]
  0110f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR lhs$[rsp]
  01117	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN5@AABBsOverl:
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.c

; 78   : 		if (normalIsX) {

  0111a	0f b6 44 24 28	 movzx	 eax, BYTE PTR normalIsX$[rsp]
  0111f	85 c0		 test	 eax, eax
  01121	0f 84 93 00 00
	00		 je	 $LN6@AABBsOverl

; 79   : 			if (colMult) ChangePositionXTo(colData->transform, colData->transform.position.x + normal.x * colMult);

  01127	f3 0f 10 44 24
	60		 movss	 xmm0, DWORD PTR colMult$38[rsp]
  0112d	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  01134	7a 02		 jp	 SHORT $LN242@AABBsOverl
  01136	74 27		 je	 SHORT $LN7@AABBsOverl
$LN242@AABBsOverl:
  01138	f3 0f 10 44 24
	38		 movss	 xmm0, DWORD PTR normal$[rsp]
  0113e	f3 0f 59 44 24
	60		 mulss	 xmm0, DWORD PTR colMult$38[rsp]
  01144	48 8b 44 24 48	 mov	 rax, QWORD PTR colData$34[rsp]
  01149	f3 0f 10 48 0c	 movss	 xmm1, DWORD PTR [rax+12]
  0114e	f3 0f 58 c8	 addss	 xmm1, xmm0
  01152	0f 28 c1	 movaps	 xmm0, xmm1
  01155	48 8b 44 24 48	 mov	 rax, QWORD PTR colData$34[rsp]
  0115a	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0
$LN7@AABBsOverl:
  0115f	48 8b 44 24 48	 mov	 rax, QWORD PTR colData$34[rsp]
  01164	c6 00 01	 mov	 BYTE PTR [rax], 1
  01167	c6 05 00 00 00
	00 01		 mov	 BYTE PTR shouldDraw, 1

; 80   : 			if (otherMult) ChangePositionXTo(othData->transform, othData->transform.position.x - normal.x * otherMult);

  0116e	f3 0f 10 44 24
	64		 movss	 xmm0, DWORD PTR otherMult$39[rsp]
  01174	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0117b	7a 02		 jp	 SHORT $LN241@AABBsOverl
  0117d	74 27		 je	 SHORT $LN8@AABBsOverl
$LN241@AABBsOverl:
  0117f	f3 0f 10 44 24
	38		 movss	 xmm0, DWORD PTR normal$[rsp]
  01185	f3 0f 59 44 24
	64		 mulss	 xmm0, DWORD PTR otherMult$39[rsp]
  0118b	48 8b 44 24 50	 mov	 rax, QWORD PTR othData$35[rsp]
  01190	f3 0f 10 48 0c	 movss	 xmm1, DWORD PTR [rax+12]
  01195	f3 0f 5c c8	 subss	 xmm1, xmm0
  01199	0f 28 c1	 movaps	 xmm0, xmm1
  0119c	48 8b 44 24 50	 mov	 rax, QWORD PTR othData$35[rsp]
  011a1	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0
$LN8@AABBsOverl:
  011a6	48 8b 44 24 50	 mov	 rax, QWORD PTR othData$35[rsp]
  011ab	c6 00 01	 mov	 BYTE PTR [rax], 1
  011ae	c6 05 00 00 00
	00 01		 mov	 BYTE PTR shouldDraw, 1

; 81   : 			goto update_aabb;

  011b5	e9 90 00 00 00	 jmp	 $update_aabb$245
$LN6@AABBsOverl:

; 82   : 		}
; 83   : 		if (colMult) ChangePositionYTo(colData->transform, colData->transform.position.y + normal.y * colMult);

  011ba	f3 0f 10 44 24
	60		 movss	 xmm0, DWORD PTR colMult$38[rsp]
  011c0	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  011c7	7a 02		 jp	 SHORT $LN240@AABBsOverl
  011c9	74 27		 je	 SHORT $LN9@AABBsOverl
$LN240@AABBsOverl:
  011cb	f3 0f 10 44 24
	3c		 movss	 xmm0, DWORD PTR normal$[rsp+4]
  011d1	f3 0f 59 44 24
	60		 mulss	 xmm0, DWORD PTR colMult$38[rsp]
  011d7	48 8b 44 24 48	 mov	 rax, QWORD PTR colData$34[rsp]
  011dc	f3 0f 10 48 10	 movss	 xmm1, DWORD PTR [rax+16]
  011e1	f3 0f 58 c8	 addss	 xmm1, xmm0
  011e5	0f 28 c1	 movaps	 xmm0, xmm1
  011e8	48 8b 44 24 48	 mov	 rax, QWORD PTR colData$34[rsp]
  011ed	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0
$LN9@AABBsOverl:
  011f2	48 8b 44 24 48	 mov	 rax, QWORD PTR colData$34[rsp]
  011f7	c6 40 01 01	 mov	 BYTE PTR [rax+1], 1
  011fb	c6 05 00 00 00
	00 01		 mov	 BYTE PTR shouldDraw, 1

; 84   : 		if (otherMult) ChangePositionYTo(othData->transform, othData->transform.position.y - normal.y * otherMult);

  01202	f3 0f 10 44 24
	64		 movss	 xmm0, DWORD PTR otherMult$39[rsp]
  01208	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0120f	7a 02		 jp	 SHORT $LN239@AABBsOverl
  01211	74 27		 je	 SHORT $LN10@AABBsOverl
$LN239@AABBsOverl:
  01213	f3 0f 10 44 24
	3c		 movss	 xmm0, DWORD PTR normal$[rsp+4]
  01219	f3 0f 59 44 24
	64		 mulss	 xmm0, DWORD PTR otherMult$39[rsp]
  0121f	48 8b 44 24 50	 mov	 rax, QWORD PTR othData$35[rsp]
  01224	f3 0f 10 48 10	 movss	 xmm1, DWORD PTR [rax+16]
  01229	f3 0f 5c c8	 subss	 xmm1, xmm0
  0122d	0f 28 c1	 movaps	 xmm0, xmm1
  01230	48 8b 44 24 50	 mov	 rax, QWORD PTR othData$35[rsp]
  01235	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0
$LN10@AABBsOverl:
  0123a	48 8b 44 24 50	 mov	 rax, QWORD PTR othData$35[rsp]
  0123f	c6 40 01 01	 mov	 BYTE PTR [rax+1], 1
  01243	c6 05 00 00 00
	00 01		 mov	 BYTE PTR shouldDraw, 1
$update_aabb$245:

; 85   : 	update_aabb:
; 86   : 		updateAABB2(curTrueAABB, collider, temp, colData);

  0124a	48 8b 84 24 c0
	05 00 00	 mov	 rax, QWORD PTR collider$[rsp]
  01252	48 83 c0 3c	 add	 rax, 60			; 0000003cH
  01256	48 89 05 00 00
	00 00		 mov	 QWORD PTR curTrueAABB, rax
  0125d	48 8b 84 24 c0
	05 00 00	 mov	 rax, QWORD PTR collider$[rsp]
  01265	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  01269	48 89 05 00 00
	00 00		 mov	 QWORD PTR curAABB, rax
  01270	48 8b 44 24 48	 mov	 rax, QWORD PTR colData$34[rsp]
  01275	48 89 05 00 00
	00 00		 mov	 QWORD PTR curColTransform, rax
  0127c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAABB
  01283	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curColTransform
  0128a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  0128e	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [rcx+4]
  01293	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curColTransform
  0129a	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [rax+12]
  0129f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTrueAABB
  012a6	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  012aa	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAABB
  012b1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curColTransform
  012b8	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  012bd	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [rcx+8]
  012c2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curColTransform
  012c9	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [rax+16]
  012ce	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTrueAABB
  012d5	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  012da	b8 08 00 00 00	 mov	 eax, 8
  012df	48 6b c0 01	 imul	 rax, rax, 1
  012e3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curAABB
  012ea	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curColTransform
  012f1	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [rcx+rax]
  012f6	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [rdx+4]
  012fb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curColTransform
  01302	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [rax+12]
  01307	b8 08 00 00 00	 mov	 eax, 8
  0130c	48 6b c0 01	 imul	 rax, rax, 1
  01310	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  01317	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0
  0131c	b8 08 00 00 00	 mov	 eax, 8
  01321	48 6b c0 01	 imul	 rax, rax, 1
  01325	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curAABB
  0132c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curColTransform
  01333	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [rcx+rax+4]
  01339	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [rdx+8]
  0133e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curColTransform
  01345	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [rax+16]
  0134a	b8 08 00 00 00	 mov	 eax, 8
  0134f	48 6b c0 01	 imul	 rax, rax, 1
  01353	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  0135a	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0
  01360	b8 08 00 00 00	 mov	 eax, 8
  01365	48 6b c0 01	 imul	 rax, rax, 1
  01369	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  01370	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curTrueAABB
  01377	f3 0f 10 01	 movss	 xmm0, DWORD PTR [rcx]
  0137b	0f 2f 04 02	 comiss	 xmm0, DWORD PTR [rdx+rax]
  0137f	76 52		 jbe	 SHORT $LN11@AABBsOverl
  01381	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTrueAABB
  01388	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  0138c	f3 0f 11 84 24
	e4 00 00 00	 movss	 DWORD PTR temp$51[rsp], xmm0
  01395	b8 08 00 00 00	 mov	 eax, 8
  0139a	48 6b c0 01	 imul	 rax, rax, 1
  0139e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  013a5	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curTrueAABB
  013ac	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [rdx+rax]
  013b1	f3 0f 11 01	 movss	 DWORD PTR [rcx], xmm0
  013b5	b8 08 00 00 00	 mov	 eax, 8
  013ba	48 6b c0 01	 imul	 rax, rax, 1
  013be	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  013c5	f3 0f 10 84 24
	e4 00 00 00	 movss	 xmm0, DWORD PTR temp$51[rsp]
  013ce	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0
$LN11@AABBsOverl:
  013d3	b8 08 00 00 00	 mov	 eax, 8
  013d8	48 6b c0 01	 imul	 rax, rax, 1
  013dc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  013e3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curTrueAABB
  013ea	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [rcx+4]
  013ef	0f 2f 44 02 04	 comiss	 xmm0, DWORD PTR [rdx+rax+4]
  013f4	76 56		 jbe	 SHORT $LN12@AABBsOverl
  013f6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTrueAABB
  013fd	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  01402	f3 0f 11 84 24
	e4 00 00 00	 movss	 DWORD PTR temp$51[rsp], xmm0
  0140b	b8 08 00 00 00	 mov	 eax, 8
  01410	48 6b c0 01	 imul	 rax, rax, 1
  01414	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  0141b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curTrueAABB
  01422	f3 0f 10 44 02
	04		 movss	 xmm0, DWORD PTR [rdx+rax+4]
  01428	f3 0f 11 41 04	 movss	 DWORD PTR [rcx+4], xmm0
  0142d	b8 08 00 00 00	 mov	 eax, 8
  01432	48 6b c0 01	 imul	 rax, rax, 1
  01436	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  0143d	f3 0f 10 84 24
	e4 00 00 00	 movss	 xmm0, DWORD PTR temp$51[rsp]
  01446	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0
$LN12@AABBsOverl:

; 87   : 		updateAABB2(curTrueAABB, other, temp2, othData);

  0144c	48 8b 84 24 c8
	05 00 00	 mov	 rax, QWORD PTR other$[rsp]
  01454	48 83 c0 3c	 add	 rax, 60			; 0000003cH
  01458	48 89 05 00 00
	00 00		 mov	 QWORD PTR curTrueAABB, rax
  0145f	48 8b 84 24 c8
	05 00 00	 mov	 rax, QWORD PTR other$[rsp]
  01467	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  0146b	48 89 05 00 00
	00 00		 mov	 QWORD PTR curAABB, rax
  01472	48 8b 44 24 50	 mov	 rax, QWORD PTR othData$35[rsp]
  01477	48 89 05 00 00
	00 00		 mov	 QWORD PTR curColTransform, rax
  0147e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAABB
  01485	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curColTransform
  0148c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  01490	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [rcx+4]
  01495	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curColTransform
  0149c	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [rax+12]
  014a1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTrueAABB
  014a8	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  014ac	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAABB
  014b3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curColTransform
  014ba	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  014bf	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [rcx+8]
  014c4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curColTransform
  014cb	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [rax+16]
  014d0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTrueAABB
  014d7	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  014dc	b8 08 00 00 00	 mov	 eax, 8
  014e1	48 6b c0 01	 imul	 rax, rax, 1
  014e5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curAABB
  014ec	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curColTransform
  014f3	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [rcx+rax]
  014f8	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [rdx+4]
  014fd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curColTransform
  01504	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [rax+12]
  01509	b8 08 00 00 00	 mov	 eax, 8
  0150e	48 6b c0 01	 imul	 rax, rax, 1
  01512	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  01519	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0
  0151e	b8 08 00 00 00	 mov	 eax, 8
  01523	48 6b c0 01	 imul	 rax, rax, 1
  01527	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curAABB
  0152e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curColTransform
  01535	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [rcx+rax+4]
  0153b	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [rdx+8]
  01540	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curColTransform
  01547	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [rax+16]
  0154c	b8 08 00 00 00	 mov	 eax, 8
  01551	48 6b c0 01	 imul	 rax, rax, 1
  01555	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  0155c	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0
  01562	b8 08 00 00 00	 mov	 eax, 8
  01567	48 6b c0 01	 imul	 rax, rax, 1
  0156b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  01572	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curTrueAABB
  01579	f3 0f 10 01	 movss	 xmm0, DWORD PTR [rcx]
  0157d	0f 2f 04 02	 comiss	 xmm0, DWORD PTR [rdx+rax]
  01581	76 52		 jbe	 SHORT $LN13@AABBsOverl
  01583	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTrueAABB
  0158a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  0158e	f3 0f 11 84 24
	e8 00 00 00	 movss	 DWORD PTR temp2$52[rsp], xmm0
  01597	b8 08 00 00 00	 mov	 eax, 8
  0159c	48 6b c0 01	 imul	 rax, rax, 1
  015a0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  015a7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curTrueAABB
  015ae	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [rdx+rax]
  015b3	f3 0f 11 01	 movss	 DWORD PTR [rcx], xmm0
  015b7	b8 08 00 00 00	 mov	 eax, 8
  015bc	48 6b c0 01	 imul	 rax, rax, 1
  015c0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  015c7	f3 0f 10 84 24
	e8 00 00 00	 movss	 xmm0, DWORD PTR temp2$52[rsp]
  015d0	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0
$LN13@AABBsOverl:
  015d5	b8 08 00 00 00	 mov	 eax, 8
  015da	48 6b c0 01	 imul	 rax, rax, 1
  015de	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  015e5	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curTrueAABB
  015ec	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [rcx+4]
  015f1	0f 2f 44 02 04	 comiss	 xmm0, DWORD PTR [rdx+rax+4]
  015f6	76 56		 jbe	 SHORT $LN14@AABBsOverl
  015f8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTrueAABB
  015ff	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  01604	f3 0f 11 84 24
	e8 00 00 00	 movss	 DWORD PTR temp2$52[rsp], xmm0
  0160d	b8 08 00 00 00	 mov	 eax, 8
  01612	48 6b c0 01	 imul	 rax, rax, 1
  01616	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  0161d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curTrueAABB
  01624	f3 0f 10 44 02
	04		 movss	 xmm0, DWORD PTR [rdx+rax+4]
  0162a	f3 0f 11 41 04	 movss	 DWORD PTR [rcx+4], xmm0
  0162f	b8 08 00 00 00	 mov	 eax, 8
  01634	48 6b c0 01	 imul	 rax, rax, 1
  01638	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  0163f	f3 0f 10 84 24
	e8 00 00 00	 movss	 xmm0, DWORD PTR temp2$52[rsp]
  01648	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0
$LN14@AABBsOverl:
$collision_event$244:

; 88   : 		//semi-colon because of declaration beneath. i know this bool is always declared, but the compiler doesn't. (which kinda defeats the purpose of it throwing an error when i don't have the semi-colon there in the first place, since i could still not initialize the decleration.)
; 89   : 	collision_event:;
; 90   : 		const bool colEnemy = collider->tag == enemyTag;

  0164e	48 8b 84 24 c0
	05 00 00	 mov	 rax, QWORD PTR collider$[rsp]
  01656	83 78 24 02	 cmp	 DWORD PTR [rax+36], 2
  0165a	75 0d		 jne	 SHORT $LN101@AABBsOverl
  0165c	c7 84 24 88 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv682[rsp], 1
  01667	eb 0b		 jmp	 SHORT $LN102@AABBsOverl
$LN101@AABBsOverl:
  01669	c7 84 24 88 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv682[rsp], 0
$LN102@AABBsOverl:
  01674	83 bc 24 88 05
	00 00 00	 cmp	 DWORD PTR tv682[rsp], 0
  0167c	75 0d		 jne	 SHORT $LN103@AABBsOverl
  0167e	c7 84 24 8c 05
	00 00 00 00 00
	00		 mov	 DWORD PTR tv684[rsp], 0
  01689	eb 0b		 jmp	 SHORT $LN104@AABBsOverl
$LN103@AABBsOverl:
  0168b	c7 84 24 8c 05
	00 00 01 00 00
	00		 mov	 DWORD PTR tv684[rsp], 1
$LN104@AABBsOverl:
  01696	0f b6 84 24 8c
	05 00 00	 movzx	 eax, BYTE PTR tv684[rsp]
  0169e	88 84 24 ec 00
	00 00		 mov	 BYTE PTR colEnemy$53[rsp], al

; 91   : 		if (IsTag(playerTag)) {

  016a5	48 8b 84 24 c0
	05 00 00	 mov	 rax, QWORD PTR collider$[rsp]
  016ad	83 78 24 01	 cmp	 DWORD PTR [rax+36], 1
  016b1	74 12		 je	 SHORT $LN16@AABBsOverl
  016b3	48 8b 84 24 c8
	05 00 00	 mov	 rax, QWORD PTR other$[rsp]
  016bb	83 78 24 01	 cmp	 DWORD PTR [rax+36], 1
  016bf	0f 85 ff 00 00
	00		 jne	 $LN15@AABBsOverl
$LN16@AABBsOverl:

; 92   : 			if (IsTag(enemyTag)) {

  016c5	48 8b 84 24 c0
	05 00 00	 mov	 rax, QWORD PTR collider$[rsp]
  016cd	83 78 24 02	 cmp	 DWORD PTR [rax+36], 2
  016d1	74 12		 je	 SHORT $LN18@AABBsOverl
  016d3	48 8b 84 24 c8
	05 00 00	 mov	 rax, QWORD PTR other$[rsp]
  016db	83 78 24 02	 cmp	 DWORD PTR [rax+36], 2
  016df	0f 85 a4 00 00
	00		 jne	 $LN17@AABBsOverl
$LN18@AABBsOverl:

; 93   : 				uint monkIndex;
; 94   : 				FindMonkInd();

  016e5	0f b6 84 24 ec
	00 00 00	 movzx	 eax, BYTE PTR colEnemy$53[rsp]
  016ed	85 c0		 test	 eax, eax
  016ef	75 0e		 jne	 SHORT $LN105@AABBsOverl
  016f1	48 c7 84 24 90
	05 00 00 01 00
	00 00		 mov	 QWORD PTR tv699[rsp], 1
  016fd	eb 0c		 jmp	 SHORT $LN106@AABBsOverl
$LN105@AABBsOverl:
  016ff	48 c7 84 24 90
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv699[rsp], 0
$LN106@AABBsOverl:
  0170b	0f b6 84 24 ec
	00 00 00	 movzx	 eax, BYTE PTR colEnemy$53[rsp]
  01713	48 8b 8c 24 c0
	05 00 00	 mov	 rcx, QWORD PTR collider$[rsp]
  0171b	48 0f af c8	 imul	 rcx, rax
  0171f	48 8b c1	 mov	 rax, rcx
  01722	48 8b 8c 24 c8
	05 00 00	 mov	 rcx, QWORD PTR other$[rsp]
  0172a	48 0f af 8c 24
	90 05 00 00	 imul	 rcx, QWORD PTR tv699[rsp]
  01733	48 03 c1	 add	 rax, rcx
  01736	48 8b c8	 mov	 rcx, rax
  01739	e8 00 00 00 00	 call	 GetUintVal2
  0173e	89 84 24 f0 00
	00 00		 mov	 DWORD PTR monkIndex$54[rsp], eax

; 95   : 				float damage = enemyDamage[monkIndex];

  01745	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR monkIndex$54[rsp]
  0174c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyDamage
  01753	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  01758	f3 0f 11 84 24
	f4 00 00 00	 movss	 DWORD PTR damage$55[rsp], xmm0

; 96   : 				if (damage) TakePlrDmg(damage, impactDmg);

  01761	f3 0f 10 84 24
	f4 00 00 00	 movss	 xmm0, DWORD PTR damage$55[rsp]
  0176a	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  01771	7a 02		 jp	 SHORT $LN238@AABBsOverl
  01773	74 14		 je	 SHORT $LN19@AABBsOverl
$LN238@AABBsOverl:
  01775	ba 01 00 00 00	 mov	 edx, 1
  0177a	f3 0f 10 84 24
	f4 00 00 00	 movss	 xmm0, DWORD PTR damage$55[rsp]
  01783	e8 00 00 00 00	 call	 TakePlrDmg
  01788	90		 npad	 1
$LN19@AABBsOverl:
$LN17@AABBsOverl:

; 97   : 			}
; 98   : 			if (IsTag(groundTag) && !normalIsX && normal.y > .0f) {

  01789	48 8b 84 24 c0
	05 00 00	 mov	 rax, QWORD PTR collider$[rsp]
  01791	83 78 24 03	 cmp	 DWORD PTR [rax+36], 3
  01795	74 0e		 je	 SHORT $LN21@AABBsOverl
  01797	48 8b 84 24 c8
	05 00 00	 mov	 rax, QWORD PTR other$[rsp]
  0179f	83 78 24 03	 cmp	 DWORD PTR [rax+36], 3
  017a3	75 1f		 jne	 SHORT $LN20@AABBsOverl
$LN21@AABBsOverl:
  017a5	0f b6 44 24 28	 movzx	 eax, BYTE PTR normalIsX$[rsp]
  017aa	85 c0		 test	 eax, eax
  017ac	75 16		 jne	 SHORT $LN20@AABBsOverl
  017ae	f3 0f 10 44 24
	3c		 movss	 xmm0, DWORD PTR normal$[rsp+4]
  017b4	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  017bb	76 07		 jbe	 SHORT $LN20@AABBsOverl

; 99   : 				plrGrounded = true;

  017bd	c6 05 00 00 00
	00 01		 mov	 BYTE PTR plrGrounded, 1
$LN20@AABBsOverl:
$LN15@AABBsOverl:

; 100  : 			}
; 101  : 		}
; 102  : 		if (IsTag(playerAttackTag) && (colEnemy || other->tag == enemyTag)) {

  017c4	48 8b 84 24 c0
	05 00 00	 mov	 rax, QWORD PTR collider$[rsp]
  017cc	83 78 24 04	 cmp	 DWORD PTR [rax+36], 4
  017d0	74 12		 je	 SHORT $LN23@AABBsOverl
  017d2	48 8b 84 24 c8
	05 00 00	 mov	 rax, QWORD PTR other$[rsp]
  017da	83 78 24 04	 cmp	 DWORD PTR [rax+36], 4
  017de	0f 85 0f 01 00
	00		 jne	 $LN22@AABBsOverl
$LN23@AABBsOverl:
  017e4	0f b6 84 24 ec
	00 00 00	 movzx	 eax, BYTE PTR colEnemy$53[rsp]
  017ec	85 c0		 test	 eax, eax
  017ee	75 12		 jne	 SHORT $LN24@AABBsOverl
  017f0	48 8b 84 24 c8
	05 00 00	 mov	 rax, QWORD PTR other$[rsp]
  017f8	83 78 24 02	 cmp	 DWORD PTR [rax+36], 2
  017fc	0f 85 f1 00 00
	00		 jne	 $LN22@AABBsOverl
$LN24@AABBsOverl:

; 103  : 			//printf("%u\n", monkIndices[((uintptr_t)collider * colEnemy + (uintptr_t)other * othEnemy) % noOfEnemies]);
; 104  : 			uint monkIndex;
; 105  : 			FindMonkInd();

  01802	0f b6 84 24 ec
	00 00 00	 movzx	 eax, BYTE PTR colEnemy$53[rsp]
  0180a	85 c0		 test	 eax, eax
  0180c	75 0e		 jne	 SHORT $LN107@AABBsOverl
  0180e	48 c7 84 24 98
	05 00 00 01 00
	00 00		 mov	 QWORD PTR tv729[rsp], 1
  0181a	eb 0c		 jmp	 SHORT $LN108@AABBsOverl
$LN107@AABBsOverl:
  0181c	48 c7 84 24 98
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv729[rsp], 0
$LN108@AABBsOverl:
  01828	0f b6 84 24 ec
	00 00 00	 movzx	 eax, BYTE PTR colEnemy$53[rsp]
  01830	48 8b 8c 24 c0
	05 00 00	 mov	 rcx, QWORD PTR collider$[rsp]
  01838	48 0f af c8	 imul	 rcx, rax
  0183c	48 8b c1	 mov	 rax, rcx
  0183f	48 8b 8c 24 c8
	05 00 00	 mov	 rcx, QWORD PTR other$[rsp]
  01847	48 0f af 8c 24
	98 05 00 00	 imul	 rcx, QWORD PTR tv729[rsp]
  01850	48 03 c1	 add	 rax, rcx
  01853	48 8b c8	 mov	 rcx, rax
  01856	e8 00 00 00 00	 call	 GetUintVal2
  0185b	89 84 24 f8 00
	00 00		 mov	 DWORD PTR monkIndex$56[rsp], eax

; 106  : 			if (!monkTakenDmg[monkIndex]) {

  01862	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR monkIndex$56[rsp]
  01869	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR monkTakenDmg
  01870	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01874	85 c0		 test	 eax, eax
  01876	75 7b		 jne	 SHORT $LN25@AABBsOverl

; 107  : 				Slider *slider = &enemyHBs[monkIndex].barSlider;

  01878	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR monkIndex$56[rsp]
  0187f	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  01883	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyHBs
  0188a	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  0188f	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR slider$57[rsp], rax

; 108  : 				TakeSliderVal(*slider, plrDmg);

  01897	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR slider$57[rsp]
  0189f	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [rax+8]
  018a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR plrDmg
  018ac	e8 00 00 00 00	 call	 FMin
  018b1	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR slider$57[rsp]
  018b9	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [rax+8]
  018be	f3 0f 5c c8	 subss	 xmm1, xmm0
  018c2	0f 28 c1	 movaps	 xmm0, xmm1
  018c5	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR slider$57[rsp]
  018cd	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0
  018d2	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR slider$57[rsp]
  018da	48 8b 00	 mov	 rax, QWORD PTR [rax]
  018dd	c6 40 14 01	 mov	 BYTE PTR [rax+20], 1

; 109  : 				monkTakenDmg[monkIndex] = true;

  018e1	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR monkIndex$56[rsp]
  018e8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR monkTakenDmg
  018ef	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1
$LN25@AABBsOverl:
$LN22@AABBsOverl:

; 110  : 			}
; 111  : 		}
; 112  : 		return _this;//the collision event will occur 20 times per frame unless coded otherwise, due to the re-iteration behaviour of the verlet intergration collision solver.

  018f3	0f b6 44 24 44	 movzx	 eax, BYTE PTR _this$33[rsp]
  018f8	eb 02		 jmp	 SHORT $LN1@AABBsOverl
$LN2@AABBsOverl:

; 113  : 	}
; 114  : 	return false;

  018fa	32 c0		 xor	 al, al
$LN1@AABBsOverl:

; 115  : }

  018fc	48 8b f8	 mov	 rdi, rax
  018ff	48 8b cc	 mov	 rcx, rsp
  01902	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AABBsOverlap$rtcFrameData
  01909	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0190e	48 8b c7	 mov	 rax, rdi
  01911	48 8b 8c 24 a0
	05 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  01919	48 33 cc	 xor	 rcx, rsp
  0191c	e8 00 00 00 00	 call	 __security_check_cookie
  01921	48 81 c4 b0 05
	00 00		 add	 rsp, 1456		; 000005b0H
  01928	5f		 pop	 rdi
  01929	c3		 ret	 0
AABBsOverlap ENDP
_TEXT	ENDS
END
