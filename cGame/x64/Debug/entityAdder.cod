; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35211.0 

include listing.inc

INCLUDELIB OLDNAMES

; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35211.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?cells@@3PAY0EAA@PEAU_Entity@@A			; cells
PUBLIC	?upVector@@3UVector2@@B				; upVector
PUBLIC	?cTime@@3T_LARGE_INTEGER@@A			; cTime
PUBLIC	?mainColHead@@3PEAU_Entity@@EA			; mainColHead
PUBLIC	?rightVector@@3UVector2@@B			; rightVector
PUBLIC	?query@@3IA					; query
PUBLIC	?leftVector@@3UVector2@@B			; leftVector
PUBLIC	?downVector@@3UVector2@@B			; downVector
?cells@@3PAY0EAA@PEAU_Entity@@A DQ 0100000H DUP (?)	; cells
?cTime@@3T_LARGE_INTEGER@@A DQ 01H DUP (?)		; cTime
?mainColHead@@3PEAU_Entity@@EA DQ 01H DUP (?)		; mainColHead
?query@@3IA DD	01H DUP (?)				; query
_BSS	ENDS
__8C83BECC_concurrencysal@h DB 01H
__608E3340_sal@h DB 01H
__FB67E29A_vadefs@h DB 01H
__1D1B619C_vcruntime@h DB 01H
__735960E1_corecrt@h DB 01H
__211DB995_corecrt_malloc@h DB 01H
__4C2AD0C7_winpackagefamily@h DB 01H
__9DED9ED1_winapifamily@h DB 01H
__12FEDF4E_sdkddkver@h DB 01H
__9BAEE128_excpt@h DB 01H
__B7B53233_stdarg@h DB 01H
__6B04FCB3_specstrings_undef@h DB 01H
__F4027AF7_specstrings_strict@h DB 01H
__B90340D4_sdv_driverspecs@h DB 01H
__BFFF5AD3_driverspecs@h DB 01H
__32847078_specstrings@h DB 01H
__108B2620_corecrt_wctype@h DB 01H
__6CD6613D_ctype@h DB 01H
__30902A1F_kernelspecs@h DB 01H
__376FD5CA_basetsd@h DB 01H
__13DE2371_errno@h DB 01H
__8C6AE390_vcruntime_string@h DB 01H
__8ACB2152_corecrt_memcpy_s@h DB 01H
__EA6C9D17_corecrt_memory@h DB 01H
__0DF2AF52_corecrt_wstring@h DB 01H
__6E889ECC_string@h DB 01H
__9BEDF4DE_guiddef@h DB 01H
__51BFD2FE_pshpack4@h DB 01H
__31652CEA_poppack@h DB 01H
__5532AE4C_pshpack2@h DB 01H
__58A52B9A_pshpack8@h DB 01H
__57741015_pshpack1@h DB 01H
__CDE68C90_apiset@h DB 01H
__0BF06E8D_ktmtypes@h DB 01H
__40C200C0_winnt@h DB 01H
__9336F789_minwindef@h DB 01H
__55136115_windef@h DB 01H
__32205BF0_apisetcconv@h DB 01H
__B48FDEA0_minwinbase@h DB 01H
__3551B028_apiquery2@h DB 01H
__65BE04AA_processenv@h DB 01H
__4767CA46_fileapi@h DB 01H
__282E6C4B_fileapifromapp@h DB 01H
__393AF12C_debugapi@h DB 01H
__EBC502B8_utilapiset@h DB 01H
__1EAD8C69_handleapi@h DB 01H
__D8EF9B29_errhandlingapi@h DB 01H
__97FC1204_fibersapi@h DB 01H
__27448220_namedpipeapi@h DB 01H
__6EA33B2A_profileapi@h DB 01H
__EAC6F673_heapapi@h DB 01H
__D64EEA5A_ioapiset@h DB 01H
__144BD4B6_synchapi@h DB 01H
__03B1C640_interlockedapi@h DB 01H
__DC64CB38_processthreadsapi@h DB 01H
__D719B518_sysinfoapi@h DB 01H
__410385B1_memoryapi@h DB 01H
__C1AD45EF_enclaveapi@h DB 01H
__F4C3AA32_threadpoollegacyapiset@h DB 01H
__AC5A7A9F_threadpoolapiset@h DB 01H
__F5254B21_jobapi@h DB 01H
__BCEA6EE8_jobapi2@h DB 01H
__D18ACE72_wow64apiset@h DB 01H
__669B0D4A_libloaderapi@h DB 01H
__645F7034_securitybaseapi@h DB 01H
__67E58557_namespaceapi@h DB 01H
__599D9D3A_systemtopologyapi@h DB 01H
__2337E373_processtopologyapi@h DB 01H
__02BFF239_securityappcontainer@h DB 01H
__9C196272_realtimeapiset@h DB 01H
__5AB313A4_winerror@h DB 01H
__B7E7187B_timezoneapi@h DB 01H
__6DE9EB6F_winbase@h DB 01H
__56B2AFF2_wingdi@h DB 01H
__BA1161A9_tvout@h DB 01H
__0501A018_winuser@h DB 01H
__EF12FA99_datetimeapi@h DB 01H
__8FA7C3CA_winnls@h DB 01H
__390F0C47_stringapiset@h DB 01H
__28605B0A_wincontypes@h DB 01H
__BFBDE86D_consoleapi@h DB 01H
__C3CAFBF0_consoleapi2@h DB 01H
__C20891C7_consoleapi3@h DB 01H
__717C98B6_wincon@h DB 01H
__2884C177_verrsrc@h DB 01H
__A3FD3A34_winver@h DB 01H
__6F8AD9F1_reason@h DB 01H
__4C90FD6F_winreg@h DB 01H
__68AFEBAD_wnnc@h DB 01H
__5A7AB086_winnetwk@h DB 01H
__859C3CD3_cderr@h DB 01H
__81B12F1A_dde@h DB 01H
__DD3AF97A_ddeml@h DB 01H
__E6B47715_dlgs@h DB 01H
__944BD57D_lzexpand@h DB 01H
__E4B2DFC7_mmsyscom@h DB 01H
__5287D88F_mciapi@h DB 01H
__DBDC1384_mmiscapi@h DB 01H
__1A78C0D7_mmiscapi2@h DB 01H
__0D05975C_playsoundapi@h DB 01H
__757A63A9_mmeapi@h DB 01H
__6326AB05_timeapi@h DB 01H
__77D483B2_joystickapi@h DB 01H
__59CF7431_mmsystem@h DB 01H
__CEAC417E_nb30@h DB 01H
__3BA1A118_rpcdcep@h DB 01H
__74064437_rpcdce@h DB 01H
__90546602_rpcnsi@h DB 01H
__83114A2C_rpcnterr@h DB 01H
__CA67519E_rpcasync@h DB 01H
__D8CEBCD8_rpc@h DB 01H
__9F43AC2D_shellapi@h DB 01H
__6C8D3703_winperf@h DB 01H
__AB40A29E_inaddr@h DB 01H
__40D4FEA5_winsock@h DB 01H
__51394074_bcrypt@h DB 01H
__F177C154_ncrypt@h DB 01H
__1445529E_dpapi@h DB 01H
__5743FB20_wincrypt@h DB 01H
__97CA12BF_winefs@h DB 01H
__6DF63719_rpcnsip@h DB 01H
__031EFCA1_rpcsal@h DB 01H
__BA08D1DA_rpcndr@h DB 01H
__3A941F83_wtypesbase@h DB 01H
__C244FEE1_wtypes@h DB 01H
__FB7C5F97_winioctl@h DB 01H
__4B65E4AC_winsmcrd@h DB 01H
__1EA80168_winscard@h DB 01H
__516FC0F9_prsht@h DB 01H
__88BA11C6_winspool@h DB 01H
__955456CD_stddef@h DB 01H
__99AED4FB_corecrt_search@h DB 01H
__8B813BF6_corecrt_wstdlib@h DB 01H
__3D1CA2C3_limits@h DB 01H
__E8FB0A68_stdlib@h DB 01H
__18DB4C56_unknwnbase@h DB 01H
__1AE6FA1A_objidlbase@h DB 01H
__7F98E437_cguid@h DB 01H
__6B2DFB49_combaseapi@h DB 01H
__CB0E8B37_unknwn@h DB 01H
__D981EF0A_objidl@h DB 01H
__37089EB8_oaidl@h DB 01H
__CA2DDD8B_propidlbase@h DB 01H
__39ED323E_coml2api@h DB 01H
__78E82682_oleidl@h DB 01H
__97883CFE_servprov@h DB 01H
__CE01DDB9_msxml@h DB 01H
__A4784895_urlmon@h DB 01H
__325F1C97_propidl@h DB 01H
__D3D43343_objbase@h DB 01H
__B3A2AF1B_oleauto@h DB 01H
__5722A8AA_ole2@h DB 01H
__590A450A_commdlg@h DB 01H
__2FE8A10C_stralign@h DB 01H
__34558472_winsvc@h DB 01H
__058845F1_mcx@h DB 01H
__7F16006B_ime_cmodes@h DB 01H
__0A3AF599_imm@h DB 01H
__11B87C25_Windows@h DB 01H
__0B1C67B3_gl@h DB 01H
__D7C03EE9_glu@h DB 01H
__13490EC2_glew@h DB 01H
__F2638511_stdbool@h DB 01H
__836A8CFC_stdint@h DB 01H
__129F966A_glfw3@h DB 01H
__1D9A7FA2_corecrt_math@h DB 01H
__2E93F1C0_math@h DB 01H
__0A8909AB_vectors@h DB 01H
__60B45B40_corecrt_stdio_config@h DB 01H
__CFA3741E_corecrt_wstdio@h DB 01H
__B3FE3303_stdio@h DB 01H
__E0493894_main@h DB 01H
__5CFF7615_Debug@h DB 01H
__565DCB0D_animations@h DB 01H
__D929D131_Physics@h DB 01H
__294C502B_Mesh@h DB 01H
__D1DC2946_EntityManager@h DB 01H
__863E315E_entityAdder@h DB 01H
__46B7CB64_math@h DB 01H
__1F46D782_scene 1@h DB 01H
__11ECE8D6_entityAdder@c DB 01H
__8C83BECC_concurrencysal@h DB 01H
__608E3340_sal@h DB 01H
__FB67E29A_vadefs@h DB 01H
__1D1B619C_vcruntime@h DB 01H
__735960E1_corecrt@h DB 01H
__211DB995_corecrt_malloc@h DB 01H
__4C2AD0C7_winpackagefamily@h DB 01H
__9DED9ED1_winapifamily@h DB 01H
__12FEDF4E_sdkddkver@h DB 01H
__9BAEE128_excpt@h DB 01H
__B7B53233_stdarg@h DB 01H
__6B04FCB3_specstrings_undef@h DB 01H
__F4027AF7_specstrings_strict@h DB 01H
__B90340D4_sdv_driverspecs@h DB 01H
__BFFF5AD3_driverspecs@h DB 01H
__32847078_specstrings@h DB 01H
__108B2620_corecrt_wctype@h DB 01H
__6CD6613D_ctype@h DB 01H
__30902A1F_kernelspecs@h DB 01H
__376FD5CA_basetsd@h DB 01H
__13DE2371_errno@h DB 01H
__8C6AE390_vcruntime_string@h DB 01H
__8ACB2152_corecrt_memcpy_s@h DB 01H
__EA6C9D17_corecrt_memory@h DB 01H
__0DF2AF52_corecrt_wstring@h DB 01H
__6E889ECC_string@h DB 01H
__9BEDF4DE_guiddef@h DB 01H
__51BFD2FE_pshpack4@h DB 01H
__31652CEA_poppack@h DB 01H
__5532AE4C_pshpack2@h DB 01H
__58A52B9A_pshpack8@h DB 01H
__57741015_pshpack1@h DB 01H
__CDE68C90_apiset@h DB 01H
__0BF06E8D_ktmtypes@h DB 01H
__40C200C0_winnt@h DB 01H
__9336F789_minwindef@h DB 01H
__55136115_windef@h DB 01H
__32205BF0_apisetcconv@h DB 01H
__B48FDEA0_minwinbase@h DB 01H
__3551B028_apiquery2@h DB 01H
__65BE04AA_processenv@h DB 01H
__4767CA46_fileapi@h DB 01H
__282E6C4B_fileapifromapp@h DB 01H
__393AF12C_debugapi@h DB 01H
__EBC502B8_utilapiset@h DB 01H
__1EAD8C69_handleapi@h DB 01H
__D8EF9B29_errhandlingapi@h DB 01H
__97FC1204_fibersapi@h DB 01H
__27448220_namedpipeapi@h DB 01H
__6EA33B2A_profileapi@h DB 01H
__EAC6F673_heapapi@h DB 01H
__D64EEA5A_ioapiset@h DB 01H
__144BD4B6_synchapi@h DB 01H
__03B1C640_interlockedapi@h DB 01H
__DC64CB38_processthreadsapi@h DB 01H
__D719B518_sysinfoapi@h DB 01H
__410385B1_memoryapi@h DB 01H
__C1AD45EF_enclaveapi@h DB 01H
__F4C3AA32_threadpoollegacyapiset@h DB 01H
__AC5A7A9F_threadpoolapiset@h DB 01H
__F5254B21_jobapi@h DB 01H
__BCEA6EE8_jobapi2@h DB 01H
__D18ACE72_wow64apiset@h DB 01H
__669B0D4A_libloaderapi@h DB 01H
__645F7034_securitybaseapi@h DB 01H
__67E58557_namespaceapi@h DB 01H
__599D9D3A_systemtopologyapi@h DB 01H
__2337E373_processtopologyapi@h DB 01H
__02BFF239_securityappcontainer@h DB 01H
__9C196272_realtimeapiset@h DB 01H
__5AB313A4_winerror@h DB 01H
__B7E7187B_timezoneapi@h DB 01H
__6DE9EB6F_winbase@h DB 01H
__56B2AFF2_wingdi@h DB 01H
__BA1161A9_tvout@h DB 01H
__0501A018_winuser@h DB 01H
__EF12FA99_datetimeapi@h DB 01H
__8FA7C3CA_winnls@h DB 01H
__390F0C47_stringapiset@h DB 01H
__28605B0A_wincontypes@h DB 01H
__BFBDE86D_consoleapi@h DB 01H
__C3CAFBF0_consoleapi2@h DB 01H
__C20891C7_consoleapi3@h DB 01H
__717C98B6_wincon@h DB 01H
__2884C177_verrsrc@h DB 01H
__A3FD3A34_winver@h DB 01H
__6F8AD9F1_reason@h DB 01H
__4C90FD6F_winreg@h DB 01H
__68AFEBAD_wnnc@h DB 01H
__5A7AB086_winnetwk@h DB 01H
__859C3CD3_cderr@h DB 01H
__81B12F1A_dde@h DB 01H
__DD3AF97A_ddeml@h DB 01H
__E6B47715_dlgs@h DB 01H
__944BD57D_lzexpand@h DB 01H
__E4B2DFC7_mmsyscom@h DB 01H
__5287D88F_mciapi@h DB 01H
__DBDC1384_mmiscapi@h DB 01H
__1A78C0D7_mmiscapi2@h DB 01H
__0D05975C_playsoundapi@h DB 01H
__757A63A9_mmeapi@h DB 01H
__6326AB05_timeapi@h DB 01H
__77D483B2_joystickapi@h DB 01H
__59CF7431_mmsystem@h DB 01H
__CEAC417E_nb30@h DB 01H
__3BA1A118_rpcdcep@h DB 01H
__74064437_rpcdce@h DB 01H
__90546602_rpcnsi@h DB 01H
__83114A2C_rpcnterr@h DB 01H
__CA67519E_rpcasync@h DB 01H
__D8CEBCD8_rpc@h DB 01H
__9F43AC2D_shellapi@h DB 01H
__6C8D3703_winperf@h DB 01H
__AB40A29E_inaddr@h DB 01H
__40D4FEA5_winsock@h DB 01H
__51394074_bcrypt@h DB 01H
__F177C154_ncrypt@h DB 01H
__1445529E_dpapi@h DB 01H
__5743FB20_wincrypt@h DB 01H
__97CA12BF_winefs@h DB 01H
__6DF63719_rpcnsip@h DB 01H
__031EFCA1_rpcsal@h DB 01H
__BA08D1DA_rpcndr@h DB 01H
__3A941F83_wtypesbase@h DB 01H
__C244FEE1_wtypes@h DB 01H
__FB7C5F97_winioctl@h DB 01H
__4B65E4AC_winsmcrd@h DB 01H
__1EA80168_winscard@h DB 01H
__516FC0F9_prsht@h DB 01H
__88BA11C6_winspool@h DB 01H
__955456CD_stddef@h DB 01H
__99AED4FB_corecrt_search@h DB 01H
__8B813BF6_corecrt_wstdlib@h DB 01H
__3D1CA2C3_limits@h DB 01H
__E8FB0A68_stdlib@h DB 01H
__18DB4C56_unknwnbase@h DB 01H
__1AE6FA1A_objidlbase@h DB 01H
__7F98E437_cguid@h DB 01H
__6B2DFB49_combaseapi@h DB 01H
__CB0E8B37_unknwn@h DB 01H
__D981EF0A_objidl@h DB 01H
__37089EB8_oaidl@h DB 01H
__CA2DDD8B_propidlbase@h DB 01H
__39ED323E_coml2api@h DB 01H
__78E82682_oleidl@h DB 01H
__97883CFE_servprov@h DB 01H
__CE01DDB9_msxml@h DB 01H
__A4784895_urlmon@h DB 01H
__325F1C97_propidl@h DB 01H
__D3D43343_objbase@h DB 01H
__B3A2AF1B_oleauto@h DB 01H
__5722A8AA_ole2@h DB 01H
__590A450A_commdlg@h DB 01H
__2FE8A10C_stralign@h DB 01H
__34558472_winsvc@h DB 01H
__058845F1_mcx@h DB 01H
__7F16006B_ime_cmodes@h DB 01H
__0A3AF599_imm@h DB 01H
__11B87C25_Windows@h DB 01H
__0B1C67B3_gl@h DB 01H
__D7C03EE9_glu@h DB 01H
__13490EC2_glew@h DB 01H
__F2638511_stdbool@h DB 01H
__836A8CFC_stdint@h DB 01H
__129F966A_glfw3@h DB 01H
__1D9A7FA2_corecrt_math@h DB 01H
__2E93F1C0_math@h DB 01H
__0A8909AB_vectors@h DB 01H
__60B45B40_corecrt_stdio_config@h DB 01H
__CFA3741E_corecrt_wstdio@h DB 01H
__B3FE3303_stdio@h DB 01H
__E0493894_main@h DB 01H
__5CFF7615_Debug@h DB 01H
__565DCB0D_animations@h DB 01H
__D929D131_Physics@h DB 01H
__294C502B_Mesh@h DB 01H
__D1DC2946_EntityManager@h DB 01H
__863E315E_entityAdder@h DB 01H
PUBLIC	CreateCollider3
PUBLIC	CreateColAndSetPts
PUBLIC	CreateCollider
PUBLIC	SubscribeSquishable
PUBLIC	DeleteSquishable
PUBLIC	DeleteHealthbar
PUBLIC	InsertAtMainHead
PUBLIC	IMax
PUBLIC	RemoveSliderNode
PUBLIC	RemoveEntAppropriate
PUBLIC	SubscribeEntity_Without_Scale
PUBLIC	DeleteSlider
PUBLIC	DeleteEntity
PUBLIC	SubscribeSlider
PUBLIC	CreateCollider2
PUBLIC	SubscribeEntity
PUBLIC	DestroyCollider
pdata	SEGMENT
$pdata$CreateCollider3 DD imagerel $LN9
	DD	imagerel $LN9+556
	DD	imagerel $unwind$CreateCollider3
$pdata$CreateColAndSetPts DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$CreateColAndSetPts
$pdata$CreateCollider DD imagerel $LN7
	DD	imagerel $LN7+398
	DD	imagerel $unwind$CreateCollider
$pdata$SubscribeSquishable DD imagerel $LN4
	DD	imagerel $LN4+219
	DD	imagerel $unwind$SubscribeSquishable
$pdata$DeleteSquishable DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$DeleteSquishable
$pdata$DeleteHealthbar DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$DeleteHealthbar
$pdata$InsertAtMainHead DD imagerel $LN4
	DD	imagerel $LN4+100
	DD	imagerel $unwind$InsertAtMainHead
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IMax DD	imagerel $LN9
	DD	imagerel $LN9+145
	DD	imagerel $unwind$IMax
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$RemoveSliderNode DD imagerel $LN6
	DD	imagerel $LN6+140
	DD	imagerel $unwind$RemoveSliderNode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$RemoveEntAppropriate DD imagerel $LN6
	DD	imagerel $LN6+132
	DD	imagerel $unwind$RemoveEntAppropriate
pdata	ENDS
pdata	SEGMENT
$pdata$SubscribeEntity_Without_Scale DD imagerel $LN49
	DD	imagerel $LN49+1676
	DD	imagerel $unwind$SubscribeEntity_Without_Scale
$pdata$DeleteSlider DD imagerel $LN8
	DD	imagerel $LN8+66
	DD	imagerel $unwind$DeleteSlider
$pdata$DeleteEntity DD imagerel $LN12
	DD	imagerel $LN12+280
	DD	imagerel $unwind$DeleteEntity
$pdata$SubscribeSlider DD imagerel $LN4
	DD	imagerel $LN4+219
	DD	imagerel $unwind$SubscribeSlider
$pdata$CreateCollider2 DD imagerel $LN7
	DD	imagerel $LN7+437
	DD	imagerel $unwind$CreateCollider2
$pdata$SubscribeEntity DD imagerel $LN49
	DD	imagerel $LN49+1701
	DD	imagerel $unwind$SubscribeEntity
$pdata$DestroyCollider DD imagerel $LN8
	DD	imagerel $LN8+107
	DD	imagerel $unwind$DestroyCollider
;	COMDAT xdata
xdata	SEGMENT
$unwind$RemoveEntAppropriate DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RemoveSliderNode DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IMax DD	020d01H
	DD	07009520dH
xdata	ENDS
xdata	SEGMENT
$unwind$CreateCollider3 DD 043501H
	DD	02b011cH
	DD	060147015H
$unwind$CreateColAndSetPts DD 021301H
	DD	0700f3213H
$unwind$CreateCollider DD 042701H
	DD	01f010eH
	DD	060067007H
$unwind$SubscribeSquishable DD 020a01H
	DD	07006520aH
$unwind$DeleteSquishable DD 020a01H
	DD	07006320aH
$unwind$DeleteHealthbar DD 020a01H
	DD	07006320aH
$unwind$InsertAtMainHead DD 020a01H
	DD	07006320aH
$unwind$SubscribeEntity_Without_Scale DD 032601H
	DD	03c010dH
	DD	07006H
$unwind$DeleteSlider DD 020a01H
	DD	07006320aH
$unwind$DeleteEntity DD 020e01H
	DD	0700a520eH
$unwind$SubscribeSlider DD 020a01H
	DD	07006520aH
$unwind$CreateCollider2 DD 043001H
	DD	01f0117H
	DD	0600f7010H
$unwind$SubscribeEntity DD 032601H
	DD	03c010dH
	DD	07006H
$unwind$DestroyCollider DD 020a01H
	DD	07006320aH
CreateCollider3$rtcName$0 DB 06cH
	DB	068H
	DB	073H
	DB	00H
CreateCollider3$rtcName$1 DB 072H
	DB	068H
	DB	073H
	DB	00H
CreateCollider3$rtcName$2 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
CreateCollider3$rtcName$3 DB 061H
	DB	00H
	ORG $+2
CreateCollider3$rtcName$4 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
CreateCollider3$rtcName$5 DB 06cH
	DB	068H
	DB	073H
	DB	00H
CreateCollider3$rtcName$6 DB 072H
	DB	068H
	DB	073H
	DB	00H
CreateCollider3$rtcName$7 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+6
CreateCollider3$rtcVarDesc DD 0138H
	DD	08H
	DQ	FLAT:CreateCollider3$rtcName$7
	DD	0118H
	DD	08H
	DQ	FLAT:CreateCollider3$rtcName$6
	DD	0f8H
	DD	08H
	DQ	FLAT:CreateCollider3$rtcName$5
	DD	0d8H
	DD	08H
	DQ	FLAT:CreateCollider3$rtcName$4
	DD	0b8H
	DD	08H
	DQ	FLAT:CreateCollider3$rtcName$3
	DD	098H
	DD	08H
	DQ	FLAT:CreateCollider3$rtcName$2
	DD	078H
	DD	08H
	DQ	FLAT:CreateCollider3$rtcName$1
	DD	058H
	DD	08H
	DQ	FLAT:CreateCollider3$rtcName$0
	ORG $+384
CreateCollider3$rtcFrameData DD 08H
	DD	00H
	DQ	FLAT:CreateCollider3$rtcVarDesc
CreateCollider$rtcName$0 DB 061H
	DB	00H
	ORG $+2
CreateCollider$rtcName$1 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
CreateCollider$rtcName$2 DB 06cH
	DB	068H
	DB	073H
	DB	00H
CreateCollider$rtcName$3 DB 072H
	DB	068H
	DB	073H
	DB	00H
CreateCollider$rtcName$4 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+6
CreateCollider$rtcVarDesc DD 0d8H
	DD	08H
	DQ	FLAT:CreateCollider$rtcName$4
	DD	0b8H
	DD	08H
	DQ	FLAT:CreateCollider$rtcName$3
	DD	098H
	DD	08H
	DQ	FLAT:CreateCollider$rtcName$2
	DD	078H
	DD	08H
	DQ	FLAT:CreateCollider$rtcName$1
	DD	058H
	DD	08H
	DQ	FLAT:CreateCollider$rtcName$0
	ORG $+240
CreateCollider$rtcFrameData DD 05H
	DD	00H
	DQ	FLAT:CreateCollider$rtcVarDesc
SubscribeEntity_Without_Scale$rtcName$0 DB 062H
	DB	00H
	ORG $+2
SubscribeEntity_Without_Scale$rtcName$1 DB 061H
	DB	00H
	ORG $+2
SubscribeEntity_Without_Scale$rtcName$2 DB 062H
	DB	00H
	ORG $+2
SubscribeEntity_Without_Scale$rtcName$3 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
SubscribeEntity_Without_Scale$rtcName$4 DB 061H
	DB	00H
	ORG $+2
SubscribeEntity_Without_Scale$rtcName$5 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
SubscribeEntity_Without_Scale$rtcName$6 DB 06cH
	DB	068H
	DB	073H
	DB	00H
SubscribeEntity_Without_Scale$rtcName$7 DB 072H
	DB	068H
	DB	073H
	DB	00H
SubscribeEntity_Without_Scale$rtcName$8 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
SubscribeEntity_Without_Scale$rtcVarDesc DD 0198H
	DD	08H
	DQ	FLAT:SubscribeEntity_Without_Scale$rtcName$8
	DD	0178H
	DD	08H
	DQ	FLAT:SubscribeEntity_Without_Scale$rtcName$7
	DD	0158H
	DD	08H
	DQ	FLAT:SubscribeEntity_Without_Scale$rtcName$6
	DD	0138H
	DD	08H
	DQ	FLAT:SubscribeEntity_Without_Scale$rtcName$5
	DD	0118H
	DD	08H
	DQ	FLAT:SubscribeEntity_Without_Scale$rtcName$4
	DD	0f8H
	DD	08H
	DQ	FLAT:SubscribeEntity_Without_Scale$rtcName$3
	DD	0d8H
	DD	08H
	DQ	FLAT:SubscribeEntity_Without_Scale$rtcName$2
	DD	0b8H
	DD	08H
	DQ	FLAT:SubscribeEntity_Without_Scale$rtcName$1
	DD	098H
	DD	08H
	DQ	FLAT:SubscribeEntity_Without_Scale$rtcName$0
	ORG $+432
SubscribeEntity_Without_Scale$rtcFrameData DD 09H
	DD	00H
	DQ	FLAT:SubscribeEntity_Without_Scale$rtcVarDesc
CreateCollider2$rtcName$0 DB 061H
	DB	00H
	ORG $+2
CreateCollider2$rtcName$1 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
CreateCollider2$rtcName$2 DB 06cH
	DB	068H
	DB	073H
	DB	00H
CreateCollider2$rtcName$3 DB 072H
	DB	068H
	DB	073H
	DB	00H
CreateCollider2$rtcName$4 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+6
CreateCollider2$rtcVarDesc DD 0d8H
	DD	08H
	DQ	FLAT:CreateCollider2$rtcName$4
	DD	0b8H
	DD	08H
	DQ	FLAT:CreateCollider2$rtcName$3
	DD	098H
	DD	08H
	DQ	FLAT:CreateCollider2$rtcName$2
	DD	078H
	DD	08H
	DQ	FLAT:CreateCollider2$rtcName$1
	DD	058H
	DD	08H
	DQ	FLAT:CreateCollider2$rtcName$0
	ORG $+240
CreateCollider2$rtcFrameData DD 05H
	DD	00H
	DQ	FLAT:CreateCollider2$rtcVarDesc
SubscribeEntity$rtcName$0 DB 062H
	DB	00H
	ORG $+2
SubscribeEntity$rtcName$1 DB 061H
	DB	00H
	ORG $+2
SubscribeEntity$rtcName$2 DB 062H
	DB	00H
	ORG $+2
SubscribeEntity$rtcName$3 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
SubscribeEntity$rtcName$4 DB 061H
	DB	00H
	ORG $+2
SubscribeEntity$rtcName$5 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
SubscribeEntity$rtcName$6 DB 06cH
	DB	068H
	DB	073H
	DB	00H
SubscribeEntity$rtcName$7 DB 072H
	DB	068H
	DB	073H
	DB	00H
SubscribeEntity$rtcName$8 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
SubscribeEntity$rtcVarDesc DD 0198H
	DD	08H
	DQ	FLAT:SubscribeEntity$rtcName$8
	DD	0178H
	DD	08H
	DQ	FLAT:SubscribeEntity$rtcName$7
	DD	0158H
	DD	08H
	DQ	FLAT:SubscribeEntity$rtcName$6
	DD	0138H
	DD	08H
	DQ	FLAT:SubscribeEntity$rtcName$5
	DD	0118H
	DD	08H
	DQ	FLAT:SubscribeEntity$rtcName$4
	DD	0f8H
	DD	08H
	DQ	FLAT:SubscribeEntity$rtcName$3
	DD	0d8H
	DD	08H
	DQ	FLAT:SubscribeEntity$rtcName$2
	DD	0b8H
	DD	08H
	DQ	FLAT:SubscribeEntity$rtcName$1
	DD	098H
	DD	08H
	DQ	FLAT:SubscribeEntity$rtcName$0
	ORG $+432
SubscribeEntity$rtcFrameData DD 09H
	DD	00H
	DQ	FLAT:SubscribeEntity$rtcVarDesc
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
_TEXT	SEGMENT
col$ = 48
DestroyCollider PROC

; 150  : void DestroyCollider(entityNode** col) {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__460EF0CE_EntityManager@c
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 151  : 	DelEntNode(*col);

  00016	48 8b 44 24 30	 mov	 rax, QWORD PTR col$[rsp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00021	e8 00 00 00 00	 call	 RemoveEntAppropriate
  00026	48 8b 44 24 30	 mov	 rax, QWORD PTR col$[rsp]
  0002b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:entityHead
  0003e	48 8b 44 24 30	 mov	 rax, QWORD PTR col$[rsp]
  00043	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00046	e8 00 00 00 00	 call	 RemoveEntityNode
  0004b	48 8b 44 24 30	 mov	 rax, QWORD PTR col$[rsp]
  00050	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 152  : 	*col = NULL;

  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR col$[rsp]
  0005e	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 153  : }

  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
DestroyCollider ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
_TEXT	SEGMENT
this$ = 32
data$ = 40
size$12 = 48
size$13 = 52
$T14 = 56
$T15 = 60
$T16 = 64
$T17 = 68
$T18 = 72
$T19 = 80
$T20 = 88
$T21 = 96
$T22 = 100
lhs$ = 104
b$23 = 112
lhs$ = 120
b$24 = 128
a$ = 136
b$ = 152
a$ = 184
b$ = 216
_this$25 = 248
a$ = 280
_this$26 = 312
lhs$ = 344
rhs$ = 376
_this$27 = 408
tv199 = 420
tv205 = 424
tv211 = 428
tv217 = 432
tv164 = 436
tv256 = 440
tv264 = 444
tv178 = 448
tv268 = 452
tv274 = 456
tv187 = 464
add$ = 496
SubscribeEntity PROC

; 28   : entityNode* SubscribeEntity(Entity* add) {

$LN49:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec e0 01
	00 00		 sub	 rsp, 480		; 000001e0H
  0000d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00012	b9 70 00 00 00	 mov	 ecx, 112		; 00000070H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+496]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__460EF0CE_EntityManager@c
  0002d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 29   : 	entityNode* this = malloc(sizeof(entityNode));

  00032	b9 18 00 00 00	 mov	 ecx, 24
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0003d	48 89 44 24 20	 mov	 QWORD PTR this$[rsp], rax

; 30   : 	InsertAtMainHead(this);

  00042	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  00047	e8 00 00 00 00	 call	 InsertAtMainHead

; 31   : 	this->entity = add;

  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00051	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR add$[rsp]
  00059	48 89 08	 mov	 QWORD PTR [rax], rcx

; 32   : 	PhysicsData* data = add->physicsData;

  0005c	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR add$[rsp]
  00064	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00067	48 89 44 24 28	 mov	 QWORD PTR data$[rsp], rax

; 33   : 	checkGridScale(add);

  0006c	b8 08 00 00 00	 mov	 eax, 8
  00071	48 6b c0 01	 imul	 rax, rax, 1
  00075	b9 08 00 00 00	 mov	 ecx, 8
  0007a	48 6b c9 00	 imul	 rcx, rcx, 0
  0007e	48 8b 94 24 f0
	01 00 00	 mov	 rdx, QWORD PTR add$[rsp]
  00086	4c 8b 84 24 f0
	01 00 00	 mov	 r8, QWORD PTR add$[rsp]
  0008e	f3 0f 10 44 02
	2c		 movss	 xmm0, DWORD PTR [rdx+rax+44]
  00094	f3 41 0f 5c 44
	08 2c		 subss	 xmm0, DWORD PTR [r8+rcx+44]
  0009b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  000a3	f3 0f 11 44 24
	30		 movss	 DWORD PTR size$12[rsp], xmm0
  000a9	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR add$[rsp]
  000b1	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000b5	74 1c		 je	 SHORT $LN2@SubscribeE
  000b7	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR add$[rsp]
  000bf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c2	f3 0f 10 44 24
	30		 movss	 xmm0, DWORD PTR size$12[rsp]
  000c8	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [rax+4]
  000cd	f3 0f 11 44 24
	30		 movss	 DWORD PTR size$12[rsp], xmm0
$LN2@SubscribeE:
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h

; 19   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  000d3	f3 0f 10 44 24
	30		 movss	 xmm0, DWORD PTR size$12[rsp]
  000d9	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  000e0	72 0d		 jb	 SHORT $LN11@SubscribeE
  000e2	c7 84 24 a4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv199[rsp], 1
  000ed	eb 0b		 jmp	 SHORT $LN12@SubscribeE
$LN11@SubscribeE:
  000ef	c7 84 24 a4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv199[rsp], 0
$LN12@SubscribeE:
  000fa	f3 0f 2a 84 24
	a4 01 00 00	 cvtsi2ss xmm0, DWORD PTR tv199[rsp]
  00103	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0010b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00113	f3 0f 10 4c 24
	30		 movss	 xmm1, DWORD PTR size$12[rsp]
  00119	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0011d	0f 28 c1	 movaps	 xmm0, xmm1
  00120	f3 0f 11 44 24
	38		 movss	 DWORD PTR $T14[rsp], xmm0
  00126	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR cellSize
  0012e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00135	72 0d		 jb	 SHORT $LN15@SubscribeE
  00137	c7 84 24 a8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv205[rsp], 1
  00142	eb 0b		 jmp	 SHORT $LN16@SubscribeE
$LN15@SubscribeE:
  00144	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv205[rsp], 0
$LN16@SubscribeE:
  0014f	f3 0f 2a 84 24
	a8 01 00 00	 cvtsi2ss xmm0, DWORD PTR tv205[rsp]
  00158	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00160	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00168	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR cellSize
  00170	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00174	0f 28 c1	 movaps	 xmm0, xmm1
  00177	f3 0f 11 44 24
	3c		 movss	 DWORD PTR $T15[rsp], xmm0
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 33   : 	checkGridScale(add);

  0017d	f3 0f 10 44 24
	38		 movss	 xmm0, DWORD PTR $T14[rsp]
  00183	f3 0f 10 4c 24
	3c		 movss	 xmm1, DWORD PTR $T15[rsp]
  00189	0f 2f c1	 comiss	 xmm0, xmm1
  0018c	76 0e		 jbe	 SHORT $LN3@SubscribeE
  0018e	f3 0f 10 44 24
	30		 movss	 xmm0, DWORD PTR size$12[rsp]
  00194	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR cellSize, xmm0
$LN3@SubscribeE:
  0019c	b8 08 00 00 00	 mov	 eax, 8
  001a1	48 6b c0 01	 imul	 rax, rax, 1
  001a5	b9 08 00 00 00	 mov	 ecx, 8
  001aa	48 6b c9 00	 imul	 rcx, rcx, 0
  001ae	48 8b 94 24 f0
	01 00 00	 mov	 rdx, QWORD PTR add$[rsp]
  001b6	4c 8b 84 24 f0
	01 00 00	 mov	 r8, QWORD PTR add$[rsp]
  001be	f3 0f 10 44 02
	30		 movss	 xmm0, DWORD PTR [rdx+rax+48]
  001c4	f3 41 0f 5c 44
	08 30		 subss	 xmm0, DWORD PTR [r8+rcx+48]
  001cb	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  001d3	f3 0f 11 44 24
	34		 movss	 DWORD PTR size$13[rsp], xmm0
  001d9	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR add$[rsp]
  001e1	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  001e5	74 1c		 je	 SHORT $LN4@SubscribeE
  001e7	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR add$[rsp]
  001ef	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001f2	f3 0f 10 44 24
	34		 movss	 xmm0, DWORD PTR size$13[rsp]
  001f8	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [rax+8]
  001fd	f3 0f 11 44 24
	34		 movss	 DWORD PTR size$13[rsp], xmm0
$LN4@SubscribeE:
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h

; 19   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  00203	f3 0f 10 44 24
	34		 movss	 xmm0, DWORD PTR size$13[rsp]
  00209	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00210	72 0d		 jb	 SHORT $LN19@SubscribeE
  00212	c7 84 24 ac 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv211[rsp], 1
  0021d	eb 0b		 jmp	 SHORT $LN20@SubscribeE
$LN19@SubscribeE:
  0021f	c7 84 24 ac 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv211[rsp], 0
$LN20@SubscribeE:
  0022a	f3 0f 2a 84 24
	ac 01 00 00	 cvtsi2ss xmm0, DWORD PTR tv211[rsp]
  00233	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0023b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00243	f3 0f 10 4c 24
	34		 movss	 xmm1, DWORD PTR size$13[rsp]
  00249	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0024d	0f 28 c1	 movaps	 xmm0, xmm1
  00250	f3 0f 11 44 24
	40		 movss	 DWORD PTR $T16[rsp], xmm0
  00256	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR cellSize+4
  0025e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00265	72 0d		 jb	 SHORT $LN23@SubscribeE
  00267	c7 84 24 b0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv217[rsp], 1
  00272	eb 0b		 jmp	 SHORT $LN24@SubscribeE
$LN23@SubscribeE:
  00274	c7 84 24 b0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv217[rsp], 0
$LN24@SubscribeE:
  0027f	f3 0f 2a 84 24
	b0 01 00 00	 cvtsi2ss xmm0, DWORD PTR tv217[rsp]
  00288	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00290	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00298	f3 0f 10 0d 04
	00 00 00	 movss	 xmm1, DWORD PTR cellSize+4
  002a0	f3 0f 59 c8	 mulss	 xmm1, xmm0
  002a4	0f 28 c1	 movaps	 xmm0, xmm1
  002a7	f3 0f 11 44 24
	44		 movss	 DWORD PTR $T17[rsp], xmm0
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 33   : 	checkGridScale(add);

  002ad	f3 0f 10 44 24
	40		 movss	 xmm0, DWORD PTR $T16[rsp]
  002b3	f3 0f 10 4c 24
	44		 movss	 xmm1, DWORD PTR $T17[rsp]
  002b9	0f 2f c1	 comiss	 xmm0, xmm1
  002bc	76 0e		 jbe	 SHORT $LN5@SubscribeE
  002be	f3 0f 10 44 24
	34		 movss	 xmm0, DWORD PTR size$13[rsp]
  002c4	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR cellSize+4, xmm0
$LN5@SubscribeE:

; 34   : 	add->pastCellPosition.x = -1;

  002cc	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR add$[rsp]
  002d4	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [rax+12], -1

; 35   : 	add->origMidpoint = VectorDivByScalar(AddVectors(add->origAABB[1], *add->origAABB), 2.0f);

  002db	b8 08 00 00 00	 mov	 eax, 8
  002e0	48 6b c0 00	 imul	 rax, rax, 0
  002e4	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR add$[rsp]
  002ec	48 8b 44 01 2c	 mov	 rax, QWORD PTR [rcx+rax+44]
  002f1	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR rhs$[rsp], rax
  002f9	b8 08 00 00 00	 mov	 eax, 8
  002fe	48 6b c0 01	 imul	 rax, rax, 1
  00302	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR add$[rsp]
  0030a	48 8b 44 01 2c	 mov	 rax, QWORD PTR [rcx+rax+44]
  0030f	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR lhs$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h

; 35   : 	_this.x = lhs.x + rhs.x;

  00317	f3 0f 10 84 24
	58 01 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp]
  00320	f3 0f 58 84 24
	78 01 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp]
  00329	f3 0f 11 84 24
	98 01 00 00	 movss	 DWORD PTR _this$27[rsp], xmm0

; 36   : 	_this.y = lhs.y + rhs.y;

  00332	f3 0f 10 84 24
	5c 01 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  0033b	f3 0f 58 84 24
	7c 01 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp+4]
  00344	f3 0f 11 84 24
	9c 01 00 00	 movss	 DWORD PTR _this$27[rsp+4], xmm0

; 37   : 	return _this;

  0034d	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR _this$27[rsp]
  00355	48 89 44 24 48	 mov	 QWORD PTR $T18[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 35   : 	add->origMidpoint = VectorDivByScalar(AddVectors(add->origAABB[1], *add->origAABB), 2.0f);

  0035a	48 8b 44 24 48	 mov	 rax, QWORD PTR $T18[rsp]
  0035f	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR a$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h

; 129  : 	_this.x = a.x / b;

  00367	f3 0f 10 84 24
	18 01 00 00	 movss	 xmm0, DWORD PTR a$[rsp]
  00370	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00378	f3 0f 11 84 24
	38 01 00 00	 movss	 DWORD PTR _this$26[rsp], xmm0

; 130  : 	_this.y = a.y / b;

  00381	f3 0f 10 84 24
	1c 01 00 00	 movss	 xmm0, DWORD PTR a$[rsp+4]
  0038a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00392	f3 0f 11 84 24
	3c 01 00 00	 movss	 DWORD PTR _this$26[rsp+4], xmm0

; 131  : 	return _this;

  0039b	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR _this$26[rsp]
  003a3	48 89 44 24 50	 mov	 QWORD PTR $T19[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 35   : 	add->origMidpoint = VectorDivByScalar(AddVectors(add->origAABB[1], *add->origAABB), 2.0f);

  003a8	48 8b 44 24 50	 mov	 rax, QWORD PTR $T19[rsp]
  003ad	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR add$[rsp]
  003b5	48 89 41 1c	 mov	 QWORD PTR [rcx+28], rax

; 36   : 	if (data) VectorMultAssign(&add->origMidpoint, data->transform.scale);

  003b9	48 83 7c 24 28
	00		 cmp	 QWORD PTR data$[rsp], 0
  003bf	0f 84 9b 00 00
	00		 je	 $LN6@SubscribeE
  003c5	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  003ca	48 8b 40 04	 mov	 rax, QWORD PTR [rax+4]
  003ce	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR b$[rsp], rax
  003d6	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR add$[rsp]
  003de	48 83 c0 1c	 add	 rax, 28
  003e2	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR a$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h

; 112  : 	*a = VectorMult(*a, b);

  003ea	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  003f2	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR b$[rsp], rax
  003fa	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  00402	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00405	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR a$[rsp], rax

; 107  : 	_this.x = a.x * b.x;

  0040d	f3 0f 10 84 24
	b8 00 00 00	 movss	 xmm0, DWORD PTR a$[rsp]
  00416	f3 0f 59 84 24
	d8 00 00 00	 mulss	 xmm0, DWORD PTR b$[rsp]
  0041f	f3 0f 11 84 24
	f8 00 00 00	 movss	 DWORD PTR _this$25[rsp], xmm0

; 108  : 	_this.y = a.y * b.y;

  00428	f3 0f 10 84 24
	bc 00 00 00	 movss	 xmm0, DWORD PTR a$[rsp+4]
  00431	f3 0f 59 84 24
	dc 00 00 00	 mulss	 xmm0, DWORD PTR b$[rsp+4]
  0043a	f3 0f 11 84 24
	fc 00 00 00	 movss	 DWORD PTR _this$25[rsp+4], xmm0

; 109  : 	return _this;

  00443	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR _this$25[rsp]
  0044b	48 89 44 24 58	 mov	 QWORD PTR $T20[rsp], rax

; 112  : 	*a = VectorMult(*a, b);

  00450	48 8b 44 24 58	 mov	 rax, QWORD PTR $T20[rsp]
  00455	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR a$[rsp]
  0045d	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN6@SubscribeE:
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 37   : 	if (data) {

  00460	48 83 7c 24 28
	00		 cmp	 QWORD PTR data$[rsp], 0
  00466	74 3d		 je	 SHORT $LN7@SubscribeE

; 38   : 		data->transform.scale = oneVector;

  00468	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  0046d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR oneVector
  00474	48 89 48 04	 mov	 QWORD PTR [rax+4], rcx

; 39   : 		data->invMass = 1.0f / data->mass;

  00478	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  0047d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00485	f3 0f 5e 40 40	 divss	 xmm0, DWORD PTR [rax+64]
  0048a	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  0048f	f3 0f 11 40 44	 movss	 DWORD PTR [rax+68], xmm0

; 40   : 		data->transform.updateVerticies.x = true;//so that the sorting system sorts them on the first frame

  00494	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  00499	c6 00 01	 mov	 BYTE PTR [rax], 1

; 41   : 		data->bIsStatic = false;

  0049c	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  004a1	c6 40 50 00	 mov	 BYTE PTR [rax+80], 0
$LN7@SubscribeE:

; 42   : 	}
; 43   : 	add->prev = add->next = NULL;

  004a5	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR add$[rsp]
  004ad	48 c7 40 50 00
	00 00 00	 mov	 QWORD PTR [rax+80], 0
  004b5	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR add$[rsp]
  004bd	48 c7 40 58 00
	00 00 00	 mov	 QWORD PTR [rax+88], 0

; 44   : 	noOfCellChecks++;

  004c5	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfCellChecks
  004cb	ff c0		 inc	 eax
  004cd	89 05 00 00 00
	00		 mov	 DWORD PTR noOfCellChecks, eax

; 45   : 	nodeSection = IMax(noOfCellChecks / NUM_THREADS, 1);

  004d3	33 d2		 xor	 edx, edx
  004d5	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfCellChecks
  004db	b9 0a 00 00 00	 mov	 ecx, 10
  004e0	f7 f1		 div	 ecx
  004e2	89 44 24 78	 mov	 DWORD PTR lhs$[rsp], eax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h

; 39   : 	bool b = lhs >= rhs;

  004e6	83 7c 24 78 01	 cmp	 DWORD PTR lhs$[rsp], 1
  004eb	7c 0d		 jl	 SHORT $LN35@SubscribeE
  004ed	c7 84 24 b4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv164[rsp], 1
  004f8	eb 0b		 jmp	 SHORT $LN36@SubscribeE
$LN35@SubscribeE:
  004fa	c7 84 24 b4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv164[rsp], 0
$LN36@SubscribeE:
  00505	83 bc 24 b4 01
	00 00 00	 cmp	 DWORD PTR tv164[rsp], 0
  0050d	75 0d		 jne	 SHORT $LN37@SubscribeE
  0050f	c7 84 24 b8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv256[rsp], 0
  0051a	eb 0b		 jmp	 SHORT $LN38@SubscribeE
$LN37@SubscribeE:
  0051c	c7 84 24 b8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv256[rsp], 1
$LN38@SubscribeE:
  00527	0f b6 84 24 b8
	01 00 00	 movzx	 eax, BYTE PTR tv256[rsp]
  0052f	88 84 24 80 00
	00 00		 mov	 BYTE PTR b$24[rsp], al

; 40   : 	return lhs * b + rhs * !b;

  00536	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR b$24[rsp]
  0053e	85 c0		 test	 eax, eax
  00540	75 0d		 jne	 SHORT $LN39@SubscribeE
  00542	c7 84 24 bc 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv264[rsp], 1
  0054d	eb 0b		 jmp	 SHORT $LN40@SubscribeE
$LN39@SubscribeE:
  0054f	c7 84 24 bc 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv264[rsp], 0
$LN40@SubscribeE:
  0055a	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR b$24[rsp]
  00562	8b 4c 24 78	 mov	 ecx, DWORD PTR lhs$[rsp]
  00566	0f af c8	 imul	 ecx, eax
  00569	8b c1		 mov	 eax, ecx
  0056b	6b 8c 24 bc 01
	00 00 01	 imul	 ecx, DWORD PTR tv264[rsp], 1
  00573	03 c1		 add	 eax, ecx
  00575	89 44 24 60	 mov	 DWORD PTR $T21[rsp], eax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 45   : 	nodeSection = IMax(noOfCellChecks / NUM_THREADS, 1);

  00579	8b 44 24 60	 mov	 eax, DWORD PTR $T21[rsp]
  0057d	89 05 00 00 00
	00		 mov	 DWORD PTR nodeSection, eax

; 46   : 	nodeExcess = noOfCellChecks % NUM_THREADS;

  00583	33 d2		 xor	 edx, edx
  00585	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfCellChecks
  0058b	b9 0a 00 00 00	 mov	 ecx, 10
  00590	f7 f1		 div	 ecx
  00592	8b c2		 mov	 eax, edx
  00594	89 05 00 00 00
	00		 mov	 DWORD PTR nodeExcess, eax

; 47   : 	endOfNodes = IMax(noOfCellChecks - nodeExcess, NUM_THREADS);

  0059a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR nodeExcess
  005a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR noOfCellChecks
  005a6	2b c8		 sub	 ecx, eax
  005a8	8b c1		 mov	 eax, ecx
  005aa	89 44 24 68	 mov	 DWORD PTR lhs$[rsp], eax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h

; 39   : 	bool b = lhs >= rhs;

  005ae	83 7c 24 68 0a	 cmp	 DWORD PTR lhs$[rsp], 10
  005b3	7c 0d		 jl	 SHORT $LN43@SubscribeE
  005b5	c7 84 24 c0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv178[rsp], 1
  005c0	eb 0b		 jmp	 SHORT $LN44@SubscribeE
$LN43@SubscribeE:
  005c2	c7 84 24 c0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv178[rsp], 0
$LN44@SubscribeE:
  005cd	83 bc 24 c0 01
	00 00 00	 cmp	 DWORD PTR tv178[rsp], 0
  005d5	75 0d		 jne	 SHORT $LN45@SubscribeE
  005d7	c7 84 24 c4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv268[rsp], 0
  005e2	eb 0b		 jmp	 SHORT $LN46@SubscribeE
$LN45@SubscribeE:
  005e4	c7 84 24 c4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv268[rsp], 1
$LN46@SubscribeE:
  005ef	0f b6 84 24 c4
	01 00 00	 movzx	 eax, BYTE PTR tv268[rsp]
  005f7	88 44 24 70	 mov	 BYTE PTR b$23[rsp], al

; 40   : 	return lhs * b + rhs * !b;

  005fb	0f b6 44 24 70	 movzx	 eax, BYTE PTR b$23[rsp]
  00600	85 c0		 test	 eax, eax
  00602	75 0d		 jne	 SHORT $LN47@SubscribeE
  00604	c7 84 24 c8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv274[rsp], 1
  0060f	eb 0b		 jmp	 SHORT $LN48@SubscribeE
$LN47@SubscribeE:
  00611	c7 84 24 c8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv274[rsp], 0
$LN48@SubscribeE:
  0061c	0f b6 44 24 70	 movzx	 eax, BYTE PTR b$23[rsp]
  00621	8b 4c 24 68	 mov	 ecx, DWORD PTR lhs$[rsp]
  00625	0f af c8	 imul	 ecx, eax
  00628	8b c1		 mov	 eax, ecx
  0062a	6b 8c 24 c8 01
	00 00 0a	 imul	 ecx, DWORD PTR tv274[rsp], 10
  00632	03 c1		 add	 eax, ecx
  00634	89 44 24 64	 mov	 DWORD PTR $T22[rsp], eax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 47   : 	endOfNodes = IMax(noOfCellChecks - nodeExcess, NUM_THREADS);

  00638	8b 44 24 64	 mov	 eax, DWORD PTR $T22[rsp]
  0063c	89 05 00 00 00
	00		 mov	 DWORD PTR endOfNodes, eax

; 48   : 	totalCheckedCells = realloc(totalCheckedCells, sizeof(cellChecks) * noOfCellChecks);

  00642	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfCellChecks
  00648	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv187[rsp], rax
  00650	b8 18 00 00 00	 mov	 eax, 24
  00655	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR tv187[rsp]
  0065d	48 f7 e1	 mul	 rcx
  00660	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00667	48 0f 42 c1	 cmovb	 rax, rcx
  0066b	48 8b d0	 mov	 rdx, rax
  0066e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR totalCheckedCells
  00675	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc
  0067b	48 89 05 00 00
	00 00		 mov	 QWORD PTR totalCheckedCells, rax

; 49   : 	return this;

  00682	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]

; 50   : }

  00687	48 8b f8	 mov	 rdi, rax
  0068a	48 8b cc	 mov	 rcx, rsp
  0068d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:SubscribeEntity$rtcFrameData
  00694	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00699	48 8b c7	 mov	 rax, rdi
  0069c	48 81 c4 e0 01
	00 00		 add	 rsp, 480		; 000001e0H
  006a3	5f		 pop	 rdi
  006a4	c3		 ret	 0
SubscribeEntity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
_TEXT	SEGMENT
entity$ = 32
aabbSize$ = 40
this$ = 48
$T8 = 56
$T9 = 64
a$ = 88
_this$10 = 120
lhs$ = 152
rhs$ = 184
_this$11 = 216
AABB$ = 272
tag$ = 280
layer$ = 288
CreateCollider2 PROC

; 120  : entityNode* CreateCollider2(Vector2 AABB[2], int tag, int layer) {

$LN7:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	56		 push	 rsi
  0000f	57		 push	 rdi
  00010	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00017	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001c	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR [rsp+272]
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__460EF0CE_EntityManager@c
  00037	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 121  : 	Entity* entity = malloc(sizeof(Entity));

  0003c	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00047	48 89 44 24 20	 mov	 QWORD PTR entity$[rsp], rax

; 122  : 	rsize_t aabbSize = sizeof(Vector2) * AABB_NUM_POINTS;

  0004c	48 c7 44 24 28
	10 00 00 00	 mov	 QWORD PTR aabbSize$[rsp], 16

; 123  : 	memcpy(entity->origAABB, AABB, aabbSize);

  00055	48 8b 44 24 20	 mov	 rax, QWORD PTR entity$[rsp]
  0005a	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  0005e	48 8b f8	 mov	 rdi, rax
  00061	48 8b b4 24 10
	01 00 00	 mov	 rsi, QWORD PTR AABB$[rsp]
  00069	48 8b 4c 24 28	 mov	 rcx, QWORD PTR aabbSize$[rsp]
  0006e	f3 a4		 rep movsb

; 124  : 	memcpy(entity->trueAABB, entity->origAABB, aabbSize);

  00070	48 8b 44 24 20	 mov	 rax, QWORD PTR entity$[rsp]
  00075	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  00079	48 8b 4c 24 20	 mov	 rcx, QWORD PTR entity$[rsp]
  0007e	48 83 c1 3c	 add	 rcx, 60			; 0000003cH
  00082	48 8b f9	 mov	 rdi, rcx
  00085	48 8b f0	 mov	 rsi, rax
  00088	48 8b 4c 24 28	 mov	 rcx, QWORD PTR aabbSize$[rsp]
  0008d	f3 a4		 rep movsb

; 125  : 	entity->origMidpoint = VectorDivByScalar(AddVectors(AABB[1], *AABB), 2.0f);

  0008f	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR AABB$[rsp]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR rhs$[rsp], rax
  000a2	b8 08 00 00 00	 mov	 eax, 8
  000a7	48 6b c0 01	 imul	 rax, rax, 1
  000ab	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR AABB$[rsp]
  000b3	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000b7	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR lhs$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h

; 35   : 	_this.x = lhs.x + rhs.x;

  000bf	f3 0f 10 84 24
	98 00 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp]
  000c8	f3 0f 58 84 24
	b8 00 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp]
  000d1	f3 0f 11 84 24
	d8 00 00 00	 movss	 DWORD PTR _this$11[rsp], xmm0

; 36   : 	_this.y = lhs.y + rhs.y;

  000da	f3 0f 10 84 24
	9c 00 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  000e3	f3 0f 58 84 24
	bc 00 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp+4]
  000ec	f3 0f 11 84 24
	dc 00 00 00	 movss	 DWORD PTR _this$11[rsp+4], xmm0

; 37   : 	return _this;

  000f5	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR _this$11[rsp]
  000fd	48 89 44 24 38	 mov	 QWORD PTR $T8[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 125  : 	entity->origMidpoint = VectorDivByScalar(AddVectors(AABB[1], *AABB), 2.0f);

  00102	48 8b 44 24 38	 mov	 rax, QWORD PTR $T8[rsp]
  00107	48 89 44 24 58	 mov	 QWORD PTR a$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h

; 129  : 	_this.x = a.x / b;

  0010c	f3 0f 10 44 24
	58		 movss	 xmm0, DWORD PTR a$[rsp]
  00112	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0011a	f3 0f 11 44 24
	78		 movss	 DWORD PTR _this$10[rsp], xmm0

; 130  : 	_this.y = a.y / b;

  00120	f3 0f 10 44 24
	5c		 movss	 xmm0, DWORD PTR a$[rsp+4]
  00126	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0012e	f3 0f 11 44 24
	7c		 movss	 DWORD PTR _this$10[rsp+4], xmm0

; 131  : 	return _this;

  00134	48 8b 44 24 78	 mov	 rax, QWORD PTR _this$10[rsp]
  00139	48 89 44 24 40	 mov	 QWORD PTR $T9[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 125  : 	entity->origMidpoint = VectorDivByScalar(AddVectors(AABB[1], *AABB), 2.0f);

  0013e	48 8b 44 24 40	 mov	 rax, QWORD PTR $T9[rsp]
  00143	48 8b 4c 24 20	 mov	 rcx, QWORD PTR entity$[rsp]
  00148	48 89 41 1c	 mov	 QWORD PTR [rcx+28], rax

; 126  : 	entity->physicsData = NULL;

  0014c	48 8b 44 24 20	 mov	 rax, QWORD PTR entity$[rsp]
  00151	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 127  : 	entity->tag = tag;

  00158	48 8b 44 24 20	 mov	 rax, QWORD PTR entity$[rsp]
  0015d	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR tag$[rsp]
  00164	89 48 24	 mov	 DWORD PTR [rax+36], ecx

; 128  : 	entity->layer = layer;

  00167	48 8b 44 24 20	 mov	 rax, QWORD PTR entity$[rsp]
  0016c	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR layer$[rsp]
  00173	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 129  : 	entity->pastCellPosition.x = -1;

  00176	48 8b 44 24 20	 mov	 rax, QWORD PTR entity$[rsp]
  0017b	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [rax+12], -1

; 130  : 	entityNode* this = SubscribeEntity(entity);

  00182	48 8b 4c 24 20	 mov	 rcx, QWORD PTR entity$[rsp]
  00187	e8 00 00 00 00	 call	 SubscribeEntity
  0018c	48 89 44 24 30	 mov	 QWORD PTR this$[rsp], rax

; 131  : 	return this;

  00191	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]

; 132  : }

  00196	48 8b f8	 mov	 rdi, rax
  00199	48 8b cc	 mov	 rcx, rsp
  0019c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:CreateCollider2$rtcFrameData
  001a3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001a8	48 8b c7	 mov	 rax, rdi
  001ab	48 81 c4 f8 00
	00 00		 add	 rsp, 248		; 000000f8H
  001b2	5f		 pop	 rdi
  001b3	5e		 pop	 rsi
  001b4	c3		 ret	 0
CreateCollider2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
_TEXT	SEGMENT
_this$ = 32
mesh$ = 40
add$ = 64
SubscribeSlider PROC

; 100  : SliderList* SubscribeSlider(Slider* add) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__460EF0CE_EntityManager@c
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 101  : 	SliderList* _this = malloc(sizeof(SliderList));

  00016	b9 18 00 00 00	 mov	 ecx, 24
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00021	48 89 44 24 20	 mov	 QWORD PTR _this$[rsp], rax

; 102  : 	SquishableMesh* mesh = add->mesh;

  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR add$[rsp]
  0002b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002e	48 89 44 24 28	 mov	 QWORD PTR mesh$[rsp], rax

; 103  : 	mesh->origXMinY = vertices[mesh->meshLocation + stride];

  00033	48 8b 44 24 28	 mov	 rax, QWORD PTR mesh$[rsp]
  00038	8b 00		 mov	 eax, DWORD PTR [rax]
  0003a	03 05 00 00 00
	00		 add	 eax, DWORD PTR stride
  00040	8b c0		 mov	 eax, eax
  00042	48 8b 4c 24 28	 mov	 rcx, QWORD PTR mesh$[rsp]
  00047	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR vertices
  0004e	f3 0f 10 04 82	 movss	 xmm0, DWORD PTR [rdx+rax*4]
  00053	f3 0f 11 41 0c	 movss	 DWORD PTR [rcx+12], xmm0

; 104  : 	mesh->origXMaxY = vertices[mesh->meshLocation + stride * 2];

  00058	48 8b 44 24 28	 mov	 rax, QWORD PTR mesh$[rsp]
  0005d	8b 00		 mov	 eax, DWORD PTR [rax]
  0005f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR stride
  00065	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  00068	8b c0		 mov	 eax, eax
  0006a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR mesh$[rsp]
  0006f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR vertices
  00076	f3 0f 10 04 82	 movss	 xmm0, DWORD PTR [rdx+rax*4]
  0007b	f3 0f 11 41 08	 movss	 DWORD PTR [rcx+8], xmm0

; 105  : 	Insert(_this, add, sliderHead);

  00080	48 8b 44 24 20	 mov	 rax, QWORD PTR _this$[rsp]
  00085	48 8b 4c 24 40	 mov	 rcx, QWORD PTR add$[rsp]
  0008a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0008d	48 8b 44 24 20	 mov	 rax, QWORD PTR _this$[rsp]
  00092	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR sliderHead
  00099	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0009d	48 8b 44 24 20	 mov	 rax, QWORD PTR _this$[rsp]
  000a2	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0
  000aa	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR sliderHead, 0
  000b2	74 10		 je	 SHORT $LN2@SubscribeS
  000b4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR sliderHead
  000bb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _this$[rsp]
  000c0	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN2@SubscribeS:
  000c4	48 8b 44 24 20	 mov	 rax, QWORD PTR _this$[rsp]
  000c9	48 89 05 00 00
	00 00		 mov	 QWORD PTR sliderHead, rax

; 106  : 	return _this;

  000d0	48 8b 44 24 20	 mov	 rax, QWORD PTR _this$[rsp]

; 107  : }

  000d5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d9	5f		 pop	 rdi
  000da	c3		 ret	 0
SubscribeSlider ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
_TEXT	SEGMENT
data$ = 32
i$1 = 40
tv85 = 44
toDelete$ = 64
allNull$ = 72
DeleteEntity PROC

; 72   : void DeleteEntity(entityNode* toDelete, bool allNull) {

$LN12:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__460EF0CE_EntityManager@c
  00015	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 73   : 	PhysicsData* data = toDelete->entity->physicsData;

  0001a	48 8b 44 24 40	 mov	 rax, QWORD PTR toDelete$[rsp]
  0001f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 89 44 24 20	 mov	 QWORD PTR data$[rsp], rax

; 74   : 	if (allNull) for (ushort i = 0; i < data->animator->noOfAnims; i++) glDeleteTextures(data->animator->animFrameNo[i], data->animator->frameTextures[i]);

  0002a	0f b6 44 24 48	 movzx	 eax, BYTE PTR allNull$[rsp]
  0002f	85 c0		 test	 eax, eax
  00031	74 6c		 je	 SHORT $LN5@DeleteEnti
  00033	33 c0		 xor	 eax, eax
  00035	66 89 44 24 28	 mov	 WORD PTR i$1[rsp], ax
  0003a	eb 0d		 jmp	 SHORT $LN4@DeleteEnti
$LN2@DeleteEnti:
  0003c	0f b7 44 24 28	 movzx	 eax, WORD PTR i$1[rsp]
  00041	66 ff c0	 inc	 ax
  00044	66 89 44 24 28	 mov	 WORD PTR i$1[rsp], ax
$LN4@DeleteEnti:
  00049	0f b7 44 24 28	 movzx	 eax, WORD PTR i$1[rsp]
  0004e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR data$[rsp]
  00053	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  00057	0f b7 49 22	 movzx	 ecx, WORD PTR [rcx+34]
  0005b	3b c1		 cmp	 eax, ecx
  0005d	7d 40		 jge	 SHORT $LN3@DeleteEnti
  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR data$[rsp]
  00064	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00068	0f b7 4c 24 28	 movzx	 ecx, WORD PTR i$1[rsp]
  0006d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00071	48 8b 54 24 20	 mov	 rdx, QWORD PTR data$[rsp]
  00076	48 8b 52 28	 mov	 rdx, QWORD PTR [rdx+40]
  0007a	44 0f b7 44 24
	28		 movzx	 r8d, WORD PTR i$1[rsp]
  00080	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00083	42 0f b7 14 42	 movzx	 edx, WORD PTR [rdx+r8*2]
  00088	89 54 24 2c	 mov	 DWORD PTR tv85[rsp], edx
  0008c	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00090	8b 44 24 2c	 mov	 eax, DWORD PTR tv85[rsp]
  00094	8b c8		 mov	 ecx, eax
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glDeleteTextures
  0009c	90		 npad	 1
  0009d	eb 9d		 jmp	 SHORT $LN2@DeleteEnti
$LN3@DeleteEnti:
$LN5@DeleteEnti:

; 75   : 	free(data->animator->animFrameNo);

  0009f	48 8b 44 24 20	 mov	 rax, QWORD PTR data$[rsp]
  000a4	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  000a8	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 76   : 	free(data->animator);

  000b1	48 8b 44 24 20	 mov	 rax, QWORD PTR data$[rsp]
  000b6	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 77   : 	free(data->mesh);

  000c0	48 8b 44 24 20	 mov	 rax, QWORD PTR data$[rsp]
  000c5	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  000c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 78   : 	free(data);

  000cf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR data$[rsp]
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 79   : 	DelEntNode(toDelete);

  000da	48 8b 44 24 40	 mov	 rax, QWORD PTR toDelete$[rsp]
  000df	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000e2	e8 00 00 00 00	 call	 RemoveEntAppropriate
  000e7	48 8b 44 24 40	 mov	 rax, QWORD PTR toDelete$[rsp]
  000ec	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  000f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:entityHead
  000fc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR toDelete$[rsp]
  00101	e8 00 00 00 00	 call	 RemoveEntityNode
  00106	48 8b 4c 24 40	 mov	 rcx, QWORD PTR toDelete$[rsp]
  0010b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  00111	90		 npad	 1

; 80   : }

  00112	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00116	5f		 pop	 rdi
  00117	c3		 ret	 0
DeleteEntity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
_TEXT	SEGMENT
node$ = 48
DeleteSlider PROC

; 81   : void DeleteSlider(SliderList *node) {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__460EF0CE_EntityManager@c
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 82   : 	DeleteSQuad(node->value->mesh);

  00016	48 8b 44 24 30	 mov	 rax, QWORD PTR node$[rsp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00021	e8 00 00 00 00	 call	 DeleteSQuad

; 83   : 	RemoveSliderNode(node);

  00026	48 8b 4c 24 30	 mov	 rcx, QWORD PTR node$[rsp]
  0002b	e8 00 00 00 00	 call	 RemoveSliderNode

; 84   : 	free(node);

  00030	48 8b 4c 24 30	 mov	 rcx, QWORD PTR node$[rsp]
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  0003b	90		 npad	 1

; 85   : }

  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5f		 pop	 rdi
  00041	c3		 ret	 0
DeleteSlider ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
_TEXT	SEGMENT
this$ = 32
data$ = 40
size$12 = 48
size$13 = 52
$T14 = 56
$T15 = 64
$T16 = 72
$T17 = 80
$T18 = 84
$T19 = 88
$T20 = 92
$T21 = 96
$T22 = 100
lhs$ = 104
b$23 = 112
lhs$ = 120
b$24 = 128
a$ = 136
b$ = 152
a$ = 184
b$ = 216
_this$25 = 248
a$ = 280
_this$26 = 312
lhs$ = 344
rhs$ = 376
_this$27 = 408
tv90 = 420
tv204 = 424
tv210 = 428
tv216 = 432
tv222 = 436
tv256 = 440
tv262 = 444
tv176 = 448
tv266 = 452
tv272 = 456
tv185 = 464
add$ = 496
SubscribeEntity_Without_Scale PROC

; 51   : entityNode* SubscribeEntity_Without_Scale(Entity* add) {

$LN49:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec e0 01
	00 00		 sub	 rsp, 480		; 000001e0H
  0000d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00012	b9 70 00 00 00	 mov	 ecx, 112		; 00000070H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+496]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__460EF0CE_EntityManager@c
  0002d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 52   : 	entityNode* this = malloc(sizeof(entityNode));

  00032	b9 18 00 00 00	 mov	 ecx, 24
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0003d	48 89 44 24 20	 mov	 QWORD PTR this$[rsp], rax

; 53   : 	InsertAtMainHead(this);

  00042	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  00047	e8 00 00 00 00	 call	 InsertAtMainHead

; 54   : 	this->entity = add;

  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00051	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR add$[rsp]
  00059	48 89 08	 mov	 QWORD PTR [rax], rcx

; 55   : 	PhysicsData* data = add->physicsData;

  0005c	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR add$[rsp]
  00064	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00067	48 89 44 24 28	 mov	 QWORD PTR data$[rsp], rax

; 56   : 	add->pastCellPosition.x = -1;

  0006c	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR add$[rsp]
  00074	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [rax+12], -1

; 57   : 	add->origMidpoint = VectorDivByScalar(AddVectors(add->origAABB[1], *add->origAABB), 2.0f);

  0007b	b8 08 00 00 00	 mov	 eax, 8
  00080	48 6b c0 00	 imul	 rax, rax, 0
  00084	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR add$[rsp]
  0008c	48 8b 44 01 2c	 mov	 rax, QWORD PTR [rcx+rax+44]
  00091	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR rhs$[rsp], rax
  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 01	 imul	 rax, rax, 1
  000a2	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR add$[rsp]
  000aa	48 8b 44 01 2c	 mov	 rax, QWORD PTR [rcx+rax+44]
  000af	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR lhs$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h

; 35   : 	_this.x = lhs.x + rhs.x;

  000b7	f3 0f 10 84 24
	58 01 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp]
  000c0	f3 0f 58 84 24
	78 01 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp]
  000c9	f3 0f 11 84 24
	98 01 00 00	 movss	 DWORD PTR _this$27[rsp], xmm0

; 36   : 	_this.y = lhs.y + rhs.y;

  000d2	f3 0f 10 84 24
	5c 01 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  000db	f3 0f 58 84 24
	7c 01 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp+4]
  000e4	f3 0f 11 84 24
	9c 01 00 00	 movss	 DWORD PTR _this$27[rsp+4], xmm0

; 37   : 	return _this;

  000ed	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR _this$27[rsp]
  000f5	48 89 44 24 38	 mov	 QWORD PTR $T14[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 57   : 	add->origMidpoint = VectorDivByScalar(AddVectors(add->origAABB[1], *add->origAABB), 2.0f);

  000fa	48 8b 44 24 38	 mov	 rax, QWORD PTR $T14[rsp]
  000ff	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR a$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h

; 129  : 	_this.x = a.x / b;

  00107	f3 0f 10 84 24
	18 01 00 00	 movss	 xmm0, DWORD PTR a$[rsp]
  00110	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00118	f3 0f 11 84 24
	38 01 00 00	 movss	 DWORD PTR _this$26[rsp], xmm0

; 130  : 	_this.y = a.y / b;

  00121	f3 0f 10 84 24
	1c 01 00 00	 movss	 xmm0, DWORD PTR a$[rsp+4]
  0012a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00132	f3 0f 11 84 24
	3c 01 00 00	 movss	 DWORD PTR _this$26[rsp+4], xmm0

; 131  : 	return _this;

  0013b	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR _this$26[rsp]
  00143	48 89 44 24 40	 mov	 QWORD PTR $T15[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 57   : 	add->origMidpoint = VectorDivByScalar(AddVectors(add->origAABB[1], *add->origAABB), 2.0f);

  00148	48 8b 44 24 40	 mov	 rax, QWORD PTR $T15[rsp]
  0014d	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR add$[rsp]
  00155	48 89 41 1c	 mov	 QWORD PTR [rcx+28], rax

; 58   : 	if (data) VectorMultAssign(&add->origMidpoint, data->transform.scale);

  00159	48 83 7c 24 28
	00		 cmp	 QWORD PTR data$[rsp], 0
  0015f	0f 84 9b 00 00
	00		 je	 $LN2@SubscribeE
  00165	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  0016a	48 8b 40 04	 mov	 rax, QWORD PTR [rax+4]
  0016e	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR b$[rsp], rax
  00176	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR add$[rsp]
  0017e	48 83 c0 1c	 add	 rax, 28
  00182	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR a$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h

; 112  : 	*a = VectorMult(*a, b);

  0018a	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  00192	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR b$[rsp], rax
  0019a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  001a2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001a5	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR a$[rsp], rax

; 107  : 	_this.x = a.x * b.x;

  001ad	f3 0f 10 84 24
	b8 00 00 00	 movss	 xmm0, DWORD PTR a$[rsp]
  001b6	f3 0f 59 84 24
	d8 00 00 00	 mulss	 xmm0, DWORD PTR b$[rsp]
  001bf	f3 0f 11 84 24
	f8 00 00 00	 movss	 DWORD PTR _this$25[rsp], xmm0

; 108  : 	_this.y = a.y * b.y;

  001c8	f3 0f 10 84 24
	bc 00 00 00	 movss	 xmm0, DWORD PTR a$[rsp+4]
  001d1	f3 0f 59 84 24
	dc 00 00 00	 mulss	 xmm0, DWORD PTR b$[rsp+4]
  001da	f3 0f 11 84 24
	fc 00 00 00	 movss	 DWORD PTR _this$25[rsp+4], xmm0

; 109  : 	return _this;

  001e3	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR _this$25[rsp]
  001eb	48 89 44 24 48	 mov	 QWORD PTR $T16[rsp], rax

; 112  : 	*a = VectorMult(*a, b);

  001f0	48 8b 44 24 48	 mov	 rax, QWORD PTR $T16[rsp]
  001f5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR a$[rsp]
  001fd	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN2@SubscribeE:
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 59   : 	checkGridScale(add);

  00200	b8 08 00 00 00	 mov	 eax, 8
  00205	48 6b c0 01	 imul	 rax, rax, 1
  00209	b9 08 00 00 00	 mov	 ecx, 8
  0020e	48 6b c9 00	 imul	 rcx, rcx, 0
  00212	48 8b 94 24 f0
	01 00 00	 mov	 rdx, QWORD PTR add$[rsp]
  0021a	4c 8b 84 24 f0
	01 00 00	 mov	 r8, QWORD PTR add$[rsp]
  00222	f3 0f 10 44 02
	2c		 movss	 xmm0, DWORD PTR [rdx+rax+44]
  00228	f3 41 0f 5c 44
	08 2c		 subss	 xmm0, DWORD PTR [r8+rcx+44]
  0022f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00237	f3 0f 11 44 24
	30		 movss	 DWORD PTR size$12[rsp], xmm0
  0023d	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR add$[rsp]
  00245	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00249	74 1c		 je	 SHORT $LN3@SubscribeE
  0024b	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR add$[rsp]
  00253	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00256	f3 0f 10 44 24
	30		 movss	 xmm0, DWORD PTR size$12[rsp]
  0025c	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [rax+4]
  00261	f3 0f 11 44 24
	30		 movss	 DWORD PTR size$12[rsp], xmm0
$LN3@SubscribeE:
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h

; 19   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  00267	f3 0f 10 44 24
	30		 movss	 xmm0, DWORD PTR size$12[rsp]
  0026d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00274	72 0d		 jb	 SHORT $LN19@SubscribeE
  00276	c7 84 24 a4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv90[rsp], 1
  00281	eb 0b		 jmp	 SHORT $LN20@SubscribeE
$LN19@SubscribeE:
  00283	c7 84 24 a4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv90[rsp], 0
$LN20@SubscribeE:
  0028e	f3 0f 2a 84 24
	a4 01 00 00	 cvtsi2ss xmm0, DWORD PTR tv90[rsp]
  00297	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0029f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  002a7	f3 0f 10 4c 24
	30		 movss	 xmm1, DWORD PTR size$12[rsp]
  002ad	f3 0f 59 c8	 mulss	 xmm1, xmm0
  002b1	0f 28 c1	 movaps	 xmm0, xmm1
  002b4	f3 0f 11 44 24
	50		 movss	 DWORD PTR $T17[rsp], xmm0
  002ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR cellSize
  002c2	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  002c9	72 0d		 jb	 SHORT $LN23@SubscribeE
  002cb	c7 84 24 a8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv204[rsp], 1
  002d6	eb 0b		 jmp	 SHORT $LN24@SubscribeE
$LN23@SubscribeE:
  002d8	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv204[rsp], 0
$LN24@SubscribeE:
  002e3	f3 0f 2a 84 24
	a8 01 00 00	 cvtsi2ss xmm0, DWORD PTR tv204[rsp]
  002ec	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  002f4	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  002fc	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR cellSize
  00304	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00308	0f 28 c1	 movaps	 xmm0, xmm1
  0030b	f3 0f 11 44 24
	54		 movss	 DWORD PTR $T18[rsp], xmm0
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 59   : 	checkGridScale(add);

  00311	f3 0f 10 44 24
	50		 movss	 xmm0, DWORD PTR $T17[rsp]
  00317	f3 0f 10 4c 24
	54		 movss	 xmm1, DWORD PTR $T18[rsp]
  0031d	0f 2f c1	 comiss	 xmm0, xmm1
  00320	76 0e		 jbe	 SHORT $LN4@SubscribeE
  00322	f3 0f 10 44 24
	30		 movss	 xmm0, DWORD PTR size$12[rsp]
  00328	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR cellSize, xmm0
$LN4@SubscribeE:
  00330	b8 08 00 00 00	 mov	 eax, 8
  00335	48 6b c0 01	 imul	 rax, rax, 1
  00339	b9 08 00 00 00	 mov	 ecx, 8
  0033e	48 6b c9 00	 imul	 rcx, rcx, 0
  00342	48 8b 94 24 f0
	01 00 00	 mov	 rdx, QWORD PTR add$[rsp]
  0034a	4c 8b 84 24 f0
	01 00 00	 mov	 r8, QWORD PTR add$[rsp]
  00352	f3 0f 10 44 02
	30		 movss	 xmm0, DWORD PTR [rdx+rax+48]
  00358	f3 41 0f 5c 44
	08 30		 subss	 xmm0, DWORD PTR [r8+rcx+48]
  0035f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00367	f3 0f 11 44 24
	34		 movss	 DWORD PTR size$13[rsp], xmm0
  0036d	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR add$[rsp]
  00375	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00379	74 1c		 je	 SHORT $LN5@SubscribeE
  0037b	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR add$[rsp]
  00383	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00386	f3 0f 10 44 24
	34		 movss	 xmm0, DWORD PTR size$13[rsp]
  0038c	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [rax+8]
  00391	f3 0f 11 44 24
	34		 movss	 DWORD PTR size$13[rsp], xmm0
$LN5@SubscribeE:
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h

; 19   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  00397	f3 0f 10 44 24
	34		 movss	 xmm0, DWORD PTR size$13[rsp]
  0039d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  003a4	72 0d		 jb	 SHORT $LN27@SubscribeE
  003a6	c7 84 24 ac 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv210[rsp], 1
  003b1	eb 0b		 jmp	 SHORT $LN28@SubscribeE
$LN27@SubscribeE:
  003b3	c7 84 24 ac 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv210[rsp], 0
$LN28@SubscribeE:
  003be	f3 0f 2a 84 24
	ac 01 00 00	 cvtsi2ss xmm0, DWORD PTR tv210[rsp]
  003c7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  003cf	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  003d7	f3 0f 10 4c 24
	34		 movss	 xmm1, DWORD PTR size$13[rsp]
  003dd	f3 0f 59 c8	 mulss	 xmm1, xmm0
  003e1	0f 28 c1	 movaps	 xmm0, xmm1
  003e4	f3 0f 11 44 24
	58		 movss	 DWORD PTR $T19[rsp], xmm0
  003ea	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR cellSize+4
  003f2	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  003f9	72 0d		 jb	 SHORT $LN31@SubscribeE
  003fb	c7 84 24 b0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv216[rsp], 1
  00406	eb 0b		 jmp	 SHORT $LN32@SubscribeE
$LN31@SubscribeE:
  00408	c7 84 24 b0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv216[rsp], 0
$LN32@SubscribeE:
  00413	f3 0f 2a 84 24
	b0 01 00 00	 cvtsi2ss xmm0, DWORD PTR tv216[rsp]
  0041c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00424	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0042c	f3 0f 10 0d 04
	00 00 00	 movss	 xmm1, DWORD PTR cellSize+4
  00434	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00438	0f 28 c1	 movaps	 xmm0, xmm1
  0043b	f3 0f 11 44 24
	5c		 movss	 DWORD PTR $T20[rsp], xmm0
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 59   : 	checkGridScale(add);

  00441	f3 0f 10 44 24
	58		 movss	 xmm0, DWORD PTR $T19[rsp]
  00447	f3 0f 10 4c 24
	5c		 movss	 xmm1, DWORD PTR $T20[rsp]
  0044d	0f 2f c1	 comiss	 xmm0, xmm1
  00450	76 0e		 jbe	 SHORT $LN6@SubscribeE
  00452	f3 0f 10 44 24
	34		 movss	 xmm0, DWORD PTR size$13[rsp]
  00458	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR cellSize+4, xmm0
$LN6@SubscribeE:

; 60   : 	if (data) {

  00460	48 83 7c 24 28
	00		 cmp	 QWORD PTR data$[rsp], 0
  00466	74 24		 je	 SHORT $LN7@SubscribeE

; 61   : 		data->invMass = 1.0f / data->mass;

  00468	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  0046d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00475	f3 0f 5e 40 40	 divss	 xmm0, DWORD PTR [rax+64]
  0047a	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  0047f	f3 0f 11 40 44	 movss	 DWORD PTR [rax+68], xmm0

; 62   : 		data->transform.updateVerticies.x = true;

  00484	48 8b 44 24 28	 mov	 rax, QWORD PTR data$[rsp]
  00489	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN7@SubscribeE:

; 63   : 	}
; 64   : 	add->prev = add->next = NULL;

  0048c	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR add$[rsp]
  00494	48 c7 40 50 00
	00 00 00	 mov	 QWORD PTR [rax+80], 0
  0049c	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR add$[rsp]
  004a4	48 c7 40 58 00
	00 00 00	 mov	 QWORD PTR [rax+88], 0

; 65   : 	noOfCellChecks++;

  004ac	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfCellChecks
  004b2	ff c0		 inc	 eax
  004b4	89 05 00 00 00
	00		 mov	 DWORD PTR noOfCellChecks, eax

; 66   : 	nodeSection = IMax(noOfCellChecks / NUM_THREADS, 1);

  004ba	33 d2		 xor	 edx, edx
  004bc	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfCellChecks
  004c2	b9 0a 00 00 00	 mov	 ecx, 10
  004c7	f7 f1		 div	 ecx
  004c9	89 44 24 78	 mov	 DWORD PTR lhs$[rsp], eax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h

; 39   : 	bool b = lhs >= rhs;

  004cd	83 7c 24 78 01	 cmp	 DWORD PTR lhs$[rsp], 1
  004d2	7c 0d		 jl	 SHORT $LN35@SubscribeE
  004d4	c7 84 24 b4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv222[rsp], 1
  004df	eb 0b		 jmp	 SHORT $LN36@SubscribeE
$LN35@SubscribeE:
  004e1	c7 84 24 b4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv222[rsp], 0
$LN36@SubscribeE:
  004ec	83 bc 24 b4 01
	00 00 00	 cmp	 DWORD PTR tv222[rsp], 0
  004f4	75 0d		 jne	 SHORT $LN37@SubscribeE
  004f6	c7 84 24 b8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv256[rsp], 0
  00501	eb 0b		 jmp	 SHORT $LN38@SubscribeE
$LN37@SubscribeE:
  00503	c7 84 24 b8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv256[rsp], 1
$LN38@SubscribeE:
  0050e	0f b6 84 24 b8
	01 00 00	 movzx	 eax, BYTE PTR tv256[rsp]
  00516	88 84 24 80 00
	00 00		 mov	 BYTE PTR b$24[rsp], al

; 40   : 	return lhs * b + rhs * !b;

  0051d	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR b$24[rsp]
  00525	85 c0		 test	 eax, eax
  00527	75 0d		 jne	 SHORT $LN39@SubscribeE
  00529	c7 84 24 bc 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv262[rsp], 1
  00534	eb 0b		 jmp	 SHORT $LN40@SubscribeE
$LN39@SubscribeE:
  00536	c7 84 24 bc 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv262[rsp], 0
$LN40@SubscribeE:
  00541	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR b$24[rsp]
  00549	8b 4c 24 78	 mov	 ecx, DWORD PTR lhs$[rsp]
  0054d	0f af c8	 imul	 ecx, eax
  00550	8b c1		 mov	 eax, ecx
  00552	6b 8c 24 bc 01
	00 00 01	 imul	 ecx, DWORD PTR tv262[rsp], 1
  0055a	03 c1		 add	 eax, ecx
  0055c	89 44 24 60	 mov	 DWORD PTR $T21[rsp], eax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 66   : 	nodeSection = IMax(noOfCellChecks / NUM_THREADS, 1);

  00560	8b 44 24 60	 mov	 eax, DWORD PTR $T21[rsp]
  00564	89 05 00 00 00
	00		 mov	 DWORD PTR nodeSection, eax

; 67   : 	nodeExcess = noOfCellChecks % NUM_THREADS;

  0056a	33 d2		 xor	 edx, edx
  0056c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfCellChecks
  00572	b9 0a 00 00 00	 mov	 ecx, 10
  00577	f7 f1		 div	 ecx
  00579	8b c2		 mov	 eax, edx
  0057b	89 05 00 00 00
	00		 mov	 DWORD PTR nodeExcess, eax

; 68   : 	endOfNodes = IMax(noOfCellChecks - nodeExcess, NUM_THREADS);

  00581	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR nodeExcess
  00587	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR noOfCellChecks
  0058d	2b c8		 sub	 ecx, eax
  0058f	8b c1		 mov	 eax, ecx
  00591	89 44 24 68	 mov	 DWORD PTR lhs$[rsp], eax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h

; 39   : 	bool b = lhs >= rhs;

  00595	83 7c 24 68 0a	 cmp	 DWORD PTR lhs$[rsp], 10
  0059a	7c 0d		 jl	 SHORT $LN43@SubscribeE
  0059c	c7 84 24 c0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv176[rsp], 1
  005a7	eb 0b		 jmp	 SHORT $LN44@SubscribeE
$LN43@SubscribeE:
  005a9	c7 84 24 c0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv176[rsp], 0
$LN44@SubscribeE:
  005b4	83 bc 24 c0 01
	00 00 00	 cmp	 DWORD PTR tv176[rsp], 0
  005bc	75 0d		 jne	 SHORT $LN45@SubscribeE
  005be	c7 84 24 c4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv266[rsp], 0
  005c9	eb 0b		 jmp	 SHORT $LN46@SubscribeE
$LN45@SubscribeE:
  005cb	c7 84 24 c4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv266[rsp], 1
$LN46@SubscribeE:
  005d6	0f b6 84 24 c4
	01 00 00	 movzx	 eax, BYTE PTR tv266[rsp]
  005de	88 44 24 70	 mov	 BYTE PTR b$23[rsp], al

; 40   : 	return lhs * b + rhs * !b;

  005e2	0f b6 44 24 70	 movzx	 eax, BYTE PTR b$23[rsp]
  005e7	85 c0		 test	 eax, eax
  005e9	75 0d		 jne	 SHORT $LN47@SubscribeE
  005eb	c7 84 24 c8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv272[rsp], 1
  005f6	eb 0b		 jmp	 SHORT $LN48@SubscribeE
$LN47@SubscribeE:
  005f8	c7 84 24 c8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv272[rsp], 0
$LN48@SubscribeE:
  00603	0f b6 44 24 70	 movzx	 eax, BYTE PTR b$23[rsp]
  00608	8b 4c 24 68	 mov	 ecx, DWORD PTR lhs$[rsp]
  0060c	0f af c8	 imul	 ecx, eax
  0060f	8b c1		 mov	 eax, ecx
  00611	6b 8c 24 c8 01
	00 00 0a	 imul	 ecx, DWORD PTR tv272[rsp], 10
  00619	03 c1		 add	 eax, ecx
  0061b	89 44 24 64	 mov	 DWORD PTR $T22[rsp], eax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 68   : 	endOfNodes = IMax(noOfCellChecks - nodeExcess, NUM_THREADS);

  0061f	8b 44 24 64	 mov	 eax, DWORD PTR $T22[rsp]
  00623	89 05 00 00 00
	00		 mov	 DWORD PTR endOfNodes, eax

; 69   : 	totalCheckedCells = realloc(totalCheckedCells, sizeof(cellChecks) * noOfCellChecks);

  00629	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR noOfCellChecks
  0062f	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv185[rsp], rax
  00637	b8 18 00 00 00	 mov	 eax, 24
  0063c	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR tv185[rsp]
  00644	48 f7 e1	 mul	 rcx
  00647	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  0064e	48 0f 42 c1	 cmovb	 rax, rcx
  00652	48 8b d0	 mov	 rdx, rax
  00655	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR totalCheckedCells
  0065c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc
  00662	48 89 05 00 00
	00 00		 mov	 QWORD PTR totalCheckedCells, rax

; 70   : 	return this;

  00669	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]

; 71   : }

  0066e	48 8b f8	 mov	 rdi, rax
  00671	48 8b cc	 mov	 rcx, rsp
  00674	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:SubscribeEntity_Without_Scale$rtcFrameData
  0067b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00680	48 8b c7	 mov	 rax, rdi
  00683	48 81 c4 e0 01
	00 00		 add	 rsp, 480		; 000001e0H
  0068a	5f		 pop	 rdi
  0068b	c3		 ret	 0
SubscribeEntity_Without_Scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\EntityManager.h
;	COMDAT RemoveEntAppropriate
_TEXT	SEGMENT
tv76 = 32
entity$ = 64
RemoveEntAppropriate PROC				; COMDAT

; 167  : inline void RemoveEntAppropriate(Entity* entity) {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__211DB995_corecrt_malloc@h
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 168  : 	if (entity->pastCellPosition.x == -1) return;

  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR entity$[rsp]
  0001b	83 78 0c ff	 cmp	 DWORD PTR [rax+12], -1
  0001f	75 02		 jne	 SHORT $LN2@RemoveEntA
  00021	eb 5b		 jmp	 SHORT $LN1@RemoveEntA
$LN2@RemoveEntA:

; 169  : 	RemoveEntity(entity, (entity->pastCellPosition.x == GRID_COUNT_X_INT + 1 ? &mainColHead : &cells[entity->pastCellPosition.x][entity->pastCellPosition.y]));

  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR entity$[rsp]
  00028	81 78 0c 01 04
	00 00		 cmp	 DWORD PTR [rax+12], 1025 ; 00000401H
  0002f	75 0e		 jne	 SHORT $LN4@RemoveEntA
  00031	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:mainColHead
  00038	48 89 44 24 20	 mov	 QWORD PTR tv76[rsp], rax
  0003d	eb 2f		 jmp	 SHORT $LN5@RemoveEntA
$LN4@RemoveEntA:
  0003f	48 8b 44 24 40	 mov	 rax, QWORD PTR entity$[rsp]
  00044	48 63 40 0c	 movsxd	 rax, DWORD PTR [rax+12]
  00048	48 69 c0 00 20
	00 00		 imul	 rax, rax, 8192		; 00002000H
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cells
  00056	48 03 c8	 add	 rcx, rax
  00059	48 8b c1	 mov	 rax, rcx
  0005c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR entity$[rsp]
  00061	48 63 49 10	 movsxd	 rcx, DWORD PTR [rcx+16]
  00065	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  00069	48 89 44 24 20	 mov	 QWORD PTR tv76[rsp], rax
$LN5@RemoveEntA:
  0006e	48 8b 54 24 20	 mov	 rdx, QWORD PTR tv76[rsp]
  00073	48 8b 4c 24 40	 mov	 rcx, QWORD PTR entity$[rsp]
  00078	e8 00 00 00 00	 call	 RemoveEntity
  0007d	90		 npad	 1
$LN1@RemoveEntA:

; 170  : }

  0007e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00082	5f		 pop	 rdi
  00083	c3		 ret	 0
RemoveEntAppropriate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.h
;	COMDAT RemoveSliderNode
_TEXT	SEGMENT
previous$ = 32
next$ = 40
remove$ = 64
RemoveSliderNode PROC					; COMDAT

; 14   : inline void RemoveSliderNode(SliderList* remove) {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D1DC2946_EntityManager@h
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 15   : 	Remove2(remove, sliderHead, SliderList);

  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR remove$[rsp]
  0001b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0001f	48 89 44 24 20	 mov	 QWORD PTR previous$[rsp], rax
  00024	48 8b 44 24 40	 mov	 rax, QWORD PTR remove$[rsp]
  00029	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0002d	48 89 44 24 28	 mov	 QWORD PTR next$[rsp], rax
  00032	48 83 7c 24 28
	00		 cmp	 QWORD PTR next$[rsp], 0
  00038	74 0e		 je	 SHORT $LN2@RemoveSlid
  0003a	48 8b 44 24 28	 mov	 rax, QWORD PTR next$[rsp]
  0003f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR previous$[rsp]
  00044	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN2@RemoveSlid:
  00048	48 83 7c 24 20
	00		 cmp	 QWORD PTR previous$[rsp], 0
  0004e	74 10		 je	 SHORT $LN3@RemoveSlid
  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR previous$[rsp]
  00055	48 8b 4c 24 28	 mov	 rcx, QWORD PTR next$[rsp]
  0005a	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0005e	eb 0c		 jmp	 SHORT $LN4@RemoveSlid
$LN3@RemoveSlid:
  00060	48 8b 44 24 28	 mov	 rax, QWORD PTR next$[rsp]
  00065	48 89 05 00 00
	00 00		 mov	 QWORD PTR sliderHead, rax
$LN4@RemoveSlid:
  0006c	48 8b 44 24 40	 mov	 rax, QWORD PTR remove$[rsp]
  00071	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00079	48 8b 44 24 40	 mov	 rax, QWORD PTR remove$[rsp]
  0007e	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 16   : }

  00086	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008a	5f		 pop	 rdi
  0008b	c3		 ret	 0
RemoveSliderNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\math.h
;	COMDAT IMax
_TEXT	SEGMENT
b$ = 32
tv65 = 36
tv67 = 40
tv73 = 44
lhs$ = 64
rhs$ = 72
IMax	PROC						; COMDAT

; 38   : inline int IMax(int lhs, int rhs) {

$LN9:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	57		 push	 rdi
  00009	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__46B7CB64_math@h
  00014	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 39   : 	bool b = lhs >= rhs;

  00019	8b 44 24 48	 mov	 eax, DWORD PTR rhs$[rsp]
  0001d	39 44 24 40	 cmp	 DWORD PTR lhs$[rsp], eax
  00021	7c 0a		 jl	 SHORT $LN3@IMax
  00023	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv65[rsp], 1
  0002b	eb 08		 jmp	 SHORT $LN4@IMax
$LN3@IMax:
  0002d	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv65[rsp], 0
$LN4@IMax:
  00035	83 7c 24 24 00	 cmp	 DWORD PTR tv65[rsp], 0
  0003a	75 0a		 jne	 SHORT $LN5@IMax
  0003c	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv67[rsp], 0
  00044	eb 08		 jmp	 SHORT $LN6@IMax
$LN5@IMax:
  00046	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv67[rsp], 1
$LN6@IMax:
  0004e	0f b6 44 24 28	 movzx	 eax, BYTE PTR tv67[rsp]
  00053	88 44 24 20	 mov	 BYTE PTR b$[rsp], al

; 40   : 	return lhs * b + rhs * !b;

  00057	0f b6 44 24 20	 movzx	 eax, BYTE PTR b$[rsp]
  0005c	85 c0		 test	 eax, eax
  0005e	75 0a		 jne	 SHORT $LN7@IMax
  00060	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
  00068	eb 08		 jmp	 SHORT $LN8@IMax
$LN7@IMax:
  0006a	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
$LN8@IMax:
  00072	0f b6 44 24 20	 movzx	 eax, BYTE PTR b$[rsp]
  00077	8b 4c 24 40	 mov	 ecx, DWORD PTR lhs$[rsp]
  0007b	0f af c8	 imul	 ecx, eax
  0007e	8b c1		 mov	 eax, ecx
  00080	8b 4c 24 48	 mov	 ecx, DWORD PTR rhs$[rsp]
  00084	0f af 4c 24 2c	 imul	 ecx, DWORD PTR tv73[rsp]
  00089	03 c1		 add	 eax, ecx

; 41   : }

  0008b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008f	5f		 pop	 rdi
  00090	c3		 ret	 0
IMax	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
_TEXT	SEGMENT
add$ = 48
InsertAtMainHead PROC

; 21   : void InsertAtMainHead(entityNode * add) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__460EF0CE_EntityManager@c
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 22   : 	add->next = entityHead;

  00016	48 8b 44 24 30	 mov	 rax, QWORD PTR add$[rsp]
  0001b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR entityHead
  00022	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 23   : 	add->prev = NULL;

  00026	48 8b 44 24 30	 mov	 rax, QWORD PTR add$[rsp]
  0002b	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 24   : 	if (entityHead) entityHead->prev = add;

  00033	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR entityHead, 0
  0003b	74 10		 je	 SHORT $LN2@InsertAtMa
  0003d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR entityHead
  00044	48 8b 4c 24 30	 mov	 rcx, QWORD PTR add$[rsp]
  00049	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN2@InsertAtMa:

; 25   : 	entityHead = add;

  0004d	48 8b 44 24 30	 mov	 rax, QWORD PTR add$[rsp]
  00052	48 89 05 00 00
	00 00		 mov	 QWORD PTR entityHead, rax

; 26   : 	return add;

  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR add$[rsp]

; 27   : }

  0005e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00062	5f		 pop	 rdi
  00063	c3		 ret	 0
InsertAtMainHead ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
_TEXT	SEGMENT
toDelete$ = 48
DeleteHealthbar PROC

; 86   : void DeleteHealthbar(HealthBar* toDelete) {//TODO: make this function

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__460EF0CE_EntityManager@c
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00016	90		 npad	 1

; 87   : 
; 88   : }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5f		 pop	 rdi
  0001c	c3		 ret	 0
DeleteHealthbar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
_TEXT	SEGMENT
toDelete$ = 48
DeleteSquishable PROC

; 89   : void DeleteSquishable(squishList* toDelete) {//TODO: make this function

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__460EF0CE_EntityManager@c
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00016	90		 npad	 1

; 90   : 	return;
; 91   : }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5f		 pop	 rdi
  0001c	c3		 ret	 0
DeleteSquishable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
_TEXT	SEGMENT
_this$ = 32
add$ = 64
SubscribeSquishable PROC

; 92   : squishList* SubscribeSquishable(SquishableMesh* add) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__460EF0CE_EntityManager@c
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 93   : 	squishList* _this = malloc(sizeof(squishList));

  00016	b9 18 00 00 00	 mov	 ecx, 24
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00021	48 89 44 24 20	 mov	 QWORD PTR _this$[rsp], rax

; 94   : 	add->origXMinY = vertices[add->meshLocation + stride];

  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR add$[rsp]
  0002b	8b 00		 mov	 eax, DWORD PTR [rax]
  0002d	03 05 00 00 00
	00		 add	 eax, DWORD PTR stride
  00033	8b c0		 mov	 eax, eax
  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR add$[rsp]
  0003a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR vertices
  00041	f3 0f 10 04 82	 movss	 xmm0, DWORD PTR [rdx+rax*4]
  00046	f3 0f 11 41 0c	 movss	 DWORD PTR [rcx+12], xmm0

; 95   : 	add->origXMaxY = vertices[add->meshLocation + stride * 2];

  0004b	48 8b 44 24 40	 mov	 rax, QWORD PTR add$[rsp]
  00050	8b 00		 mov	 eax, DWORD PTR [rax]
  00052	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR stride
  00058	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  0005b	8b c0		 mov	 eax, eax
  0005d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR add$[rsp]
  00062	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR vertices
  00069	f3 0f 10 04 82	 movss	 xmm0, DWORD PTR [rdx+rax*4]
  0006e	f3 0f 11 41 08	 movss	 DWORD PTR [rcx+8], xmm0

; 96   : 	_this->value = add;

  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR _this$[rsp]
  00078	48 8b 4c 24 40	 mov	 rcx, QWORD PTR add$[rsp]
  0007d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 97   : 	Insert(_this, add, squishHead);

  00080	48 8b 44 24 20	 mov	 rax, QWORD PTR _this$[rsp]
  00085	48 8b 4c 24 40	 mov	 rcx, QWORD PTR add$[rsp]
  0008a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0008d	48 8b 44 24 20	 mov	 rax, QWORD PTR _this$[rsp]
  00092	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR squishHead
  00099	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0009d	48 8b 44 24 20	 mov	 rax, QWORD PTR _this$[rsp]
  000a2	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0
  000aa	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR squishHead, 0
  000b2	74 10		 je	 SHORT $LN2@SubscribeS
  000b4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR squishHead
  000bb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _this$[rsp]
  000c0	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN2@SubscribeS:
  000c4	48 8b 44 24 20	 mov	 rax, QWORD PTR _this$[rsp]
  000c9	48 89 05 00 00
	00 00		 mov	 QWORD PTR squishHead, rax

; 98   : 	return _this;

  000d0	48 8b 44 24 20	 mov	 rax, QWORD PTR _this$[rsp]

; 99   : }

  000d5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d9	5f		 pop	 rdi
  000da	c3		 ret	 0
SubscribeSquishable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
_TEXT	SEGMENT
entity$ = 32
aabbSize$ = 40
this$ = 48
$T8 = 56
$T9 = 64
a$ = 88
_this$10 = 120
lhs$ = 152
rhs$ = 184
_this$11 = 216
AABB$ = 272
CreateCollider PROC

; 109  : entityNode* CreateCollider(Vector2 AABB[2]) {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR [rsp+272]
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__460EF0CE_EntityManager@c
  0002e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 110  : 	Entity* entity = malloc(sizeof(Entity));

  00033	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0003e	48 89 44 24 20	 mov	 QWORD PTR entity$[rsp], rax

; 111  : 	rsize_t aabbSize = sizeof(Vector2) * AABB_NUM_POINTS;

  00043	48 c7 44 24 28
	10 00 00 00	 mov	 QWORD PTR aabbSize$[rsp], 16

; 112  : 	memcpy(entity->origAABB, AABB, aabbSize);

  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR entity$[rsp]
  00051	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  00055	48 8b f8	 mov	 rdi, rax
  00058	48 8b b4 24 10
	01 00 00	 mov	 rsi, QWORD PTR AABB$[rsp]
  00060	48 8b 4c 24 28	 mov	 rcx, QWORD PTR aabbSize$[rsp]
  00065	f3 a4		 rep movsb

; 113  : 	memcpy(entity->trueAABB, entity->origAABB, aabbSize);

  00067	48 8b 44 24 20	 mov	 rax, QWORD PTR entity$[rsp]
  0006c	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  00070	48 8b 4c 24 20	 mov	 rcx, QWORD PTR entity$[rsp]
  00075	48 83 c1 3c	 add	 rcx, 60			; 0000003cH
  00079	48 8b f9	 mov	 rdi, rcx
  0007c	48 8b f0	 mov	 rsi, rax
  0007f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR aabbSize$[rsp]
  00084	f3 a4		 rep movsb

; 114  : 	entity->origMidpoint = VectorDivByScalar(AddVectors(AABB[1], *AABB), 2.0f);

  00086	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR AABB$[rsp]
  0008e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00091	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR rhs$[rsp], rax
  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 01	 imul	 rax, rax, 1
  000a2	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR AABB$[rsp]
  000aa	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000ae	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR lhs$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h

; 35   : 	_this.x = lhs.x + rhs.x;

  000b6	f3 0f 10 84 24
	98 00 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp]
  000bf	f3 0f 58 84 24
	b8 00 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp]
  000c8	f3 0f 11 84 24
	d8 00 00 00	 movss	 DWORD PTR _this$11[rsp], xmm0

; 36   : 	_this.y = lhs.y + rhs.y;

  000d1	f3 0f 10 84 24
	9c 00 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  000da	f3 0f 58 84 24
	bc 00 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp+4]
  000e3	f3 0f 11 84 24
	dc 00 00 00	 movss	 DWORD PTR _this$11[rsp+4], xmm0

; 37   : 	return _this;

  000ec	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR _this$11[rsp]
  000f4	48 89 44 24 38	 mov	 QWORD PTR $T8[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 114  : 	entity->origMidpoint = VectorDivByScalar(AddVectors(AABB[1], *AABB), 2.0f);

  000f9	48 8b 44 24 38	 mov	 rax, QWORD PTR $T8[rsp]
  000fe	48 89 44 24 58	 mov	 QWORD PTR a$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h

; 129  : 	_this.x = a.x / b;

  00103	f3 0f 10 44 24
	58		 movss	 xmm0, DWORD PTR a$[rsp]
  00109	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00111	f3 0f 11 44 24
	78		 movss	 DWORD PTR _this$10[rsp], xmm0

; 130  : 	_this.y = a.y / b;

  00117	f3 0f 10 44 24
	5c		 movss	 xmm0, DWORD PTR a$[rsp+4]
  0011d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00125	f3 0f 11 44 24
	7c		 movss	 DWORD PTR _this$10[rsp+4], xmm0

; 131  : 	return _this;

  0012b	48 8b 44 24 78	 mov	 rax, QWORD PTR _this$10[rsp]
  00130	48 89 44 24 40	 mov	 QWORD PTR $T9[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 114  : 	entity->origMidpoint = VectorDivByScalar(AddVectors(AABB[1], *AABB), 2.0f);

  00135	48 8b 44 24 40	 mov	 rax, QWORD PTR $T9[rsp]
  0013a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR entity$[rsp]
  0013f	48 89 41 1c	 mov	 QWORD PTR [rcx+28], rax

; 115  : 	entity->physicsData = NULL;

  00143	48 8b 44 24 20	 mov	 rax, QWORD PTR entity$[rsp]
  00148	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 116  : 	entity->pastCellPosition.x = -1;

  0014f	48 8b 44 24 20	 mov	 rax, QWORD PTR entity$[rsp]
  00154	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [rax+12], -1

; 117  : 	entityNode* this = SubscribeEntity(entity);

  0015b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR entity$[rsp]
  00160	e8 00 00 00 00	 call	 SubscribeEntity
  00165	48 89 44 24 30	 mov	 QWORD PTR this$[rsp], rax

; 118  : 	return this;

  0016a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]

; 119  : }

  0016f	48 8b f8	 mov	 rdi, rax
  00172	48 8b cc	 mov	 rcx, rsp
  00175	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:CreateCollider$rtcFrameData
  0017c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00181	48 8b c7	 mov	 rax, rdi
  00184	48 81 c4 f8 00
	00 00		 add	 rsp, 248		; 000000f8H
  0018b	5f		 pop	 rdi
  0018c	5e		 pop	 rsi
  0018d	c3		 ret	 0
CreateCollider ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
_TEXT	SEGMENT
AABB$ = 48
tag$ = 56
layer$ = 64
CreateColAndSetPts PROC

; 133  : entityNode* CreateColAndSetPts(Vector2 AABB[2], int tag, int layer) {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__460EF0CE_EntityManager@c
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 134  : 	CreateCollider2(AABB, tag, layer);

  0001f	44 8b 44 24 40	 mov	 r8d, DWORD PTR layer$[rsp]
  00024	8b 54 24 38	 mov	 edx, DWORD PTR tag$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR AABB$[rsp]
  0002d	e8 00 00 00 00	 call	 CreateCollider2
  00032	90		 npad	 1

; 135  : 
; 136  : }

  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
CreateColAndSetPts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c
_TEXT	SEGMENT
entity$ = 32
aabbSize$ = 40
this$ = 48
$T11 = 56
$T12 = 64
$T13 = 72
lhs$ = 88
rhs$ = 120
_this$14 = 152
a$ = 184
_this$15 = 216
lhs$ = 248
rhs$ = 280
_this$16 = 312
AABB$ = 368
tag$ = 376
layer$ = 384
addToMidPt$ = 392
CreateCollider3 PROC

; 137  : entityNode* CreateCollider3(Vector2 AABB[2], int tag, int layer, Vector2 addToMidPt) {

$LN9:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001c	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00021	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR [rsp+368]
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__460EF0CE_EntityManager@c
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 138  : 	Entity* entity = malloc(sizeof(Entity));

  00041	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0004c	48 89 44 24 20	 mov	 QWORD PTR entity$[rsp], rax

; 139  : 	rsize_t aabbSize = sizeof(Vector2) * AABB_NUM_POINTS;

  00051	48 c7 44 24 28
	10 00 00 00	 mov	 QWORD PTR aabbSize$[rsp], 16

; 140  : 	memcpy(entity->origAABB, AABB, aabbSize);

  0005a	48 8b 44 24 20	 mov	 rax, QWORD PTR entity$[rsp]
  0005f	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  00063	48 8b f8	 mov	 rdi, rax
  00066	48 8b b4 24 70
	01 00 00	 mov	 rsi, QWORD PTR AABB$[rsp]
  0006e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR aabbSize$[rsp]
  00073	f3 a4		 rep movsb

; 141  : 	memcpy(entity->trueAABB, entity->origAABB, aabbSize);

  00075	48 8b 44 24 20	 mov	 rax, QWORD PTR entity$[rsp]
  0007a	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  0007e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR entity$[rsp]
  00083	48 83 c1 3c	 add	 rcx, 60			; 0000003cH
  00087	48 8b f9	 mov	 rdi, rcx
  0008a	48 8b f0	 mov	 rsi, rax
  0008d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR aabbSize$[rsp]
  00092	f3 a4		 rep movsb

; 142  : 	entity->midPoint = AddVectors(entity->origMidpoint = VectorDivByScalar(AddVectors(AABB[1], *AABB), 2.0f), addToMidPt);

  00094	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR AABB$[rsp]
  0009c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009f	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR rhs$[rsp], rax
  000a7	b8 08 00 00 00	 mov	 eax, 8
  000ac	48 6b c0 01	 imul	 rax, rax, 1
  000b0	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR AABB$[rsp]
  000b8	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000bc	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR lhs$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h

; 35   : 	_this.x = lhs.x + rhs.x;

  000c4	f3 0f 10 84 24
	f8 00 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp]
  000cd	f3 0f 58 84 24
	18 01 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp]
  000d6	f3 0f 11 84 24
	38 01 00 00	 movss	 DWORD PTR _this$16[rsp], xmm0

; 36   : 	_this.y = lhs.y + rhs.y;

  000df	f3 0f 10 84 24
	fc 00 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  000e8	f3 0f 58 84 24
	1c 01 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp+4]
  000f1	f3 0f 11 84 24
	3c 01 00 00	 movss	 DWORD PTR _this$16[rsp+4], xmm0

; 37   : 	return _this;

  000fa	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR _this$16[rsp]
  00102	48 89 44 24 38	 mov	 QWORD PTR $T11[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 142  : 	entity->midPoint = AddVectors(entity->origMidpoint = VectorDivByScalar(AddVectors(AABB[1], *AABB), 2.0f), addToMidPt);

  00107	48 8b 44 24 38	 mov	 rax, QWORD PTR $T11[rsp]
  0010c	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR a$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h

; 129  : 	_this.x = a.x / b;

  00114	f3 0f 10 84 24
	b8 00 00 00	 movss	 xmm0, DWORD PTR a$[rsp]
  0011d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00125	f3 0f 11 84 24
	d8 00 00 00	 movss	 DWORD PTR _this$15[rsp], xmm0

; 130  : 	_this.y = a.y / b;

  0012e	f3 0f 10 84 24
	bc 00 00 00	 movss	 xmm0, DWORD PTR a$[rsp+4]
  00137	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0013f	f3 0f 11 84 24
	dc 00 00 00	 movss	 DWORD PTR _this$15[rsp+4], xmm0

; 131  : 	return _this;

  00148	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR _this$15[rsp]
  00150	48 89 44 24 40	 mov	 QWORD PTR $T12[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 142  : 	entity->midPoint = AddVectors(entity->origMidpoint = VectorDivByScalar(AddVectors(AABB[1], *AABB), 2.0f), addToMidPt);

  00155	48 8b 44 24 40	 mov	 rax, QWORD PTR $T12[rsp]
  0015a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR entity$[rsp]
  0015f	48 89 41 1c	 mov	 QWORD PTR [rcx+28], rax
  00163	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR addToMidPt$[rsp]
  0016b	48 89 44 24 78	 mov	 QWORD PTR rhs$[rsp], rax
  00170	48 8b 44 24 20	 mov	 rax, QWORD PTR entity$[rsp]
  00175	48 8b 40 1c	 mov	 rax, QWORD PTR [rax+28]
  00179	48 89 44 24 58	 mov	 QWORD PTR lhs$[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\vectors.h

; 35   : 	_this.x = lhs.x + rhs.x;

  0017e	f3 0f 10 44 24
	58		 movss	 xmm0, DWORD PTR lhs$[rsp]
  00184	f3 0f 58 44 24
	78		 addss	 xmm0, DWORD PTR rhs$[rsp]
  0018a	f3 0f 11 84 24
	98 00 00 00	 movss	 DWORD PTR _this$14[rsp], xmm0

; 36   : 	_this.y = lhs.y + rhs.y;

  00193	f3 0f 10 44 24
	5c		 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  00199	f3 0f 58 44 24
	7c		 addss	 xmm0, DWORD PTR rhs$[rsp+4]
  0019f	f3 0f 11 84 24
	9c 00 00 00	 movss	 DWORD PTR _this$14[rsp+4], xmm0

; 37   : 	return _this;

  001a8	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR _this$14[rsp]
  001b0	48 89 44 24 48	 mov	 QWORD PTR $T13[rsp], rax
; File C:\Users\drago\source\repos\cGame - less comments\cGame\entityAdder.c

; 142  : 	entity->midPoint = AddVectors(entity->origMidpoint = VectorDivByScalar(AddVectors(AABB[1], *AABB), 2.0f), addToMidPt);

  001b5	48 8b 44 24 48	 mov	 rax, QWORD PTR $T13[rsp]
  001ba	48 8b 4c 24 20	 mov	 rcx, QWORD PTR entity$[rsp]
  001bf	48 89 41 14	 mov	 QWORD PTR [rcx+20], rax

; 143  : 	entity->physicsData = NULL;

  001c3	48 8b 44 24 20	 mov	 rax, QWORD PTR entity$[rsp]
  001c8	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 144  : 	entity->tag = tag;

  001cf	48 8b 44 24 20	 mov	 rax, QWORD PTR entity$[rsp]
  001d4	8b 8c 24 78 01
	00 00		 mov	 ecx, DWORD PTR tag$[rsp]
  001db	89 48 24	 mov	 DWORD PTR [rax+36], ecx

; 145  : 	entity->layer = layer;

  001de	48 8b 44 24 20	 mov	 rax, QWORD PTR entity$[rsp]
  001e3	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR layer$[rsp]
  001ea	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 146  : 	entity->pastCellPosition.x = -1;

  001ed	48 8b 44 24 20	 mov	 rax, QWORD PTR entity$[rsp]
  001f2	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [rax+12], -1

; 147  : 	entityNode* this = SubscribeEntity(entity);

  001f9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR entity$[rsp]
  001fe	e8 00 00 00 00	 call	 SubscribeEntity
  00203	48 89 44 24 30	 mov	 QWORD PTR this$[rsp], rax

; 148  : 	return this;

  00208	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]

; 149  : }

  0020d	48 8b f8	 mov	 rdi, rax
  00210	48 8b cc	 mov	 rcx, rsp
  00213	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:CreateCollider3$rtcFrameData
  0021a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0021f	48 8b c7	 mov	 rax, rdi
  00222	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00229	5f		 pop	 rdi
  0022a	5e		 pop	 rsi
  0022b	c3		 ret	 0
CreateCollider3 ENDP
_TEXT	ENDS
END
END
