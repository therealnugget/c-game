; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35211.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	texcoordTemplate
PUBLIC	positionTemplate
PUBLIC	quadTemplate
PUBLIC	colorTemplate
PUBLIC	indiciesTemplate
PUBLIC	textureIDs
PUBLIC	??_C@_0M@CPJNCKHG@version?5?$CFs?6@		; `string'
PUBLIC	??_C@_0N@CHKJAACA@Basic?4shader@		; `string'
PUBLIC	??_C@_0M@KCEEINPE@vertex?3?6?$CFs?6@		; `string'
PUBLIC	??_C@_0O@IECILAIG@framgent?3?6?$CFs?6@		; `string'
PUBLIC	??_C@_07BGCMGBLA@u_Color@			; `string'
PUBLIC	??_C@_0L@MHMCDAGK@u_elapsedT@			; `string'
PUBLIC	??_C@_09FBCBHDFN@u_Texture@			; `string'
PUBLIC	??_C@_0M@FOABEBJH@u_cameraPos@			; `string'
PUBLIC	atlasIndexBuffer
PUBLIC	atlasTexCoords
PUBLIC	textureSlotTemplate
EXTRN	__imp___glewUniform4f:QWORD
EXTRN	__imp_glGetString:PROC
EXTRN	__imp___glewGenBuffers:QWORD
EXTRN	__imp___glewUniform1f:QWORD
EXTRN	__imp___glewUniform1iv:QWORD
EXTRN	__imp___glewBindBuffer:QWORD
EXTRN	__imp___glewVertexAttribPointer:QWORD
EXTRN	__imp___glewUseProgram:QWORD
EXTRN	__imp___glewEnableVertexAttribArray:QWORD
textureSlotTemplate DD 04H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0M@FOABEBJH@u_cameraPos@
CONST	SEGMENT
??_C@_0M@FOABEBJH@u_cameraPos@ DB 'u_cameraPos', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FBCBHDFN@u_Texture@
CONST	SEGMENT
??_C@_09FBCBHDFN@u_Texture@ DB 'u_Texture', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MHMCDAGK@u_elapsedT@
CONST	SEGMENT
??_C@_0L@MHMCDAGK@u_elapsedT@ DB 'u_elapsedT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BGCMGBLA@u_Color@
CONST	SEGMENT
??_C@_07BGCMGBLA@u_Color@ DB 'u_Color', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IECILAIG@framgent?3?6?$CFs?6@
CONST	SEGMENT
??_C@_0O@IECILAIG@framgent?3?6?$CFs?6@ DB 'framgent:', 0aH, '%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KCEEINPE@vertex?3?6?$CFs?6@
CONST	SEGMENT
??_C@_0M@KCEEINPE@vertex?3?6?$CFs?6@ DB 'vertex:', 0aH, '%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CHKJAACA@Basic?4shader@
CONST	SEGMENT
??_C@_0N@CHKJAACA@Basic?4shader@ DB 'Basic.shader', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CPJNCKHG@version?5?$CFs?6@
CONST	SEGMENT
??_C@_0M@CPJNCKHG@version?5?$CFs?6@ DB 'version %s', 0aH, 00H ; `string'
	ORG $+2
positionTemplate DD 0be855556r			; -0.260417
	DD	0beed097dr			; -0.462963
	DD	03e855556r			; 0.260417
	DD	0beed097dr			; -0.462963
	DD	03e855556r			; 0.260417
	DD	03eed097dr			; 0.462963
	DD	0be855556r			; -0.260417
	DD	03eed097dr			; 0.462963
quadTemplate DD	0be855556r			; -0.260417
	DD	0beed097dr			; -0.462963
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03e855556r			; 0.260417
	DD	0beed097dr			; -0.462963
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03e855556r			; 0.260417
	DD	03eed097dr			; 0.462963
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	0be855556r			; -0.260417
	DD	03eed097dr			; 0.462963
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
indiciesTemplate DD 00H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	00H
textureIDs DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	09H
	DD	0aH
	DD	0bH
	DD	0cH
	DD	0dH
	DD	0eH
	DD	0fH
	DD	010H
	DD	011H
	DD	012H
	DD	013H
	DD	014H
	DD	015H
	DD	016H
	DD	017H
	DD	018H
	DD	019H
	DD	01aH
	DD	01bH
	DD	01cH
	DD	01dH
	DD	01eH
	DD	01fH
atlasIndexBuffer DB 00H
	DB	01H
	DB	01H
	DB	00H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
atlasTexCoords DB 00H
	ORG $+1
	DW	00H
	DB	00H
	ORG $+1
	DW	01H
	DB	01H
	ORG $+1
	DW	00H
	DB	01H
	ORG $+1
	DW	01H
__4C2AD0C7_winpackagefamily@h DB 01H
__9DED9ED1_winapifamily@h DB 01H
__0B1C67B3_gl@h DB 01H
__D7C03EE9_glu@h DB 01H
__20F17275_glew@h DB 01H
__F2638511_stdbool@h DB 01H
__8C83BECC_concurrencysal@h DB 01H
__608E3340_sal@h DB 01H
__FB67E29A_vadefs@h DB 01H
__1D1B619C_vcruntime@h DB 01H
__735960E1_corecrt@h DB 01H
__955456CD_stddef@h DB 01H
__836A8CFC_stdint@h DB 01H
__0A1327A7_glfw3@h DB 01H
__1D9A7FA2_corecrt_math@h DB 01H
__2E93F1C0_math@h DB 01H
__7570C268_vectors@h DB 01H
__12FEDF4E_sdkddkver@h DB 01H
__9BAEE128_excpt@h DB 01H
__B7B53233_stdarg@h DB 01H
__6B04FCB3_specstrings_undef@h DB 01H
__F4027AF7_specstrings_strict@h DB 01H
__B90340D4_sdv_driverspecs@h DB 01H
__BFFF5AD3_driverspecs@h DB 01H
__32847078_specstrings@h DB 01H
__108B2620_corecrt_wctype@h DB 01H
__6CD6613D_ctype@h DB 01H
__30902A1F_kernelspecs@h DB 01H
__376FD5CA_basetsd@h DB 01H
__13DE2371_errno@h DB 01H
__8C6AE390_vcruntime_string@h DB 01H
__8ACB2152_corecrt_memcpy_s@h DB 01H
__EA6C9D17_corecrt_memory@h DB 01H
__0DF2AF52_corecrt_wstring@h DB 01H
__6E889ECC_string@h DB 01H
__9BEDF4DE_guiddef@h DB 01H
__51BFD2FE_pshpack4@h DB 01H
__31652CEA_poppack@h DB 01H
__5532AE4C_pshpack2@h DB 01H
__58A52B9A_pshpack8@h DB 01H
__57741015_pshpack1@h DB 01H
__CDE68C90_apiset@h DB 01H
__0BF06E8D_ktmtypes@h DB 01H
__40C200C0_winnt@h DB 01H
__9336F789_minwindef@h DB 01H
__55136115_windef@h DB 01H
__32205BF0_apisetcconv@h DB 01H
__B48FDEA0_minwinbase@h DB 01H
__3551B028_apiquery2@h DB 01H
__65BE04AA_processenv@h DB 01H
__4767CA46_fileapi@h DB 01H
__282E6C4B_fileapifromapp@h DB 01H
__393AF12C_debugapi@h DB 01H
__EBC502B8_utilapiset@h DB 01H
__1EAD8C69_handleapi@h DB 01H
__D8EF9B29_errhandlingapi@h DB 01H
__97FC1204_fibersapi@h DB 01H
__27448220_namedpipeapi@h DB 01H
__6EA33B2A_profileapi@h DB 01H
__EAC6F673_heapapi@h DB 01H
__D64EEA5A_ioapiset@h DB 01H
__144BD4B6_synchapi@h DB 01H
__03B1C640_interlockedapi@h DB 01H
__DC64CB38_processthreadsapi@h DB 01H
__D719B518_sysinfoapi@h DB 01H
__410385B1_memoryapi@h DB 01H
__C1AD45EF_enclaveapi@h DB 01H
__F4C3AA32_threadpoollegacyapiset@h DB 01H
__AC5A7A9F_threadpoolapiset@h DB 01H
__F5254B21_jobapi@h DB 01H
__BCEA6EE8_jobapi2@h DB 01H
__D18ACE72_wow64apiset@h DB 01H
__669B0D4A_libloaderapi@h DB 01H
__645F7034_securitybaseapi@h DB 01H
__67E58557_namespaceapi@h DB 01H
__599D9D3A_systemtopologyapi@h DB 01H
__2337E373_processtopologyapi@h DB 01H
__02BFF239_securityappcontainer@h DB 01H
__9C196272_realtimeapiset@h DB 01H
__5AB313A4_winerror@h DB 01H
__B7E7187B_timezoneapi@h DB 01H
__6DE9EB6F_winbase@h DB 01H
__56B2AFF2_wingdi@h DB 01H
__BA1161A9_tvout@h DB 01H
__0501A018_winuser@h DB 01H
__EF12FA99_datetimeapi@h DB 01H
__8FA7C3CA_winnls@h DB 01H
__390F0C47_stringapiset@h DB 01H
__28605B0A_wincontypes@h DB 01H
__BFBDE86D_consoleapi@h DB 01H
__C3CAFBF0_consoleapi2@h DB 01H
__C20891C7_consoleapi3@h DB 01H
__717C98B6_wincon@h DB 01H
__2884C177_verrsrc@h DB 01H
__A3FD3A34_winver@h DB 01H
__6F8AD9F1_reason@h DB 01H
__4C90FD6F_winreg@h DB 01H
__68AFEBAD_wnnc@h DB 01H
__5A7AB086_winnetwk@h DB 01H
__859C3CD3_cderr@h DB 01H
__81B12F1A_dde@h DB 01H
__DD3AF97A_ddeml@h DB 01H
__E6B47715_dlgs@h DB 01H
__944BD57D_lzexpand@h DB 01H
__E4B2DFC7_mmsyscom@h DB 01H
__5287D88F_mciapi@h DB 01H
__DBDC1384_mmiscapi@h DB 01H
__1A78C0D7_mmiscapi2@h DB 01H
__0D05975C_playsoundapi@h DB 01H
__757A63A9_mmeapi@h DB 01H
__6326AB05_timeapi@h DB 01H
__77D483B2_joystickapi@h DB 01H
__59CF7431_mmsystem@h DB 01H
__CEAC417E_nb30@h DB 01H
__3BA1A118_rpcdcep@h DB 01H
__74064437_rpcdce@h DB 01H
__90546602_rpcnsi@h DB 01H
__83114A2C_rpcnterr@h DB 01H
__CA67519E_rpcasync@h DB 01H
__D8CEBCD8_rpc@h DB 01H
__9F43AC2D_shellapi@h DB 01H
__6C8D3703_winperf@h DB 01H
__AB40A29E_inaddr@h DB 01H
__40D4FEA5_winsock@h DB 01H
__51394074_bcrypt@h DB 01H
__F177C154_ncrypt@h DB 01H
__1445529E_dpapi@h DB 01H
__5743FB20_wincrypt@h DB 01H
__97CA12BF_winefs@h DB 01H
__6DF63719_rpcnsip@h DB 01H
__031EFCA1_rpcsal@h DB 01H
__BA08D1DA_rpcndr@h DB 01H
__3A941F83_wtypesbase@h DB 01H
__C244FEE1_wtypes@h DB 01H
__FB7C5F97_winioctl@h DB 01H
__4B65E4AC_winsmcrd@h DB 01H
__1EA80168_winscard@h DB 01H
__516FC0F9_prsht@h DB 01H
__88BA11C6_winspool@h DB 01H
__211DB995_corecrt_malloc@h DB 01H
__99AED4FB_corecrt_search@h DB 01H
__8B813BF6_corecrt_wstdlib@h DB 01H
__3D1CA2C3_limits@h DB 01H
__E8FB0A68_stdlib@h DB 01H
__18DB4C56_unknwnbase@h DB 01H
__1AE6FA1A_objidlbase@h DB 01H
__7F98E437_cguid@h DB 01H
__6B2DFB49_combaseapi@h DB 01H
__CB0E8B37_unknwn@h DB 01H
__D981EF0A_objidl@h DB 01H
__37089EB8_oaidl@h DB 01H
__CA2DDD8B_propidlbase@h DB 01H
__39ED323E_coml2api@h DB 01H
__78E82682_oleidl@h DB 01H
__97883CFE_servprov@h DB 01H
__CE01DDB9_msxml@h DB 01H
__A4784895_urlmon@h DB 01H
__325F1C97_propidl@h DB 01H
__D3D43343_objbase@h DB 01H
__B3A2AF1B_oleauto@h DB 01H
__5722A8AA_ole2@h DB 01H
__590A450A_commdlg@h DB 01H
__2FE8A10C_stralign@h DB 01H
__34558472_winsvc@h DB 01H
__058845F1_mcx@h DB 01H
__7F16006B_ime_cmodes@h DB 01H
__0A3AF599_imm@h DB 01H
__11B87C25_Windows@h DB 01H
__60B45B40_corecrt_stdio_config@h DB 01H
__CFA3741E_corecrt_wstdio@h DB 01H
__B3FE3303_stdio@h DB 01H
__DD0D2CA2_main@h DB 01H
__9378A798_Debug@h DB 01H
__29DBA756_animations@h DB 01H
__A6D01AF2_Physics@h DB 01H
__1408441D_Mesh@h DB 01H
__7CA6EAD6_EntityManager@h DB 01H
__94624A77_Dictionary@h DB 01H
__7BF3DF52_math@h DB 01H
__83DA9D95_Mesh@c DB 01H
texcoordTemplate DD 000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
colorTemplate DD 03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
maxNugRand DQ	0000000100000000H
PUBLIC	ChangeTexCoordTo
PUBLIC	ScaleMeshY
PUBLIC	ScaleMeshX
PUBLIC	ScaleMesh
PUBLIC	MoveMeshTo
PUBLIC	MoveScaleMesh
PUBLIC	MoveMeshY
PUBLIC	MoveMeshX
PUBLIC	MoveScaleMeshY
PUBLIC	MoveScaleMeshX
PUBLIC	DefaultAtlasMesh2
PUBLIC	DefaultAtlasMesh
PUBLIC	vecIndex
PUBLIC	SquishMeshX
PUBLIC	SquishMeshX2
PUBLIC	ChangeMeshColor
PUBLIC	defaultMeshWithColor
PUBLIC	DefaultMeshNotPos
PUBLIC	defaultSMesh
PUBLIC	ChangeTexInd2
PUBLIC	ChangeTexInd
PUBLIC	defaultMesh
PUBLIC	GetOrigVertex
PUBLIC	DeleteSQuad
PUBLIC	DeleteQuad
PUBLIC	CreateSQuadAssign
PUBLIC	CreateQuadAssign
PUBLIC	CreateQuad
PUBLIC	I_InRange
PUBLIC	MeshInitialize
PUBLIC	MeshStartup
pdata	SEGMENT
$pdata$ChangeTexCoordTo DD imagerel $LN18
	DD	imagerel $LN18+380
	DD	imagerel $unwind$ChangeTexCoordTo
$pdata$ScaleMeshY DD imagerel $LN6
	DD	imagerel $LN6+140
	DD	imagerel $unwind$ScaleMeshY
$pdata$ScaleMeshX DD imagerel $LN6
	DD	imagerel $LN6+136
	DD	imagerel $unwind$ScaleMeshX
$pdata$ScaleMesh DD imagerel $LN6
	DD	imagerel $LN6+213
	DD	imagerel $unwind$ScaleMesh
$pdata$MoveMeshTo DD imagerel $LN8
	DD	imagerel $LN8+286
	DD	imagerel $unwind$MoveMeshTo
$pdata$MoveScaleMesh DD imagerel $LN8
	DD	imagerel $LN8+342
	DD	imagerel $unwind$MoveScaleMesh
$pdata$MoveMeshY DD imagerel $LN8
	DD	imagerel $LN8+179
	DD	imagerel $unwind$MoveMeshY
$pdata$MoveMeshX DD imagerel $LN8
	DD	imagerel $LN8+179
	DD	imagerel $unwind$MoveMeshX
$pdata$MoveScaleMeshY DD imagerel $LN8
	DD	imagerel $LN8+191
	DD	imagerel $unwind$MoveScaleMeshY
$pdata$MoveScaleMeshX DD imagerel $LN8
	DD	imagerel $LN8+191
	DD	imagerel $unwind$MoveScaleMeshX
$pdata$DefaultAtlasMesh2 DD imagerel $LN24
	DD	imagerel $LN24+747
	DD	imagerel $unwind$DefaultAtlasMesh2
$pdata$DefaultAtlasMesh DD imagerel $LN20
	DD	imagerel $LN20+646
	DD	imagerel $unwind$DefaultAtlasMesh
$pdata$vecIndex DD imagerel $LN5
	DD	imagerel $LN5+105
	DD	imagerel $unwind$vecIndex
$pdata$SquishMeshX DD imagerel $LN10
	DD	imagerel $LN10+361
	DD	imagerel $unwind$SquishMeshX
$pdata$SquishMeshX2 DD imagerel $LN10
	DD	imagerel $LN10+389
	DD	imagerel $unwind$SquishMeshX2
$pdata$ChangeMeshColor DD imagerel $LN18
	DD	imagerel $LN18+649
	DD	imagerel $unwind$ChangeMeshColor
$pdata$defaultMeshWithColor DD imagerel $LN20
	DD	imagerel $LN20+838
	DD	imagerel $unwind$defaultMeshWithColor
$pdata$DefaultMeshNotPos DD imagerel $LN11
	DD	imagerel $LN11+359
	DD	imagerel $unwind$DefaultMeshNotPos
$pdata$defaultSMesh DD imagerel $LN10
	DD	imagerel $LN10+375
	DD	imagerel $unwind$defaultSMesh
$pdata$ChangeTexInd2 DD imagerel $LN6
	DD	imagerel $LN6+127
	DD	imagerel $unwind$ChangeTexInd2
$pdata$ChangeTexInd DD imagerel $LN6
	DD	imagerel $LN6+155
	DD	imagerel $unwind$ChangeTexInd
$pdata$defaultMesh DD imagerel $LN10
	DD	imagerel $LN10+298
	DD	imagerel $unwind$defaultMesh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GetOrigVertex DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$GetOrigVertex
pdata	ENDS
pdata	SEGMENT
$pdata$DeleteSQuad DD imagerel $LN3
	DD	imagerel $LN3+243
	DD	imagerel $unwind$DeleteSQuad
$pdata$DeleteQuad DD imagerel $LN3
	DD	imagerel $LN3+243
	DD	imagerel $unwind$DeleteQuad
$pdata$CreateSQuadAssign DD imagerel $LN4
	DD	imagerel $LN4+284
	DD	imagerel $unwind$CreateSQuadAssign
$pdata$CreateQuadAssign DD imagerel $LN4
	DD	imagerel $LN4+284
	DD	imagerel $unwind$CreateQuadAssign
$pdata$CreateQuad DD imagerel $LN4
	DD	imagerel $LN4+306
	DD	imagerel $unwind$CreateQuad
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$I_InRange DD imagerel $LN7
	DD	imagerel $LN7+104
	DD	imagerel $unwind$I_InRange
pdata	ENDS
pdata	SEGMENT
$pdata$MeshInitialize DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$MeshInitialize
$pdata$MeshStartup DD imagerel $LN3
	DD	imagerel $LN3+837
	DD	imagerel $unwind$MeshStartup
;	COMDAT xdata
xdata	SEGMENT
$unwind$I_InRange DD 021201H
	DD	0700e5212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetOrigVertex DD 020901H
	DD	070053209H
xdata	ENDS
xdata	SEGMENT
$unwind$ChangeTexCoordTo DD 020f01H
	DD	0700b920fH
$unwind$ScaleMeshY DD 020f01H
	DD	0700b520fH
$unwind$ScaleMeshX DD 020f01H
	DD	0700b320fH
$unwind$ScaleMesh DD 021501H
	DD	070115215H
$unwind$MoveMeshTo DD 020e01H
	DD	0700a520eH
$unwind$MoveScaleMesh DD 021301H
	DD	0700f5213H
$unwind$MoveMeshY DD 020f01H
	DD	0700b520fH
$unwind$MoveMeshX DD 020f01H
	DD	0700b520fH
$unwind$MoveScaleMeshY DD 021501H
	DD	070115215H
$unwind$MoveScaleMeshX DD 021501H
	DD	070115215H
$unwind$DefaultAtlasMesh2 DD 023601H
	DD	07016f21dH
$unwind$DefaultAtlasMesh DD 022e01H
	DD	07011d215H
$unwind$vecIndex DD 020f01H
	DD	0700b720fH
$unwind$SquishMeshX DD 020a01H
	DD	07006720aH
$unwind$SquishMeshX2 DD 021001H
	DD	0700c7210H
$unwind$ChangeMeshColor DD 020e01H
	DD	0700ad20eH
$unwind$defaultMeshWithColor DD 021501H
	DD	07011d215H
$unwind$DefaultMeshNotPos DD 021001H
	DD	0700c7210H
$unwind$defaultSMesh DD 021001H
	DD	0700c7210H
$unwind$ChangeTexInd2 DD 021001H
	DD	0700c5210H
$unwind$ChangeTexInd DD 020f01H
	DD	0700b520fH
$unwind$defaultMesh DD 021001H
	DD	0700c7210H
$unwind$DeleteSQuad DD 020a01H
	DD	07006520aH
$unwind$DeleteQuad DD 020a01H
	DD	07006520aH
$unwind$CreateSQuadAssign DD 020a01H
	DD	07006320aH
$unwind$CreateQuadAssign DD 020a01H
	DD	07006320aH
$unwind$CreateQuad DD 020601H
	DD	070025206H
$unwind$MeshInitialize DD 020601H
	DD	070023206H
$unwind$MeshStartup DD 042d19H
	DD	019010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:MeshStartup
	DD	025H
	DD	032bH
DefaultAtlasMesh2$rtcName$0 DB 063H
	DB	075H
	DB	072H
	DB	041H
	DB	074H
	DB	06cH
	DB	061H
	DB	073H
	DB	053H
	DB	074H
	DB	072H
	DB	075H
	DB	063H
	DB	074H
	DB	00H
	ORG $+1
DefaultAtlasMesh2$rtcVarDesc DD 034H
	DD	04H
	DQ	FLAT:DefaultAtlasMesh2$rtcName$0
	ORG $+48
DefaultAtlasMesh2$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:DefaultAtlasMesh2$rtcVarDesc
DefaultAtlasMesh$rtcName$0 DB 063H
	DB	075H
	DB	072H
	DB	041H
	DB	074H
	DB	06cH
	DB	061H
	DB	073H
	DB	053H
	DB	074H
	DB	072H
	DB	075H
	DB	063H
	DB	074H
	DB	00H
	ORG $+1
DefaultAtlasMesh$rtcVarDesc DD 034H
	DD	04H
	DQ	FLAT:DefaultAtlasMesh$rtcName$0
	ORG $+48
DefaultAtlasMesh$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:DefaultAtlasMesh$rtcVarDesc
MeshStartup$rtcName$0 DB 076H
	DB	062H
	DB	06fH
	DB	00H
MeshStartup$rtcName$1 DB 069H
	DB	062H
	DB	06fH
	DB	00H
MeshStartup$rtcName$2 DB 073H
	DB	068H
	DB	061H
	DB	064H
	DB	065H
	DB	072H
	DB	053H
	DB	072H
	DB	063H
	DB	00H
	ORG $+14
MeshStartup$rtcVarDesc DD 078H
	DD	010H
	DQ	FLAT:MeshStartup$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:MeshStartup$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:MeshStartup$rtcName$0
	ORG $+144
MeshStartup$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:MeshStartup$rtcVarDesc
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
vbo$ = 52
vertexSize$ = 72
ibo$ = 84
filepath$ = 104
shaderSrc$ = 120
$T6 = 160
__$ArrayPad$ = 176
MeshStartup PROC

; 126  : void MeshStartup() {

$LN3:
  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000a	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  0000f	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 127  : 	printf("version %s\n", glGetString(GL_VERSION));

  00039	b9 02 1f 00 00	 mov	 ecx, 7938		; 00001f02H
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glGetString
  00044	48 8b d0	 mov	 rdx, rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@CPJNCKHG@version?5?$CFs?6@
  0004e	e8 00 00 00 00	 call	 printf

; 128  : 	uint vbo;
; 129  : 	glGenBuffers(1, &vbo);

  00053	48 8d 54 24 34	 lea	 rdx, QWORD PTR vbo$[rsp]
  00058	b9 01 00 00 00	 mov	 ecx, 1
  0005d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewGenBuffers
  00064	ff 10		 call	 QWORD PTR [rax]

; 130  : 	glBindBuffer(GL_ARRAY_BUFFER, vbo);

  00066	8b 54 24 34	 mov	 edx, DWORD PTR vbo$[rsp]
  0006a	b9 92 88 00 00	 mov	 ecx, 34962		; 00008892H
  0006f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewBindBuffer
  00076	ff 10		 call	 QWORD PTR [rax]

; 131  : 	size_t vertexSize = sizeof(quadTemplate) / 4;

  00078	48 c7 44 24 48
	24 00 00 00	 mov	 QWORD PTR vertexSize$[rsp], 36 ; 00000024H

; 132  : 	glEnableVertexAttribArray(0);

  00081	33 c9		 xor	 ecx, ecx
  00083	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewEnableVertexAttribArray
  0008a	ff 10		 call	 QWORD PTR [rax]

; 133  : 	glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, vertexSize, (const void*)0);

  0008c	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00095	8b 44 24 48	 mov	 eax, DWORD PTR vertexSize$[rsp]
  00099	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0009d	45 33 c9	 xor	 r9d, r9d
  000a0	41 b8 06 14 00
	00		 mov	 r8d, 5126		; 00001406H
  000a6	ba 02 00 00 00	 mov	 edx, 2
  000ab	33 c9		 xor	 ecx, ecx
  000ad	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewVertexAttribPointer
  000b4	ff 10		 call	 QWORD PTR [rax]

; 134  : 	glEnableVertexAttribArray(1);

  000b6	b9 01 00 00 00	 mov	 ecx, 1
  000bb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewEnableVertexAttribArray
  000c2	ff 10		 call	 QWORD PTR [rax]

; 135  : 	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, vertexSize, (const void*)(sizeof(float) * 2));

  000c4	48 c7 44 24 28
	08 00 00 00	 mov	 QWORD PTR [rsp+40], 8
  000cd	8b 44 24 48	 mov	 eax, DWORD PTR vertexSize$[rsp]
  000d1	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000d5	45 33 c9	 xor	 r9d, r9d
  000d8	41 b8 06 14 00
	00		 mov	 r8d, 5126		; 00001406H
  000de	ba 02 00 00 00	 mov	 edx, 2
  000e3	b9 01 00 00 00	 mov	 ecx, 1
  000e8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewVertexAttribPointer
  000ef	ff 10		 call	 QWORD PTR [rax]

; 136  : 	glEnableVertexAttribArray(2);

  000f1	b9 02 00 00 00	 mov	 ecx, 2
  000f6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewEnableVertexAttribArray
  000fd	ff 10		 call	 QWORD PTR [rax]

; 137  : 	glVertexAttribPointer(2, 4, GL_FLOAT, GL_FALSE, vertexSize, (const void*)(sizeof(float) * 4));

  000ff	48 c7 44 24 28
	10 00 00 00	 mov	 QWORD PTR [rsp+40], 16
  00108	8b 44 24 48	 mov	 eax, DWORD PTR vertexSize$[rsp]
  0010c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00110	45 33 c9	 xor	 r9d, r9d
  00113	41 b8 06 14 00
	00		 mov	 r8d, 5126		; 00001406H
  00119	ba 04 00 00 00	 mov	 edx, 4
  0011e	b9 02 00 00 00	 mov	 ecx, 2
  00123	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewVertexAttribPointer
  0012a	ff 10		 call	 QWORD PTR [rax]

; 138  : 	glEnableVertexAttribArray(3);

  0012c	b9 03 00 00 00	 mov	 ecx, 3
  00131	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewEnableVertexAttribArray
  00138	ff 10		 call	 QWORD PTR [rax]

; 139  : 	glVertexAttribPointer(3, 1, GL_FLOAT, GL_FALSE, vertexSize, (const void*)(sizeof(float) * 8));

  0013a	48 c7 44 24 28
	20 00 00 00	 mov	 QWORD PTR [rsp+40], 32	; 00000020H
  00143	8b 44 24 48	 mov	 eax, DWORD PTR vertexSize$[rsp]
  00147	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0014b	45 33 c9	 xor	 r9d, r9d
  0014e	41 b8 06 14 00
	00		 mov	 r8d, 5126		; 00001406H
  00154	ba 01 00 00 00	 mov	 edx, 1
  00159	b9 03 00 00 00	 mov	 ecx, 3
  0015e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewVertexAttribPointer
  00165	ff 10		 call	 QWORD PTR [rax]

; 140  : 	uint ibo;
; 141  : 	glGenBuffers(1, &ibo);

  00167	48 8d 54 24 54	 lea	 rdx, QWORD PTR ibo$[rsp]
  0016c	b9 01 00 00 00	 mov	 ecx, 1
  00171	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewGenBuffers
  00178	ff 10		 call	 QWORD PTR [rax]

; 142  : 	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);

  0017a	8b 54 24 54	 mov	 edx, DWORD PTR ibo$[rsp]
  0017e	b9 93 88 00 00	 mov	 ecx, 34963		; 00008893H
  00183	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewBindBuffer
  0018a	ff 10		 call	 QWORD PTR [rax]

; 143  : 	glBufferData(GL_ELEMENT_ARRAY_BUFFER, indicesSize, indices, GL_DYNAMIC_DRAW);

  0018c	41 b9 e8 88 00
	00		 mov	 r9d, 35048		; 000088e8H
  00192	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR indices
  00199	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR indicesSize
  001a0	b9 93 88 00 00	 mov	 ecx, 34963		; 00008893H
  001a5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewBufferData
  001ac	ff 10		 call	 QWORD PTR [rax]

; 144  : 	glBufferData(GL_ARRAY_BUFFER, verticesSize, vertices, GL_DYNAMIC_DRAW);

  001ae	41 b9 e8 88 00
	00		 mov	 r9d, 35048		; 000088e8H
  001b4	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR vertices
  001bb	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR verticesSize
  001c2	b9 92 88 00 00	 mov	 ecx, 34962		; 00008892H
  001c7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewBufferData
  001ce	ff 10		 call	 QWORD PTR [rax]

; 145  : 	char* filepath = "Basic.shader";

  001d0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0N@CHKJAACA@Basic?4shader@
  001d7	48 89 44 24 68	 mov	 QWORD PTR filepath$[rsp], rax

; 146  : 	ShaderProgramSource shaderSrc = ParseShader(filepath);

  001dc	48 8b 54 24 68	 mov	 rdx, QWORD PTR filepath$[rsp]
  001e1	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR $T6[rsp]
  001e9	e8 00 00 00 00	 call	 ParseShader
  001ee	48 8d 4c 24 78	 lea	 rcx, QWORD PTR shaderSrc$[rsp]
  001f3	48 8b f9	 mov	 rdi, rcx
  001f6	48 8b f0	 mov	 rsi, rax
  001f9	b9 10 00 00 00	 mov	 ecx, 16
  001fe	f3 a4		 rep movsb

; 147  : 	printf("vertex:\n%s\n", shaderSrc.vertexSource);

  00200	48 8b 54 24 78	 mov	 rdx, QWORD PTR shaderSrc$[rsp]
  00205	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@KCEEINPE@vertex?3?6?$CFs?6@
  0020c	e8 00 00 00 00	 call	 printf

; 148  : 	printf("framgent:\n%s\n", shaderSrc.fragmentSource);

  00211	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR shaderSrc$[rsp+8]
  00219	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IECILAIG@framgent?3?6?$CFs?6@
  00220	e8 00 00 00 00	 call	 printf

; 149  : 	shader = CreateShader(shaderSrc.vertexSource, shaderSrc.fragmentSource);

  00225	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR shaderSrc$[rsp+8]
  0022d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR shaderSrc$[rsp]
  00232	e8 00 00 00 00	 call	 CreateShader
  00237	89 05 00 00 00
	00		 mov	 DWORD PTR shader, eax

; 150  : 	glUseProgram(shader);

  0023d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR shader
  00243	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewUseProgram
  0024a	ff 10		 call	 QWORD PTR [rax]

; 151  : 	glUniform4f(glGetUniformLocation(shader, "u_Color"), .1f, .6f, .9f, 1.0f);

  0024c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07BGCMGBLA@u_Color@
  00253	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR shader
  00259	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewGetUniformLocation
  00260	ff 10		 call	 QWORD PTR [rax]
  00262	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0026a	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00270	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f666666
  00278	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f19999a
  00280	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3dcccccd
  00288	8b c8		 mov	 ecx, eax
  0028a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewUniform4f
  00291	ff 10		 call	 QWORD PTR [rax]

; 152  : 	glUniform1f(AddLocVal2("u_elapsedT"), .0f);

  00293	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@MHMCDAGK@u_elapsedT@
  0029a	e8 00 00 00 00	 call	 AddLocVal2
  0029f	0f 57 c9	 xorps	 xmm1, xmm1
  002a2	8b c8		 mov	 ecx, eax
  002a4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewUniform1f
  002ab	ff 10		 call	 QWORD PTR [rax]

; 153  : 	glUniform1iv(glGetUniformLocation(shader, "u_Texture"), lengthOf(textureIDs), textureIDs);

  002ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09FBCBHDFN@u_Texture@
  002b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR shader
  002ba	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewGetUniformLocation
  002c1	ff 10		 call	 QWORD PTR [rax]
  002c3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:textureIDs
  002ca	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  002cf	8b c8		 mov	 ecx, eax
  002d1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewUniform1iv
  002d8	ff 10		 call	 QWORD PTR [rax]

; 154  : 	camPosLoc = glGetUniformLocation(shader, "u_cameraPos");

  002da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@FOABEBJH@u_cameraPos@
  002e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR shader
  002e7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewGetUniformLocation
  002ee	ff 10		 call	 QWORD PTR [rax]
  002f0	89 05 00 00 00
	00		 mov	 DWORD PTR camPosLoc, eax

; 155  : 	glUniform2f(camPosLoc, camPosition.x, camPosition.y);

  002f6	f3 0f 10 15 04
	00 00 00	 movss	 xmm2, DWORD PTR camPosition+4
  002fe	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR camPosition
  00306	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR camPosLoc
  0030c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewUniform2f
  00313	ff 10		 call	 QWORD PTR [rax]

; 156  : 	shouldDraw = true;

  00315	c6 05 00 00 00
	00 01		 mov	 BYTE PTR shouldDraw, 1

; 157  : }

  0031c	48 8b cc	 mov	 rcx, rsp
  0031f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:MeshStartup$rtcFrameData
  00326	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0032b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00333	48 33 cc	 xor	 rcx, rsp
  00336	e8 00 00 00 00	 call	 __security_check_cookie
  0033b	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00342	5f		 pop	 rdi
  00343	5e		 pop	 rsi
  00344	c3		 ret	 0
MeshStartup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
MeshInitialize PROC

; 117  : void MeshInitialize() {

$LN3:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  0000d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 118  : 	indTempSize = sizeof(indiciesTemplate);

  00012	c7 05 00 00 00
	00 18 00 00 00	 mov	 DWORD PTR indTempSize, 24

; 119  : 	indTempLen = lengthOf(indiciesTemplate);

  0001c	c7 05 00 00 00
	00 06 00 00 00	 mov	 DWORD PTR indTempLen, 6

; 120  : 	posTempLen = lengthOf(positionTemplate);

  00026	c7 05 00 00 00
	00 08 00 00 00	 mov	 DWORD PTR posTempLen, 8

; 121  : 	quadTempLen = lengthOf(quadTemplate);

  00030	c7 05 00 00 00
	00 24 00 00 00	 mov	 DWORD PTR quadTempLen, 36 ; 00000024H

; 122  : 	quadTempSize = sizeof(quadTemplate);

  0003a	c7 05 00 00 00
	00 90 00 00 00	 mov	 DWORD PTR quadTempSize, 144 ; 00000090H

; 123  : 	strideTakeTwo = (stride = quadTempLen / 4) - 2;

  00044	33 d2		 xor	 edx, edx
  00046	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  0004c	b9 04 00 00 00	 mov	 ecx, 4
  00051	f7 f1		 div	 ecx
  00053	89 05 00 00 00
	00		 mov	 DWORD PTR stride, eax
  00059	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR stride
  0005f	83 e8 02	 sub	 eax, 2
  00062	89 05 00 00 00
	00		 mov	 DWORD PTR strideTakeTwo, eax

; 124  : }

  00068	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006c	5f		 pop	 rdi
  0006d	c3		 ret	 0
MeshInitialize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h
;	COMDAT I_InRange
_TEXT	SEGMENT
tv66 = 32
tv68 = 36
i$ = 64
min$ = 72
max$ = 80
I_InRange PROC						; COMDAT

; 86   : inline bool I_InRange(int i, int min, int max) {

$LN7:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	57		 push	 rdi
  0000e	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7BF3DF52_math@h
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 87   : 	return i < max && i > min;

  0001e	8b 44 24 50	 mov	 eax, DWORD PTR max$[rsp]
  00022	39 44 24 40	 cmp	 DWORD PTR i$[rsp], eax
  00026	7d 14		 jge	 SHORT $LN3@I_InRange
  00028	8b 44 24 48	 mov	 eax, DWORD PTR min$[rsp]
  0002c	39 44 24 40	 cmp	 DWORD PTR i$[rsp], eax
  00030	7e 0a		 jle	 SHORT $LN3@I_InRange
  00032	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv66[rsp], 1
  0003a	eb 08		 jmp	 SHORT $LN4@I_InRange
$LN3@I_InRange:
  0003c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv66[rsp], 0
$LN4@I_InRange:
  00044	83 7c 24 20 00	 cmp	 DWORD PTR tv66[rsp], 0
  00049	75 0a		 jne	 SHORT $LN5@I_InRange
  0004b	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
  00053	eb 08		 jmp	 SHORT $LN6@I_InRange
$LN5@I_InRange:
  00055	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
$LN6@I_InRange:
  0005d	0f b6 44 24 24	 movzx	 eax, BYTE PTR tv68[rsp]

; 88   : }

  00062	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00066	5f		 pop	 rdi
  00067	c3		 ret	 0
I_InRange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
this$ = 32
CreateQuad PROC

; 52   : Mesh *CreateQuad() {

$LN4:
  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  0000d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 53   : 	Mesh *this = malloc(sizeof(Mesh));

  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0001d	48 89 44 24 20	 mov	 QWORD PTR this$[rsp], rax

; 54   : 	if (delMeshLen != 0) {

  00022	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR delMeshLen, 0
  00029	74 4b		 je	 SHORT $LN2@CreateQuad

; 55   : 		this->meshLocation = delMesh[delMeshLen - 1];

  0002b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR delMeshLen
  00031	ff c8		 dec	 eax
  00033	8b c0		 mov	 eax, eax
  00035	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  0003a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR delMesh
  00041	8b 04 82	 mov	 eax, DWORD PTR [rdx+rax*4]
  00044	89 01		 mov	 DWORD PTR [rcx], eax

; 56   : 		this->indiciesLoc = delInd[--delMeshLen];

  00046	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR delMeshLen
  0004c	ff c8		 dec	 eax
  0004e	89 05 00 00 00
	00		 mov	 DWORD PTR delMeshLen, eax
  00054	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR delMeshLen
  0005a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  0005f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR delInd
  00066	8b 04 82	 mov	 eax, DWORD PTR [rdx+rax*4]
  00069	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 57   : 		return this;

  0006c	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00071	e9 b6 00 00 00	 jmp	 $LN1@CreateQuad
$LN2@CreateQuad:

; 58   : 	}
; 59   : 	this->meshLocation = curMeshLoc;

  00076	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR curMeshLoc
  00081	89 08		 mov	 DWORD PTR [rax], ecx

; 60   : 	this->indiciesLoc = curIndiciesLoc;

  00083	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00088	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR curIndiciesLoc
  0008e	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 61   : 	curMeshLoc += quadTempLen;

  00091	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  00097	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR curMeshLoc
  0009d	03 c8		 add	 ecx, eax
  0009f	8b c1		 mov	 eax, ecx
  000a1	89 05 00 00 00
	00		 mov	 DWORD PTR curMeshLoc, eax

; 62   : 	curIndiciesLoc += indTempLen;

  000a7	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR indTempLen
  000ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR curIndiciesLoc
  000b3	03 c8		 add	 ecx, eax
  000b5	8b c1		 mov	 eax, ecx
  000b7	89 05 00 00 00
	00		 mov	 DWORD PTR curIndiciesLoc, eax

; 63   : 	vertices = realloc(vertices, (verticesSize += quadTempSize));

  000bd	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempSize
  000c3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR verticesSize
  000ca	48 03 c8	 add	 rcx, rax
  000cd	48 8b c1	 mov	 rax, rcx
  000d0	48 89 05 00 00
	00 00		 mov	 QWORD PTR verticesSize, rax
  000d7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR verticesSize
  000de	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  000e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc
  000eb	48 89 05 00 00
	00 00		 mov	 QWORD PTR vertices, rax

; 64   : 	indices = realloc(indices, (indicesSize += indTempSize));

  000f2	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR indTempSize
  000f8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR indicesSize
  000ff	48 03 c8	 add	 rcx, rax
  00102	48 8b c1	 mov	 rax, rcx
  00105	48 89 05 00 00
	00 00		 mov	 QWORD PTR indicesSize, rax
  0010c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR indicesSize
  00113	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR indices
  0011a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc
  00120	48 89 05 00 00
	00 00		 mov	 QWORD PTR indices, rax

; 65   : 	return this;

  00127	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
$LN1@CreateQuad:

; 66   : }

  0012c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00130	5f		 pop	 rdi
  00131	c3		 ret	 0
CreateQuad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
mesh$ = 48
CreateQuadAssign PROC

; 67   : void CreateQuadAssign(Mesh *mesh) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 68   : 	if (delMeshLen != 0) {

  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR delMeshLen, 0
  0001d	74 46		 je	 SHORT $LN2@CreateQuad

; 69   : 		mesh->meshLocation = delMesh[delMeshLen - 1];

  0001f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR delMeshLen
  00025	ff c8		 dec	 eax
  00027	8b c0		 mov	 eax, eax
  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mesh$[rsp]
  0002e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR delMesh
  00035	8b 04 82	 mov	 eax, DWORD PTR [rdx+rax*4]
  00038	89 01		 mov	 DWORD PTR [rcx], eax

; 70   : 		mesh->indiciesLoc = delInd[--delMeshLen];

  0003a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR delMeshLen
  00040	ff c8		 dec	 eax
  00042	89 05 00 00 00
	00		 mov	 DWORD PTR delMeshLen, eax
  00048	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR delMeshLen
  0004e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mesh$[rsp]
  00053	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR delInd
  0005a	8b 04 82	 mov	 eax, DWORD PTR [rdx+rax*4]
  0005d	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 71   : 		return;

  00060	e9 b1 00 00 00	 jmp	 $LN1@CreateQuad
$LN2@CreateQuad:

; 72   : 	}
; 73   : 	mesh->meshLocation = curMeshLoc;

  00065	48 8b 44 24 30	 mov	 rax, QWORD PTR mesh$[rsp]
  0006a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR curMeshLoc
  00070	89 08		 mov	 DWORD PTR [rax], ecx

; 74   : 	mesh->indiciesLoc = curIndiciesLoc;

  00072	48 8b 44 24 30	 mov	 rax, QWORD PTR mesh$[rsp]
  00077	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR curIndiciesLoc
  0007d	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 75   : 	curMeshLoc += quadTempLen;

  00080	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  00086	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR curMeshLoc
  0008c	03 c8		 add	 ecx, eax
  0008e	8b c1		 mov	 eax, ecx
  00090	89 05 00 00 00
	00		 mov	 DWORD PTR curMeshLoc, eax

; 76   : 	curIndiciesLoc += indTempLen;

  00096	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR indTempLen
  0009c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR curIndiciesLoc
  000a2	03 c8		 add	 ecx, eax
  000a4	8b c1		 mov	 eax, ecx
  000a6	89 05 00 00 00
	00		 mov	 DWORD PTR curIndiciesLoc, eax

; 77   : 	vertices = realloc(vertices, (verticesSize += quadTempSize));

  000ac	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempSize
  000b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR verticesSize
  000b9	48 03 c8	 add	 rcx, rax
  000bc	48 8b c1	 mov	 rax, rcx
  000bf	48 89 05 00 00
	00 00		 mov	 QWORD PTR verticesSize, rax
  000c6	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR verticesSize
  000cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc
  000da	48 89 05 00 00
	00 00		 mov	 QWORD PTR vertices, rax

; 78   : 	indices = realloc(indices, (indicesSize += indTempSize));

  000e1	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR indTempSize
  000e7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR indicesSize
  000ee	48 03 c8	 add	 rcx, rax
  000f1	48 8b c1	 mov	 rax, rcx
  000f4	48 89 05 00 00
	00 00		 mov	 QWORD PTR indicesSize, rax
  000fb	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR indicesSize
  00102	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR indices
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc
  0010f	48 89 05 00 00
	00 00		 mov	 QWORD PTR indices, rax
$LN1@CreateQuad:

; 79   : }

  00116	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0011a	5f		 pop	 rdi
  0011b	c3		 ret	 0
CreateQuadAssign ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
mesh$ = 48
CreateSQuadAssign PROC

; 80   : void CreateSQuadAssign(SquishableMesh *mesh) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 81   : 	if (delMeshLen != 0) {

  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR delMeshLen, 0
  0001d	74 46		 je	 SHORT $LN2@CreateSQua

; 82   : 		mesh->meshLocation = delMesh[delMeshLen - 1];

  0001f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR delMeshLen
  00025	ff c8		 dec	 eax
  00027	8b c0		 mov	 eax, eax
  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mesh$[rsp]
  0002e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR delMesh
  00035	8b 04 82	 mov	 eax, DWORD PTR [rdx+rax*4]
  00038	89 01		 mov	 DWORD PTR [rcx], eax

; 83   : 		mesh->indiciesLoc = delInd[--delMeshLen];

  0003a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR delMeshLen
  00040	ff c8		 dec	 eax
  00042	89 05 00 00 00
	00		 mov	 DWORD PTR delMeshLen, eax
  00048	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR delMeshLen
  0004e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mesh$[rsp]
  00053	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR delInd
  0005a	8b 04 82	 mov	 eax, DWORD PTR [rdx+rax*4]
  0005d	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 84   : 		return;

  00060	e9 b1 00 00 00	 jmp	 $LN1@CreateSQua
$LN2@CreateSQua:

; 85   : 	}
; 86   : 	mesh->meshLocation = curMeshLoc;

  00065	48 8b 44 24 30	 mov	 rax, QWORD PTR mesh$[rsp]
  0006a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR curMeshLoc
  00070	89 08		 mov	 DWORD PTR [rax], ecx

; 87   : 	mesh->indiciesLoc = curIndiciesLoc;

  00072	48 8b 44 24 30	 mov	 rax, QWORD PTR mesh$[rsp]
  00077	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR curIndiciesLoc
  0007d	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 88   : 	curMeshLoc += quadTempLen;

  00080	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  00086	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR curMeshLoc
  0008c	03 c8		 add	 ecx, eax
  0008e	8b c1		 mov	 eax, ecx
  00090	89 05 00 00 00
	00		 mov	 DWORD PTR curMeshLoc, eax

; 89   : 	curIndiciesLoc += indTempLen;

  00096	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR indTempLen
  0009c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR curIndiciesLoc
  000a2	03 c8		 add	 ecx, eax
  000a4	8b c1		 mov	 eax, ecx
  000a6	89 05 00 00 00
	00		 mov	 DWORD PTR curIndiciesLoc, eax

; 90   : 	vertices = realloc(vertices, (verticesSize += quadTempSize));

  000ac	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempSize
  000b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR verticesSize
  000b9	48 03 c8	 add	 rcx, rax
  000bc	48 8b c1	 mov	 rax, rcx
  000bf	48 89 05 00 00
	00 00		 mov	 QWORD PTR verticesSize, rax
  000c6	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR verticesSize
  000cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc
  000da	48 89 05 00 00
	00 00		 mov	 QWORD PTR vertices, rax

; 91   : 	indices = realloc(indices, (indicesSize += indTempSize));

  000e1	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR indTempSize
  000e7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR indicesSize
  000ee	48 03 c8	 add	 rcx, rax
  000f1	48 8b c1	 mov	 rax, rcx
  000f4	48 89 05 00 00
	00 00		 mov	 QWORD PTR indicesSize, rax
  000fb	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR indicesSize
  00102	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR indices
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc
  0010f	48 89 05 00 00
	00 00		 mov	 QWORD PTR indices, rax
$LN1@CreateSQua:

; 92   : }

  00116	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0011a	5f		 pop	 rdi
  0011b	c3		 ret	 0
CreateSQuadAssign ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
meshLoc$ = 32
tv68 = 40
mesh$ = 64
DeleteQuad PROC

; 93   : void DeleteQuad(Mesh *mesh) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 94   : 	uint meshLoc = mesh->meshLocation;

  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR mesh$[rsp]
  0001b	8b 00		 mov	 eax, DWORD PTR [rax]
  0001d	89 44 24 20	 mov	 DWORD PTR meshLoc$[rsp], eax

; 95   : 	memset(&vertices[meshLoc], 0, sizeof(float) * quadTempLen);

  00021	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  00027	48 c1 e0 02	 shl	 rax, 2
  0002b	48 89 44 24 28	 mov	 QWORD PTR tv68[rsp], rax
  00030	8b 4c 24 20	 mov	 ecx, DWORD PTR meshLoc$[rsp]
  00034	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR vertices
  0003b	48 8d 0c 8a	 lea	 rcx, QWORD PTR [rdx+rcx*4]
  0003f	48 8b f9	 mov	 rdi, rcx
  00042	33 c0		 xor	 eax, eax
  00044	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv68[rsp]
  00049	f3 aa		 rep stosb

; 96   : 	delMeshSize += sizeof(uint);

  0004b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR delMeshSize
  00052	48 83 c0 04	 add	 rax, 4
  00056	48 89 05 00 00
	00 00		 mov	 QWORD PTR delMeshSize, rax

; 97   : 	delMesh = realloc(delMesh, delMeshSize);

  0005d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR delMeshSize
  00064	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR delMesh
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc
  00071	48 89 05 00 00
	00 00		 mov	 QWORD PTR delMesh, rax

; 98   : 	delMesh[delMeshLen++] = meshLoc;

  00078	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR delMeshLen
  0007e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR delMesh
  00085	8b 54 24 20	 mov	 edx, DWORD PTR meshLoc$[rsp]
  00089	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx
  0008c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR delMeshLen
  00092	ff c0		 inc	 eax
  00094	89 05 00 00 00
	00		 mov	 DWORD PTR delMeshLen, eax

; 99   : 	delIndSize += sizeof(uint);

  0009a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR delIndSize
  000a1	48 83 c0 04	 add	 rax, 4
  000a5	48 89 05 00 00
	00 00		 mov	 QWORD PTR delIndSize, rax

; 100  : 	delInd = realloc(delInd, delIndSize);

  000ac	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR delIndSize
  000b3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR delInd
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc
  000c0	48 89 05 00 00
	00 00		 mov	 QWORD PTR delInd, rax

; 101  : 	delInd[delIndLen++] = mesh->indiciesLoc;

  000c7	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR delIndLen
  000cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR delInd
  000d4	48 8b 54 24 40	 mov	 rdx, QWORD PTR mesh$[rsp]
  000d9	8b 52 04	 mov	 edx, DWORD PTR [rdx+4]
  000dc	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx
  000df	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR delIndLen
  000e5	ff c0		 inc	 eax
  000e7	89 05 00 00 00
	00		 mov	 DWORD PTR delIndLen, eax

; 102  : }

  000ed	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f1	5f		 pop	 rdi
  000f2	c3		 ret	 0
DeleteQuad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
meshLoc$ = 32
tv68 = 40
mesh$ = 64
DeleteSQuad PROC

; 103  : void DeleteSQuad(SquishableMesh *mesh) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 104  : 	uint meshLoc = mesh->meshLocation;

  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR mesh$[rsp]
  0001b	8b 00		 mov	 eax, DWORD PTR [rax]
  0001d	89 44 24 20	 mov	 DWORD PTR meshLoc$[rsp], eax

; 105  : 	memset(&vertices[meshLoc], 0, sizeof(float) * quadTempLen);

  00021	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  00027	48 c1 e0 02	 shl	 rax, 2
  0002b	48 89 44 24 28	 mov	 QWORD PTR tv68[rsp], rax
  00030	8b 4c 24 20	 mov	 ecx, DWORD PTR meshLoc$[rsp]
  00034	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR vertices
  0003b	48 8d 0c 8a	 lea	 rcx, QWORD PTR [rdx+rcx*4]
  0003f	48 8b f9	 mov	 rdi, rcx
  00042	33 c0		 xor	 eax, eax
  00044	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv68[rsp]
  00049	f3 aa		 rep stosb

; 106  : 	delMeshSize += sizeof(uint);

  0004b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR delMeshSize
  00052	48 83 c0 04	 add	 rax, 4
  00056	48 89 05 00 00
	00 00		 mov	 QWORD PTR delMeshSize, rax

; 107  : 	delMesh = realloc(delMesh, delMeshSize);

  0005d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR delMeshSize
  00064	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR delMesh
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc
  00071	48 89 05 00 00
	00 00		 mov	 QWORD PTR delMesh, rax

; 108  : 	delMesh[delMeshLen++] = meshLoc;

  00078	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR delMeshLen
  0007e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR delMesh
  00085	8b 54 24 20	 mov	 edx, DWORD PTR meshLoc$[rsp]
  00089	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx
  0008c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR delMeshLen
  00092	ff c0		 inc	 eax
  00094	89 05 00 00 00
	00		 mov	 DWORD PTR delMeshLen, eax

; 109  : 	delIndSize += sizeof(uint);

  0009a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR delIndSize
  000a1	48 83 c0 04	 add	 rax, 4
  000a5	48 89 05 00 00
	00 00		 mov	 QWORD PTR delIndSize, rax

; 110  : 	delInd = realloc(delInd, delIndSize);

  000ac	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR delIndSize
  000b3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR delInd
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc
  000c0	48 89 05 00 00
	00 00		 mov	 QWORD PTR delInd, rax

; 111  : 	delInd[delIndLen++] = mesh->indiciesLoc;

  000c7	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR delIndLen
  000cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR delInd
  000d4	48 8b 54 24 40	 mov	 rdx, QWORD PTR mesh$[rsp]
  000d9	8b 52 04	 mov	 edx, DWORD PTR [rdx+4]
  000dc	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx
  000df	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR delIndLen
  000e5	ff c0		 inc	 eax
  000e7	89 05 00 00 00
	00		 mov	 DWORD PTR delIndLen, eax

; 112  : }

  000ed	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f1	5f		 pop	 rdi
  000f2	c3		 ret	 0
DeleteSQuad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
;	COMDAT GetOrigVertex
_TEXT	SEGMENT
vertex$ = 48
GetOrigVertex PROC					; COMDAT

; 113  : inline int GetOrigVertex(uint vertex) {

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	57		 push	 rdi
  00005	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00010	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 114  : 	return vertex - vertex / stride * (stride - 2);

  00015	33 d2		 xor	 edx, edx
  00017	8b 44 24 30	 mov	 eax, DWORD PTR vertex$[rsp]
  0001b	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  00021	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR stride
  00027	83 e9 02	 sub	 ecx, 2
  0002a	0f af c1	 imul	 eax, ecx
  0002d	8b 4c 24 30	 mov	 ecx, DWORD PTR vertex$[rsp]
  00031	2b c8		 sub	 ecx, eax
  00033	8b c1		 mov	 eax, ecx

; 115  : }

  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5f		 pop	 rdi
  0003a	c3		 ret	 0
GetOrigVertex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
i$ = 32
index$ = 36
indiciesLoc$ = 40
tv87 = 48
tv91 = 56
mesh$ = 80
textureUnitIndex$ = 88
defaultMesh PROC

; 159  : {

$LN10:
  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000b	57		 push	 rdi
  0000c	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00017	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001c	90		 npad	 1

; 160  : 	uint i, index;
; 161  : 	for (i = 0; i < quadTempLen; i++) {

  0001d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00025	eb 0a		 jmp	 SHORT $LN4@defaultMes
$LN2@defaultMes:
  00027	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0002b	ff c0		 inc	 eax
  0002d	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@defaultMes:
  00031	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  00037	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  0003b	73 5e		 jae	 SHORT $LN3@defaultMes

; 162  : 		index = mesh->meshLocation + i;

  0003d	48 8b 44 24 50	 mov	 rax, QWORD PTR mesh$[rsp]
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	03 44 24 20	 add	 eax, DWORD PTR i$[rsp]
  00048	89 44 24 24	 mov	 DWORD PTR index$[rsp], eax

; 163  : 		if ((i + 1) % stride == 0) {

  0004c	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00050	ff c0		 inc	 eax
  00052	33 d2		 xor	 edx, edx
  00054	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  0005a	8b c2		 mov	 eax, edx
  0005c	85 c0		 test	 eax, eax
  0005e	75 18		 jne	 SHORT $LN8@defaultMes

; 164  : 			vertices[index] = textureUnitIndex;

  00060	8b 44 24 24	 mov	 eax, DWORD PTR index$[rsp]
  00064	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  0006b	f3 0f 10 44 24
	58		 movss	 xmm0, DWORD PTR textureUnitIndex$[rsp]
  00071	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 165  : 			continue;

  00076	eb af		 jmp	 SHORT $LN2@defaultMes
$LN8@defaultMes:

; 166  : 		}
; 167  : 		vertices[index] = quadTemplate[i];

  00078	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:quadTemplate
  00083	8b 54 24 24	 mov	 edx, DWORD PTR index$[rsp]
  00087	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR vertices
  0008e	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  00093	f3 41 0f 11 04
	90		 movss	 DWORD PTR [r8+rdx*4], xmm0

; 168  : 	}

  00099	eb 8c		 jmp	 SHORT $LN2@defaultMes
$LN3@defaultMes:

; 169  : 	uint indiciesLoc = mesh->indiciesLoc;

  0009b	48 8b 44 24 50	 mov	 rax, QWORD PTR mesh$[rsp]
  000a0	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  000a3	89 44 24 28	 mov	 DWORD PTR indiciesLoc$[rsp], eax

; 170  : 	for (i = 0; i < indTempLen; i++) indices[indiciesLoc + i] = indiciesTemplate[i] + indiciesLoc / 2 + indiciesLoc / indTempLen;

  000a7	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000af	eb 0a		 jmp	 SHORT $LN7@defaultMes
$LN5@defaultMes:
  000b1	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000b5	ff c0		 inc	 eax
  000b7	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN7@defaultMes:
  000bb	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR indTempLen
  000c1	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  000c5	73 5d		 jae	 SHORT $LN6@defaultMes
  000c7	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000cb	48 89 44 24 30	 mov	 QWORD PTR tv87[rsp], rax
  000d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:indiciesTemplate
  000d7	33 d2		 xor	 edx, edx
  000d9	8b 44 24 28	 mov	 eax, DWORD PTR indiciesLoc$[rsp]
  000dd	41 b8 02 00 00
	00		 mov	 r8d, 2
  000e3	41 f7 f0	 div	 r8d
  000e6	48 8b 54 24 30	 mov	 rdx, QWORD PTR tv87[rsp]
  000eb	8b 0c 91	 mov	 ecx, DWORD PTR [rcx+rdx*4]
  000ee	03 c8		 add	 ecx, eax
  000f0	8b c1		 mov	 eax, ecx
  000f2	89 44 24 38	 mov	 DWORD PTR tv91[rsp], eax
  000f6	33 d2		 xor	 edx, edx
  000f8	8b 44 24 28	 mov	 eax, DWORD PTR indiciesLoc$[rsp]
  000fc	f7 35 00 00 00
	00		 div	 DWORD PTR indTempLen
  00102	8b 4c 24 38	 mov	 ecx, DWORD PTR tv91[rsp]
  00106	03 c8		 add	 ecx, eax
  00108	8b c1		 mov	 eax, ecx
  0010a	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  0010e	8b 54 24 28	 mov	 edx, DWORD PTR indiciesLoc$[rsp]
  00112	03 d1		 add	 edx, ecx
  00114	8b ca		 mov	 ecx, edx
  00116	8b c9		 mov	 ecx, ecx
  00118	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR indices
  0011f	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
  00122	eb 8d		 jmp	 SHORT $LN5@defaultMes
$LN6@defaultMes:

; 171  : }

  00124	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00128	5f		 pop	 rdi
  00129	c3		 ret	 0
defaultMesh ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
i$ = 32
meshLoc$ = 36
mesh$ = 64
textureUnitIndex$ = 72
ChangeTexInd PROC

; 172  : void ChangeTexInd(Mesh* mesh, float textureUnitIndex[4]){

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 173  : 	uint i, meshLoc = mesh->meshLocation;

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR mesh$[rsp]
  00020	8b 00		 mov	 eax, DWORD PTR [rax]
  00022	89 44 24 24	 mov	 DWORD PTR meshLoc$[rsp], eax

; 174  : 	for (i = meshLoc + stride - 1; i < meshLoc + quadTempLen; i += stride) {

  00026	8b 44 24 24	 mov	 eax, DWORD PTR meshLoc$[rsp]
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR stride
  00030	8d 44 08 ff	 lea	 eax, DWORD PTR [rax+rcx-1]
  00034	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
  00038	eb 12		 jmp	 SHORT $LN4@ChangeTexI
$LN2@ChangeTexI:
  0003a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR stride
  00040	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  00044	03 c8		 add	 ecx, eax
  00046	8b c1		 mov	 eax, ecx
  00048	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@ChangeTexI:
  0004c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR meshLoc$[rsp]
  00056	03 c8		 add	 ecx, eax
  00058	8b c1		 mov	 eax, ecx
  0005a	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  0005e	73 35		 jae	 SHORT $LN3@ChangeTexI

; 175  : 		vertices[i] = textureUnitIndex[(i - meshLoc + 1) / stride];

  00060	8b 44 24 24	 mov	 eax, DWORD PTR meshLoc$[rsp]
  00064	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  00068	2b c8		 sub	 ecx, eax
  0006a	8b c1		 mov	 eax, ecx
  0006c	ff c0		 inc	 eax
  0006e	33 d2		 xor	 edx, edx
  00070	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  00076	8b c0		 mov	 eax, eax
  00078	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  0007c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR vertices
  00083	4c 8b 44 24 48	 mov	 r8, QWORD PTR textureUnitIndex$[rsp]
  00088	f3 41 0f 10 04
	80		 movss	 xmm0, DWORD PTR [r8+rax*4]
  0008e	f3 0f 11 04 8a	 movss	 DWORD PTR [rdx+rcx*4], xmm0

; 176  : 	}

  00093	eb a5		 jmp	 SHORT $LN2@ChangeTexI
$LN3@ChangeTexI:

; 177  : }

  00095	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00099	5f		 pop	 rdi
  0009a	c3		 ret	 0
ChangeTexInd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
i$ = 32
meshLoc$ = 36
mesh$ = 64
textureUnitIndex$ = 72
ChangeTexInd2 PROC

; 178  : void ChangeTexInd2(Mesh* mesh, float textureUnitIndex){

$LN6:
  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000b	57		 push	 rdi
  0000c	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00017	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 179  : 	uint i, meshLoc = mesh->meshLocation;

  0001c	48 8b 44 24 40	 mov	 rax, QWORD PTR mesh$[rsp]
  00021	8b 00		 mov	 eax, DWORD PTR [rax]
  00023	89 44 24 24	 mov	 DWORD PTR meshLoc$[rsp], eax

; 180  : 	for (i = meshLoc + stride - 1; i < meshLoc + quadTempLen; i += stride) {

  00027	8b 44 24 24	 mov	 eax, DWORD PTR meshLoc$[rsp]
  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR stride
  00031	8d 44 08 ff	 lea	 eax, DWORD PTR [rax+rcx-1]
  00035	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
  00039	eb 12		 jmp	 SHORT $LN4@ChangeTexI
$LN2@ChangeTexI:
  0003b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR stride
  00041	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  00045	03 c8		 add	 ecx, eax
  00047	8b c1		 mov	 eax, ecx
  00049	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@ChangeTexI:
  0004d	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  00053	8b 4c 24 24	 mov	 ecx, DWORD PTR meshLoc$[rsp]
  00057	03 c8		 add	 ecx, eax
  00059	8b c1		 mov	 eax, ecx
  0005b	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  0005f	73 18		 jae	 SHORT $LN3@ChangeTexI

; 181  : 		vertices[i] = textureUnitIndex;

  00061	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00065	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  0006c	f3 0f 10 44 24
	48		 movss	 xmm0, DWORD PTR textureUnitIndex$[rsp]
  00072	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 182  : 	}

  00077	eb c2		 jmp	 SHORT $LN2@ChangeTexI
$LN3@ChangeTexI:

; 183  : }

  00079	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007d	5f		 pop	 rdi
  0007e	c3		 ret	 0
ChangeTexInd2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
i$ = 32
index$ = 36
indiciesLoc$ = 40
tv132 = 48
tv136 = 56
mesh$ = 80
textureUnitIndex$ = 88
defaultSMesh PROC

; 185  : {

$LN10:
  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000b	57		 push	 rdi
  0000c	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00017	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001c	90		 npad	 1

; 186  : 	uint i, index;
; 187  : 	for (i = 0; i < quadTempLen; i++) {

  0001d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00025	eb 0a		 jmp	 SHORT $LN4@defaultSMe
$LN2@defaultSMe:
  00027	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0002b	ff c0		 inc	 eax
  0002d	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@defaultSMe:
  00031	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  00037	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  0003b	73 5e		 jae	 SHORT $LN3@defaultSMe

; 188  : 		index = mesh->meshLocation + i;

  0003d	48 8b 44 24 50	 mov	 rax, QWORD PTR mesh$[rsp]
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	03 44 24 20	 add	 eax, DWORD PTR i$[rsp]
  00048	89 44 24 24	 mov	 DWORD PTR index$[rsp], eax

; 189  : 		if ((i + 1) % stride == 0) {

  0004c	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00050	ff c0		 inc	 eax
  00052	33 d2		 xor	 edx, edx
  00054	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  0005a	8b c2		 mov	 eax, edx
  0005c	85 c0		 test	 eax, eax
  0005e	75 18		 jne	 SHORT $LN8@defaultSMe

; 190  : 			vertices[index] = textureUnitIndex;

  00060	8b 44 24 24	 mov	 eax, DWORD PTR index$[rsp]
  00064	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  0006b	f3 0f 10 44 24
	58		 movss	 xmm0, DWORD PTR textureUnitIndex$[rsp]
  00071	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 191  : 			continue;

  00076	eb af		 jmp	 SHORT $LN2@defaultSMe
$LN8@defaultSMe:

; 192  : 		}
; 193  : 		vertices[index] = quadTemplate[i];

  00078	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:quadTemplate
  00083	8b 54 24 24	 mov	 edx, DWORD PTR index$[rsp]
  00087	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR vertices
  0008e	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  00093	f3 41 0f 11 04
	90		 movss	 DWORD PTR [r8+rdx*4], xmm0

; 194  : 	}

  00099	eb 8c		 jmp	 SHORT $LN2@defaultSMe
$LN3@defaultSMe:

; 195  : 	mesh->origXMinY = vertices[mesh->meshLocation + stride];

  0009b	48 8b 44 24 50	 mov	 rax, QWORD PTR mesh$[rsp]
  000a0	8b 00		 mov	 eax, DWORD PTR [rax]
  000a2	03 05 00 00 00
	00		 add	 eax, DWORD PTR stride
  000a8	8b c0		 mov	 eax, eax
  000aa	48 8b 4c 24 50	 mov	 rcx, QWORD PTR mesh$[rsp]
  000af	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR vertices
  000b6	f3 0f 10 04 82	 movss	 xmm0, DWORD PTR [rdx+rax*4]
  000bb	f3 0f 11 41 0c	 movss	 DWORD PTR [rcx+12], xmm0

; 196  : 	mesh->origXMaxY = vertices[mesh->meshLocation + stride * 2];

  000c0	48 8b 44 24 50	 mov	 rax, QWORD PTR mesh$[rsp]
  000c5	8b 00		 mov	 eax, DWORD PTR [rax]
  000c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR stride
  000cd	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  000d0	8b c0		 mov	 eax, eax
  000d2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR mesh$[rsp]
  000d7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR vertices
  000de	f3 0f 10 04 82	 movss	 xmm0, DWORD PTR [rdx+rax*4]
  000e3	f3 0f 11 41 08	 movss	 DWORD PTR [rcx+8], xmm0

; 197  : 	uint indiciesLoc = mesh->indiciesLoc;

  000e8	48 8b 44 24 50	 mov	 rax, QWORD PTR mesh$[rsp]
  000ed	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  000f0	89 44 24 28	 mov	 DWORD PTR indiciesLoc$[rsp], eax

; 198  : 	for (i = 0; i < indTempLen; i++) indices[indiciesLoc + i] = indiciesTemplate[i] + indiciesLoc / 2 + indiciesLoc / indTempLen;

  000f4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000fc	eb 0a		 jmp	 SHORT $LN7@defaultSMe
$LN5@defaultSMe:
  000fe	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00102	ff c0		 inc	 eax
  00104	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN7@defaultSMe:
  00108	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR indTempLen
  0010e	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  00112	73 5d		 jae	 SHORT $LN6@defaultSMe
  00114	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00118	48 89 44 24 30	 mov	 QWORD PTR tv132[rsp], rax
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:indiciesTemplate
  00124	33 d2		 xor	 edx, edx
  00126	8b 44 24 28	 mov	 eax, DWORD PTR indiciesLoc$[rsp]
  0012a	41 b8 02 00 00
	00		 mov	 r8d, 2
  00130	41 f7 f0	 div	 r8d
  00133	48 8b 54 24 30	 mov	 rdx, QWORD PTR tv132[rsp]
  00138	8b 0c 91	 mov	 ecx, DWORD PTR [rcx+rdx*4]
  0013b	03 c8		 add	 ecx, eax
  0013d	8b c1		 mov	 eax, ecx
  0013f	89 44 24 38	 mov	 DWORD PTR tv136[rsp], eax
  00143	33 d2		 xor	 edx, edx
  00145	8b 44 24 28	 mov	 eax, DWORD PTR indiciesLoc$[rsp]
  00149	f7 35 00 00 00
	00		 div	 DWORD PTR indTempLen
  0014f	8b 4c 24 38	 mov	 ecx, DWORD PTR tv136[rsp]
  00153	03 c8		 add	 ecx, eax
  00155	8b c1		 mov	 eax, ecx
  00157	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  0015b	8b 54 24 28	 mov	 edx, DWORD PTR indiciesLoc$[rsp]
  0015f	03 d1		 add	 edx, ecx
  00161	8b ca		 mov	 ecx, edx
  00163	8b c9		 mov	 ecx, ecx
  00165	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR indices
  0016c	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
  0016f	eb 8d		 jmp	 SHORT $LN5@defaultSMe
$LN6@defaultSMe:

; 199  : }

  00171	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00175	5f		 pop	 rdi
  00176	c3		 ret	 0
defaultSMesh ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
i$ = 32
index$ = 36
iAddOne$ = 40
tv74 = 44
tv91 = 48
tv128 = 56
mesh$ = 80
textureUnitIndex$ = 88
DefaultMeshNotPos PROC

; 201  : {

$LN11:
  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000b	57		 push	 rdi
  0000c	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00017	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001c	90		 npad	 1

; 202  : 	uint i, index, iAddOne;
; 203  : 	for (i = 0; i < quadTempLen; i++) {

  0001d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00025	eb 0a		 jmp	 SHORT $LN4@DefaultMes
$LN2@DefaultMes:
  00027	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0002b	ff c0		 inc	 eax
  0002d	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@DefaultMes:
  00031	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  00037	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  0003b	0f 83 9a 00 00
	00		 jae	 $LN3@DefaultMes

; 204  : 		iAddOne = i + 1;

  00041	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00045	ff c0		 inc	 eax
  00047	89 44 24 28	 mov	 DWORD PTR iAddOne$[rsp], eax

; 205  : 		index = mesh->meshLocation + i;

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR mesh$[rsp]
  00050	8b 00		 mov	 eax, DWORD PTR [rax]
  00052	03 44 24 20	 add	 eax, DWORD PTR i$[rsp]
  00056	89 44 24 24	 mov	 DWORD PTR index$[rsp], eax

; 206  : 		if (iAddOne % stride == 0) {

  0005a	33 d2		 xor	 edx, edx
  0005c	8b 44 24 28	 mov	 eax, DWORD PTR iAddOne$[rsp]
  00060	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  00066	8b c2		 mov	 eax, edx
  00068	85 c0		 test	 eax, eax
  0006a	75 18		 jne	 SHORT $LN8@DefaultMes

; 207  : 			vertices[index] = textureUnitIndex;

  0006c	8b 44 24 24	 mov	 eax, DWORD PTR index$[rsp]
  00070	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  00077	f3 0f 10 44 24
	58		 movss	 xmm0, DWORD PTR textureUnitIndex$[rsp]
  0007d	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 208  : 			continue;

  00082	eb a3		 jmp	 SHORT $LN2@DefaultMes
$LN8@DefaultMes:

; 209  : 		}
; 210  : 		if (((i % stride) & (iAddOne % stride)) == 0) continue;

  00084	33 d2		 xor	 edx, edx
  00086	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0008a	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  00090	8b c2		 mov	 eax, edx
  00092	89 44 24 2c	 mov	 DWORD PTR tv74[rsp], eax
  00096	33 d2		 xor	 edx, edx
  00098	8b 44 24 28	 mov	 eax, DWORD PTR iAddOne$[rsp]
  0009c	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  000a2	8b c2		 mov	 eax, edx
  000a4	8b 4c 24 2c	 mov	 ecx, DWORD PTR tv74[rsp]
  000a8	23 c8		 and	 ecx, eax
  000aa	8b c1		 mov	 eax, ecx
  000ac	85 c0		 test	 eax, eax
  000ae	75 05		 jne	 SHORT $LN9@DefaultMes
  000b0	e9 72 ff ff ff	 jmp	 $LN2@DefaultMes
$LN9@DefaultMes:

; 211  : 		vertices[index] = quadTemplate[i];

  000b5	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:quadTemplate
  000c0	8b 54 24 24	 mov	 edx, DWORD PTR index$[rsp]
  000c4	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR vertices
  000cb	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  000d0	f3 41 0f 11 04
	90		 movss	 DWORD PTR [r8+rdx*4], xmm0

; 212  : 	}

  000d6	e9 4c ff ff ff	 jmp	 $LN2@DefaultMes
$LN3@DefaultMes:

; 213  : 	for (i = 0; i < indTempLen; i++) indices[mesh->indiciesLoc + i] = indiciesTemplate[i] + mesh->indiciesLoc / 2 + mesh->indiciesLoc / indTempLen;

  000db	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000e3	eb 0a		 jmp	 SHORT $LN7@DefaultMes
$LN5@DefaultMes:
  000e5	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000e9	ff c0		 inc	 eax
  000eb	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN7@DefaultMes:
  000ef	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR indTempLen
  000f5	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  000f9	73 66		 jae	 SHORT $LN6@DefaultMes
  000fb	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000ff	48 89 44 24 30	 mov	 QWORD PTR tv91[rsp], rax
  00104	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:indiciesTemplate
  0010b	33 d2		 xor	 edx, edx
  0010d	4c 8b 44 24 50	 mov	 r8, QWORD PTR mesh$[rsp]
  00112	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  00116	41 b8 02 00 00
	00		 mov	 r8d, 2
  0011c	41 f7 f0	 div	 r8d
  0011f	48 8b 54 24 30	 mov	 rdx, QWORD PTR tv91[rsp]
  00124	8b 0c 91	 mov	 ecx, DWORD PTR [rcx+rdx*4]
  00127	03 c8		 add	 ecx, eax
  00129	8b c1		 mov	 eax, ecx
  0012b	89 44 24 38	 mov	 DWORD PTR tv128[rsp], eax
  0012f	33 d2		 xor	 edx, edx
  00131	48 8b 4c 24 50	 mov	 rcx, QWORD PTR mesh$[rsp]
  00136	8b 41 04	 mov	 eax, DWORD PTR [rcx+4]
  00139	f7 35 00 00 00
	00		 div	 DWORD PTR indTempLen
  0013f	8b 4c 24 38	 mov	 ecx, DWORD PTR tv128[rsp]
  00143	03 c8		 add	 ecx, eax
  00145	8b c1		 mov	 eax, ecx
  00147	48 8b 4c 24 50	 mov	 rcx, QWORD PTR mesh$[rsp]
  0014c	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  0014f	03 4c 24 20	 add	 ecx, DWORD PTR i$[rsp]
  00153	8b c9		 mov	 ecx, ecx
  00155	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR indices
  0015c	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
  0015f	eb 84		 jmp	 SHORT $LN5@DefaultMes
$LN6@DefaultMes:

; 214  : }

  00161	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00165	5f		 pop	 rdi
  00166	c3		 ret	 0
DefaultMeshNotPos ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
i$ = 32
isModFive$ = 36
isModSix$ = 40
isModSeven$ = 44
backFour$ = 48
backFive$ = 52
backSix$ = 56
backSeven$ = 60
index$ = 64
tv95 = 68
tv130 = 72
tv133 = 76
tv139 = 80
tv141 = 84
tv144 = 88
tv147 = 92
tv176 = 96
tv181 = 104
mesh$ = 128
textureUnitIndex$ = 136
colors$ = 144
defaultMeshWithColor PROC

; 227  : {

$LN20:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  0000b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00010	57		 push	 rdi
  00011	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  0001c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00021	90		 npad	 1

; 228  : 	uint i;
; 229  : 	uint isModFive, isModSix, isModSeven, backFour, backFive, backSix, backSeven;
; 230  : 	uint index;
; 231  : 	for (i = mesh->meshLocation; i < mesh->meshLocation + quadTempLen; i++) {

  00022	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mesh$[rsp]
  0002a	8b 00		 mov	 eax, DWORD PTR [rax]
  0002c	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
  00030	eb 0a		 jmp	 SHORT $LN4@defaultMes
$LN2@defaultMes:
  00032	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00036	ff c0		 inc	 eax
  00038	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@defaultMes:
  0003c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mesh$[rsp]
  00044	8b 00		 mov	 eax, DWORD PTR [rax]
  00046	03 05 00 00 00
	00		 add	 eax, DWORD PTR quadTempLen
  0004c	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  00050	0f 83 58 02 00
	00		 jae	 $LN3@defaultMes

; 232  : 		if (!((i + 1) % stride)) {

  00056	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0005a	ff c0		 inc	 eax
  0005c	33 d2		 xor	 edx, edx
  0005e	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  00064	8b c2		 mov	 eax, edx
  00066	85 c0		 test	 eax, eax
  00068	75 1b		 jne	 SHORT $LN8@defaultMes

; 233  : 			vertices[i] = textureUnitIndex;

  0006a	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0006e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  00075	f3 0f 10 84 24
	88 00 00 00	 movss	 xmm0, DWORD PTR textureUnitIndex$[rsp]
  0007e	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 234  : 			continue;

  00083	eb ad		 jmp	 SHORT $LN2@defaultMes
$LN8@defaultMes:

; 235  : 		}
; 236  : 		if (!((i + 2) % stride) || !((i + 3) % stride) || !((i + 4) % stride) || !((i + 5) % stride)) {

  00085	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00089	83 c0 02	 add	 eax, 2
  0008c	33 d2		 xor	 edx, edx
  0008e	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  00094	8b c2		 mov	 eax, edx
  00096	85 c0		 test	 eax, eax
  00098	74 43		 je	 SHORT $LN10@defaultMes
  0009a	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0009e	83 c0 03	 add	 eax, 3
  000a1	33 d2		 xor	 edx, edx
  000a3	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  000a9	8b c2		 mov	 eax, edx
  000ab	85 c0		 test	 eax, eax
  000ad	74 2e		 je	 SHORT $LN10@defaultMes
  000af	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000b3	83 c0 04	 add	 eax, 4
  000b6	33 d2		 xor	 edx, edx
  000b8	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  000be	8b c2		 mov	 eax, edx
  000c0	85 c0		 test	 eax, eax
  000c2	74 19		 je	 SHORT $LN10@defaultMes
  000c4	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000c8	83 c0 05	 add	 eax, 5
  000cb	33 d2		 xor	 edx, edx
  000cd	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  000d3	8b c2		 mov	 eax, edx
  000d5	85 c0		 test	 eax, eax
  000d7	0f 85 95 01 00
	00		 jne	 $LN9@defaultMes
$LN10@defaultMes:

; 237  : 			index = i - mesh->meshLocation;

  000dd	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mesh$[rsp]
  000e5	8b 00		 mov	 eax, DWORD PTR [rax]
  000e7	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  000eb	2b c8		 sub	 ecx, eax
  000ed	8b c1		 mov	 eax, ecx
  000ef	89 44 24 40	 mov	 DWORD PTR index$[rsp], eax

; 238  : 			backFour = index - 4;

  000f3	8b 44 24 40	 mov	 eax, DWORD PTR index$[rsp]
  000f7	83 e8 04	 sub	 eax, 4
  000fa	89 44 24 30	 mov	 DWORD PTR backFour$[rsp], eax

; 239  : 			backFive = index - 5;

  000fe	8b 44 24 40	 mov	 eax, DWORD PTR index$[rsp]
  00102	83 e8 05	 sub	 eax, 5
  00105	89 44 24 34	 mov	 DWORD PTR backFive$[rsp], eax

; 240  : 			backSix = index - 6;

  00109	8b 44 24 40	 mov	 eax, DWORD PTR index$[rsp]
  0010d	83 e8 06	 sub	 eax, 6
  00110	89 44 24 38	 mov	 DWORD PTR backSix$[rsp], eax

; 241  : 			backSeven = index - 7;

  00114	8b 44 24 40	 mov	 eax, DWORD PTR index$[rsp]
  00118	83 e8 07	 sub	 eax, 7
  0011b	89 44 24 3c	 mov	 DWORD PTR backSeven$[rsp], eax

; 242  : 			isModFive = !(backFive % stride);

  0011f	33 d2		 xor	 edx, edx
  00121	8b 44 24 34	 mov	 eax, DWORD PTR backFive$[rsp]
  00125	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  0012b	8b c2		 mov	 eax, edx
  0012d	85 c0		 test	 eax, eax
  0012f	75 0a		 jne	 SHORT $LN12@defaultMes
  00131	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv95[rsp], 1
  00139	eb 08		 jmp	 SHORT $LN13@defaultMes
$LN12@defaultMes:
  0013b	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv95[rsp], 0
$LN13@defaultMes:
  00143	8b 44 24 44	 mov	 eax, DWORD PTR tv95[rsp]
  00147	89 44 24 24	 mov	 DWORD PTR isModFive$[rsp], eax

; 243  : 			isModSix = !(backSix % stride);

  0014b	33 d2		 xor	 edx, edx
  0014d	8b 44 24 38	 mov	 eax, DWORD PTR backSix$[rsp]
  00151	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  00157	8b c2		 mov	 eax, edx
  00159	85 c0		 test	 eax, eax
  0015b	75 0a		 jne	 SHORT $LN14@defaultMes
  0015d	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  00165	eb 08		 jmp	 SHORT $LN15@defaultMes
$LN14@defaultMes:
  00167	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN15@defaultMes:
  0016f	8b 44 24 48	 mov	 eax, DWORD PTR tv130[rsp]
  00173	89 44 24 28	 mov	 DWORD PTR isModSix$[rsp], eax

; 244  : 			isModSeven = !(backSeven % stride);

  00177	33 d2		 xor	 edx, edx
  00179	8b 44 24 3c	 mov	 eax, DWORD PTR backSeven$[rsp]
  0017d	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  00183	8b c2		 mov	 eax, edx
  00185	85 c0		 test	 eax, eax
  00187	75 0a		 jne	 SHORT $LN16@defaultMes
  00189	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv133[rsp], 1
  00191	eb 08		 jmp	 SHORT $LN17@defaultMes
$LN16@defaultMes:
  00193	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv133[rsp], 0
$LN17@defaultMes:
  0019b	8b 44 24 4c	 mov	 eax, DWORD PTR tv133[rsp]
  0019f	89 44 24 2c	 mov	 DWORD PTR isModSeven$[rsp], eax

; 245  : 			vertices[i] = colors[!(backFour % stride) * backFour / stride + isModFive * backFive / stride + isModSix * backSix / stride + isModSeven * backSeven / stride][isModFive + isModSix * 2 + isModSeven * 3];

  001a3	33 d2		 xor	 edx, edx
  001a5	8b 44 24 30	 mov	 eax, DWORD PTR backFour$[rsp]
  001a9	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  001af	8b c2		 mov	 eax, edx
  001b1	85 c0		 test	 eax, eax
  001b3	75 0a		 jne	 SHORT $LN18@defaultMes
  001b5	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv139[rsp], 1
  001bd	eb 08		 jmp	 SHORT $LN19@defaultMes
$LN18@defaultMes:
  001bf	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv139[rsp], 0
$LN19@defaultMes:
  001c7	8b 44 24 50	 mov	 eax, DWORD PTR tv139[rsp]
  001cb	0f af 44 24 30	 imul	 eax, DWORD PTR backFour$[rsp]
  001d0	33 d2		 xor	 edx, edx
  001d2	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  001d8	89 44 24 54	 mov	 DWORD PTR tv141[rsp], eax
  001dc	8b 4c 24 24	 mov	 ecx, DWORD PTR isModFive$[rsp]
  001e0	0f af 4c 24 34	 imul	 ecx, DWORD PTR backFive$[rsp]
  001e5	33 d2		 xor	 edx, edx
  001e7	8b c1		 mov	 eax, ecx
  001e9	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  001ef	8b 4c 24 54	 mov	 ecx, DWORD PTR tv141[rsp]
  001f3	03 c8		 add	 ecx, eax
  001f5	8b c1		 mov	 eax, ecx
  001f7	89 44 24 58	 mov	 DWORD PTR tv144[rsp], eax
  001fb	8b 4c 24 28	 mov	 ecx, DWORD PTR isModSix$[rsp]
  001ff	0f af 4c 24 38	 imul	 ecx, DWORD PTR backSix$[rsp]
  00204	33 d2		 xor	 edx, edx
  00206	8b c1		 mov	 eax, ecx
  00208	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  0020e	8b 4c 24 58	 mov	 ecx, DWORD PTR tv144[rsp]
  00212	03 c8		 add	 ecx, eax
  00214	8b c1		 mov	 eax, ecx
  00216	89 44 24 5c	 mov	 DWORD PTR tv147[rsp], eax
  0021a	8b 4c 24 2c	 mov	 ecx, DWORD PTR isModSeven$[rsp]
  0021e	0f af 4c 24 3c	 imul	 ecx, DWORD PTR backSeven$[rsp]
  00223	33 d2		 xor	 edx, edx
  00225	8b c1		 mov	 eax, ecx
  00227	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  0022d	8b 4c 24 5c	 mov	 ecx, DWORD PTR tv147[rsp]
  00231	03 c8		 add	 ecx, eax
  00233	8b c1		 mov	 eax, ecx
  00235	8b c0		 mov	 eax, eax
  00237	8b 4c 24 24	 mov	 ecx, DWORD PTR isModFive$[rsp]
  0023b	8b 54 24 28	 mov	 edx, DWORD PTR isModSix$[rsp]
  0023f	8d 0c 51	 lea	 ecx, DWORD PTR [rcx+rdx*2]
  00242	6b 54 24 2c 03	 imul	 edx, DWORD PTR isModSeven$[rsp], 3
  00247	03 ca		 add	 ecx, edx
  00249	8b c9		 mov	 ecx, ecx
  0024b	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR colors$[rsp]
  00253	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00257	8b 54 24 20	 mov	 edx, DWORD PTR i$[rsp]
  0025b	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR vertices
  00262	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [rax+rcx*4]
  00267	f3 41 0f 11 04
	90		 movss	 DWORD PTR [r8+rdx*4], xmm0

; 246  : 			continue;

  0026d	e9 c0 fd ff ff	 jmp	 $LN2@defaultMes
$LN9@defaultMes:

; 247  : 		}
; 248  : 		index = i - mesh->meshLocation;

  00272	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mesh$[rsp]
  0027a	8b 00		 mov	 eax, DWORD PTR [rax]
  0027c	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  00280	2b c8		 sub	 ecx, eax
  00282	8b c1		 mov	 eax, ecx
  00284	89 44 24 40	 mov	 DWORD PTR index$[rsp], eax

; 249  : 		vertices[i] = quadTemplate[index];

  00288	8b 44 24 40	 mov	 eax, DWORD PTR index$[rsp]
  0028c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:quadTemplate
  00293	8b 54 24 20	 mov	 edx, DWORD PTR i$[rsp]
  00297	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR vertices
  0029e	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  002a3	f3 41 0f 11 04
	90		 movss	 DWORD PTR [r8+rdx*4], xmm0

; 250  : 	}

  002a9	e9 84 fd ff ff	 jmp	 $LN2@defaultMes
$LN3@defaultMes:

; 251  : 	for (i = 0; i < indTempLen; i++) indices[mesh->indiciesLoc + i] = indiciesTemplate[i] + mesh->indiciesLoc / 2 + mesh->indiciesLoc / indTempLen;

  002ae	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  002b6	eb 0a		 jmp	 SHORT $LN7@defaultMes
$LN5@defaultMes:
  002b8	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  002bc	ff c0		 inc	 eax
  002be	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN7@defaultMes:
  002c2	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR indTempLen
  002c8	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  002cc	73 72		 jae	 SHORT $LN6@defaultMes
  002ce	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  002d2	48 89 44 24 60	 mov	 QWORD PTR tv176[rsp], rax
  002d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:indiciesTemplate
  002de	33 d2		 xor	 edx, edx
  002e0	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR mesh$[rsp]
  002e8	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  002ec	41 b8 02 00 00
	00		 mov	 r8d, 2
  002f2	41 f7 f0	 div	 r8d
  002f5	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv176[rsp]
  002fa	8b 0c 91	 mov	 ecx, DWORD PTR [rcx+rdx*4]
  002fd	03 c8		 add	 ecx, eax
  002ff	8b c1		 mov	 eax, ecx
  00301	89 44 24 68	 mov	 DWORD PTR tv181[rsp], eax
  00305	33 d2		 xor	 edx, edx
  00307	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR mesh$[rsp]
  0030f	8b 41 04	 mov	 eax, DWORD PTR [rcx+4]
  00312	f7 35 00 00 00
	00		 div	 DWORD PTR indTempLen
  00318	8b 4c 24 68	 mov	 ecx, DWORD PTR tv181[rsp]
  0031c	03 c8		 add	 ecx, eax
  0031e	8b c1		 mov	 eax, ecx
  00320	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR mesh$[rsp]
  00328	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  0032b	03 4c 24 20	 add	 ecx, DWORD PTR i$[rsp]
  0032f	8b c9		 mov	 ecx, ecx
  00331	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR indices
  00338	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
  0033b	e9 78 ff ff ff	 jmp	 $LN5@defaultMes
$LN6@defaultMes:

; 252  : }

  00340	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00344	5f		 pop	 rdi
  00345	c3		 ret	 0
defaultMeshWithColor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
isModFive$ = 32
isModSix$ = 36
isModSeven$ = 40
backFour$ = 44
backFive$ = 48
backSix$ = 52
backSeven$ = 56
index$ = 60
endOfColor$ = 64
i$1 = 68
tv69 = 72
tv75 = 76
tv92 = 80
tv95 = 84
tv130 = 88
tv136 = 92
tv138 = 96
tv141 = 100
tv144 = 104
meshLoc$ = 128
colors$ = 136
ChangeMeshColor PROC

; 253  : void ChangeMeshColor(uint meshLoc, float* colors[]) {//TODO: test to see if this code works

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	57		 push	 rdi
  0000a	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00015	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 254  : 	colorBoilerPlate;
; 255  : 	bool endOfColor

  0001a	c6 44 24 40 00	 mov	 BYTE PTR endOfColor$[rsp], 0

; 256  : #ifdef _DEBUG
; 257  : 		= false;
; 258  : #endif
; 259  : 		;
; 260  : 	for (uint i = meshLoc + 4; i < meshLoc + quadTempLen; i += (stride - 3) * (endOfColor = !((i + 2) % stride)) + !endOfColor) {

  0001f	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR meshLoc$[rsp]
  00026	83 c0 04	 add	 eax, 4
  00029	89 44 24 44	 mov	 DWORD PTR i$1[rsp], eax
  0002d	eb 6e		 jmp	 SHORT $LN4@ChangeMesh
$LN2@ChangeMesh:
  0002f	8b 44 24 44	 mov	 eax, DWORD PTR i$1[rsp]
  00033	83 c0 02	 add	 eax, 2
  00036	33 d2		 xor	 edx, edx
  00038	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  0003e	8b c2		 mov	 eax, edx
  00040	85 c0		 test	 eax, eax
  00042	75 0a		 jne	 SHORT $LN6@ChangeMesh
  00044	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv69[rsp], 1
  0004c	eb 08		 jmp	 SHORT $LN7@ChangeMesh
$LN6@ChangeMesh:
  0004e	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv69[rsp], 0
$LN7@ChangeMesh:
  00056	0f b6 44 24 40	 movzx	 eax, BYTE PTR endOfColor$[rsp]
  0005b	85 c0		 test	 eax, eax
  0005d	75 0a		 jne	 SHORT $LN8@ChangeMesh
  0005f	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  00067	eb 08		 jmp	 SHORT $LN9@ChangeMesh
$LN8@ChangeMesh:
  00069	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN9@ChangeMesh:
  00071	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv69[rsp]
  00076	88 44 24 40	 mov	 BYTE PTR endOfColor$[rsp], al
  0007a	0f b6 44 24 40	 movzx	 eax, BYTE PTR endOfColor$[rsp]
  0007f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR stride
  00085	83 e9 03	 sub	 ecx, 3
  00088	0f af c8	 imul	 ecx, eax
  0008b	8b c1		 mov	 eax, ecx
  0008d	03 44 24 4c	 add	 eax, DWORD PTR tv75[rsp]
  00091	8b 4c 24 44	 mov	 ecx, DWORD PTR i$1[rsp]
  00095	03 c8		 add	 ecx, eax
  00097	8b c1		 mov	 eax, ecx
  00099	89 44 24 44	 mov	 DWORD PTR i$1[rsp], eax
$LN4@ChangeMesh:
  0009d	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  000a3	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR meshLoc$[rsp]
  000aa	03 c8		 add	 ecx, eax
  000ac	8b c1		 mov	 eax, ecx
  000ae	39 44 24 44	 cmp	 DWORD PTR i$1[rsp], eax
  000b2	0f 83 cb 01 00
	00		 jae	 $LN3@ChangeMesh

; 261  : 		colorBoilerPlate2(meshLoc);

  000b8	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR meshLoc$[rsp]
  000bf	8b 4c 24 44	 mov	 ecx, DWORD PTR i$1[rsp]
  000c3	2b c8		 sub	 ecx, eax
  000c5	8b c1		 mov	 eax, ecx
  000c7	8b c0		 mov	 eax, eax
  000c9	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  000ce	f3 0f 11 44 24
	3c		 movss	 DWORD PTR index$[rsp], xmm0
  000d4	f3 0f 10 44 24
	3c		 movss	 xmm0, DWORD PTR index$[rsp]
  000da	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40800000
  000e2	f3 48 0f 2c c0	 cvttss2si rax, xmm0
  000e7	89 44 24 2c	 mov	 DWORD PTR backFour$[rsp], eax
  000eb	f3 0f 10 44 24
	3c		 movss	 xmm0, DWORD PTR index$[rsp]
  000f1	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40a00000
  000f9	f3 48 0f 2c c0	 cvttss2si rax, xmm0
  000fe	89 44 24 30	 mov	 DWORD PTR backFive$[rsp], eax
  00102	f3 0f 10 44 24
	3c		 movss	 xmm0, DWORD PTR index$[rsp]
  00108	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40c00000
  00110	f3 48 0f 2c c0	 cvttss2si rax, xmm0
  00115	89 44 24 34	 mov	 DWORD PTR backSix$[rsp], eax
  00119	f3 0f 10 44 24
	3c		 movss	 xmm0, DWORD PTR index$[rsp]
  0011f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40e00000
  00127	f3 48 0f 2c c0	 cvttss2si rax, xmm0
  0012c	89 44 24 38	 mov	 DWORD PTR backSeven$[rsp], eax
  00130	33 d2		 xor	 edx, edx
  00132	8b 44 24 30	 mov	 eax, DWORD PTR backFive$[rsp]
  00136	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  0013c	8b c2		 mov	 eax, edx
  0013e	85 c0		 test	 eax, eax
  00140	75 0a		 jne	 SHORT $LN10@ChangeMesh
  00142	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv92[rsp], 1
  0014a	eb 08		 jmp	 SHORT $LN11@ChangeMesh
$LN10@ChangeMesh:
  0014c	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
$LN11@ChangeMesh:
  00154	8b 44 24 50	 mov	 eax, DWORD PTR tv92[rsp]
  00158	89 44 24 20	 mov	 DWORD PTR isModFive$[rsp], eax
  0015c	33 d2		 xor	 edx, edx
  0015e	8b 44 24 34	 mov	 eax, DWORD PTR backSix$[rsp]
  00162	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  00168	8b c2		 mov	 eax, edx
  0016a	85 c0		 test	 eax, eax
  0016c	75 0a		 jne	 SHORT $LN12@ChangeMesh
  0016e	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv95[rsp], 1
  00176	eb 08		 jmp	 SHORT $LN13@ChangeMesh
$LN12@ChangeMesh:
  00178	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv95[rsp], 0
$LN13@ChangeMesh:
  00180	8b 44 24 54	 mov	 eax, DWORD PTR tv95[rsp]
  00184	89 44 24 24	 mov	 DWORD PTR isModSix$[rsp], eax
  00188	33 d2		 xor	 edx, edx
  0018a	8b 44 24 38	 mov	 eax, DWORD PTR backSeven$[rsp]
  0018e	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  00194	8b c2		 mov	 eax, edx
  00196	85 c0		 test	 eax, eax
  00198	75 0a		 jne	 SHORT $LN14@ChangeMesh
  0019a	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  001a2	eb 08		 jmp	 SHORT $LN15@ChangeMesh
$LN14@ChangeMesh:
  001a4	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN15@ChangeMesh:
  001ac	8b 44 24 58	 mov	 eax, DWORD PTR tv130[rsp]
  001b0	89 44 24 28	 mov	 DWORD PTR isModSeven$[rsp], eax
  001b4	33 d2		 xor	 edx, edx
  001b6	8b 44 24 2c	 mov	 eax, DWORD PTR backFour$[rsp]
  001ba	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  001c0	8b c2		 mov	 eax, edx
  001c2	85 c0		 test	 eax, eax
  001c4	75 0a		 jne	 SHORT $LN16@ChangeMesh
  001c6	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv136[rsp], 1
  001ce	eb 08		 jmp	 SHORT $LN17@ChangeMesh
$LN16@ChangeMesh:
  001d0	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
$LN17@ChangeMesh:
  001d8	8b 44 24 5c	 mov	 eax, DWORD PTR tv136[rsp]
  001dc	0f af 44 24 2c	 imul	 eax, DWORD PTR backFour$[rsp]
  001e1	33 d2		 xor	 edx, edx
  001e3	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  001e9	89 44 24 60	 mov	 DWORD PTR tv138[rsp], eax
  001ed	8b 4c 24 20	 mov	 ecx, DWORD PTR isModFive$[rsp]
  001f1	0f af 4c 24 30	 imul	 ecx, DWORD PTR backFive$[rsp]
  001f6	33 d2		 xor	 edx, edx
  001f8	8b c1		 mov	 eax, ecx
  001fa	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  00200	8b 4c 24 60	 mov	 ecx, DWORD PTR tv138[rsp]
  00204	03 c8		 add	 ecx, eax
  00206	8b c1		 mov	 eax, ecx
  00208	89 44 24 64	 mov	 DWORD PTR tv141[rsp], eax
  0020c	8b 4c 24 24	 mov	 ecx, DWORD PTR isModSix$[rsp]
  00210	0f af 4c 24 34	 imul	 ecx, DWORD PTR backSix$[rsp]
  00215	33 d2		 xor	 edx, edx
  00217	8b c1		 mov	 eax, ecx
  00219	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  0021f	8b 4c 24 64	 mov	 ecx, DWORD PTR tv141[rsp]
  00223	03 c8		 add	 ecx, eax
  00225	8b c1		 mov	 eax, ecx
  00227	89 44 24 68	 mov	 DWORD PTR tv144[rsp], eax
  0022b	8b 4c 24 28	 mov	 ecx, DWORD PTR isModSeven$[rsp]
  0022f	0f af 4c 24 38	 imul	 ecx, DWORD PTR backSeven$[rsp]
  00234	33 d2		 xor	 edx, edx
  00236	8b c1		 mov	 eax, ecx
  00238	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  0023e	8b 4c 24 68	 mov	 ecx, DWORD PTR tv144[rsp]
  00242	03 c8		 add	 ecx, eax
  00244	8b c1		 mov	 eax, ecx
  00246	8b c0		 mov	 eax, eax
  00248	8b 4c 24 20	 mov	 ecx, DWORD PTR isModFive$[rsp]
  0024c	8b 54 24 24	 mov	 edx, DWORD PTR isModSix$[rsp]
  00250	8d 0c 51	 lea	 ecx, DWORD PTR [rcx+rdx*2]
  00253	6b 54 24 28 03	 imul	 edx, DWORD PTR isModSeven$[rsp], 3
  00258	03 ca		 add	 ecx, edx
  0025a	8b c9		 mov	 ecx, ecx
  0025c	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR colors$[rsp]
  00264	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00268	8b 54 24 44	 mov	 edx, DWORD PTR i$1[rsp]
  0026c	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR vertices
  00273	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [rax+rcx*4]
  00278	f3 41 0f 11 04
	90		 movss	 DWORD PTR [r8+rdx*4], xmm0

; 262  : 	}

  0027e	e9 ac fd ff ff	 jmp	 $LN2@ChangeMesh
$LN3@ChangeMesh:

; 263  : }

  00283	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00287	5f		 pop	 rdi
  00288	c3		 ret	 0
ChangeMeshColor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
isStride$ = 32
notStride$ = 36
minVertX$ = 40
meshLoc$ = 44
i$1 = 48
tv73 = 52
tv77 = 56
mesh$ = 80
amount$ = 88
SquishMeshX2 PROC

; 264  : void SquishMeshX2(SquishableMesh *mesh, float amount) {

$LN10:
  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000b	57		 push	 rdi
  0000c	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00017	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 265  : 	float isStride;
; 266  : 	float notStride;
; 267  : 	float minVertX;
; 268  : 	uint meshLoc = mesh->meshLocation;

  0001c	48 8b 44 24 50	 mov	 rax, QWORD PTR mesh$[rsp]
  00021	8b 00		 mov	 eax, DWORD PTR [rax]
  00023	89 44 24 2c	 mov	 DWORD PTR meshLoc$[rsp], eax

; 269  : 	for (uint i = meshLoc + stride; i < meshLoc + quadTempLen * 3 / 4; i += stride) {

  00027	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR stride
  0002d	8b 4c 24 2c	 mov	 ecx, DWORD PTR meshLoc$[rsp]
  00031	03 c8		 add	 ecx, eax
  00033	8b c1		 mov	 eax, ecx
  00035	89 44 24 30	 mov	 DWORD PTR i$1[rsp], eax
  00039	eb 12		 jmp	 SHORT $LN4@SquishMesh
$LN2@SquishMesh:
  0003b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR stride
  00041	8b 4c 24 30	 mov	 ecx, DWORD PTR i$1[rsp]
  00045	03 c8		 add	 ecx, eax
  00047	8b c1		 mov	 eax, ecx
  00049	89 44 24 30	 mov	 DWORD PTR i$1[rsp], eax
$LN4@SquishMesh:
  0004d	6b 05 00 00 00
	00 03		 imul	 eax, DWORD PTR quadTempLen, 3
  00054	33 d2		 xor	 edx, edx
  00056	b9 04 00 00 00	 mov	 ecx, 4
  0005b	f7 f1		 div	 ecx
  0005d	8b 4c 24 2c	 mov	 ecx, DWORD PTR meshLoc$[rsp]
  00061	03 c8		 add	 ecx, eax
  00063	8b c1		 mov	 eax, ecx
  00065	39 44 24 30	 cmp	 DWORD PTR i$1[rsp], eax
  00069	0f 83 10 01 00
	00		 jae	 $LN3@SquishMesh

; 270  : 		notStride = !(isStride = i - meshLoc == stride);

  0006f	8b 44 24 2c	 mov	 eax, DWORD PTR meshLoc$[rsp]
  00073	8b 4c 24 30	 mov	 ecx, DWORD PTR i$1[rsp]
  00077	2b c8		 sub	 ecx, eax
  00079	8b c1		 mov	 eax, ecx
  0007b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR stride
  00081	75 0a		 jne	 SHORT $LN6@SquishMesh
  00083	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
  0008b	eb 08		 jmp	 SHORT $LN7@SquishMesh
$LN6@SquishMesh:
  0008d	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
$LN7@SquishMesh:
  00095	f3 0f 2a 44 24
	34		 cvtsi2ss xmm0, DWORD PTR tv73[rsp]
  0009b	f3 0f 11 44 24
	20		 movss	 DWORD PTR isStride$[rsp], xmm0
  000a1	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR isStride$[rsp]
  000a7	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  000ae	7a 0c		 jp	 SHORT $LN8@SquishMesh
  000b0	75 0a		 jne	 SHORT $LN8@SquishMesh
  000b2	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  000ba	eb 08		 jmp	 SHORT $LN9@SquishMesh
$LN8@SquishMesh:
  000bc	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@SquishMesh:
  000c4	f3 0f 2a 44 24
	38		 cvtsi2ss xmm0, DWORD PTR tv77[rsp]
  000ca	f3 0f 11 44 24
	24		 movss	 DWORD PTR notStride$[rsp], xmm0

; 271  : 		minVertX = vertices[i + (uint)((-isStride + notStride) * stride)];

  000d0	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR isStride$[rsp]
  000d6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000dd	f3 0f 58 44 24
	24		 addss	 xmm0, DWORD PTR notStride$[rsp]
  000e3	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR stride
  000e9	f3 48 0f 2a c8	 cvtsi2ss xmm1, rax
  000ee	f3 0f 59 c1	 mulss	 xmm0, xmm1
  000f2	f3 48 0f 2c c0	 cvttss2si rax, xmm0
  000f7	8b 4c 24 30	 mov	 ecx, DWORD PTR i$1[rsp]
  000fb	03 c8		 add	 ecx, eax
  000fd	8b c1		 mov	 eax, ecx
  000ff	8b c0		 mov	 eax, eax
  00101	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  00108	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  0010d	f3 0f 11 44 24
	28		 movss	 DWORD PTR minVertX$[rsp], xmm0

; 272  : 		vertices[i] = minVertX + (isStride * mesh->origXMinY + notStride * mesh->origXMaxY - minVertX) * (mesh->squishAmt = amount);

  00113	48 8b 44 24 50	 mov	 rax, QWORD PTR mesh$[rsp]
  00118	f3 0f 10 44 24
	58		 movss	 xmm0, DWORD PTR amount$[rsp]
  0011e	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0
  00123	f3 0f 10 44 24
	58		 movss	 xmm0, DWORD PTR amount$[rsp]
  00129	48 8b 44 24 50	 mov	 rax, QWORD PTR mesh$[rsp]
  0012e	f3 0f 10 4c 24
	24		 movss	 xmm1, DWORD PTR notStride$[rsp]
  00134	f3 0f 59 48 08	 mulss	 xmm1, DWORD PTR [rax+8]
  00139	48 8b 44 24 50	 mov	 rax, QWORD PTR mesh$[rsp]
  0013e	f3 0f 10 54 24
	20		 movss	 xmm2, DWORD PTR isStride$[rsp]
  00144	f3 0f 59 50 0c	 mulss	 xmm2, DWORD PTR [rax+12]
  00149	f3 0f 58 d1	 addss	 xmm2, xmm1
  0014d	0f 28 ca	 movaps	 xmm1, xmm2
  00150	f3 0f 5c 4c 24
	28		 subss	 xmm1, DWORD PTR minVertX$[rsp]
  00156	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0015a	0f 28 c1	 movaps	 xmm0, xmm1
  0015d	f3 0f 10 4c 24
	28		 movss	 xmm1, DWORD PTR minVertX$[rsp]
  00163	f3 0f 58 c8	 addss	 xmm1, xmm0
  00167	0f 28 c1	 movaps	 xmm0, xmm1
  0016a	8b 44 24 30	 mov	 eax, DWORD PTR i$1[rsp]
  0016e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  00175	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 273  : 	}

  0017a	e9 bc fe ff ff	 jmp	 $LN2@SquishMesh
$LN3@SquishMesh:

; 274  : }

  0017f	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00183	5f		 pop	 rdi
  00184	c3		 ret	 0
SquishMeshX2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
isStride$ = 32
notStride$ = 36
minVertX$ = 40
meshLoc$ = 44
i$1 = 48
tv73 = 52
tv77 = 56
mesh$ = 80
SquishMeshX PROC

; 275  : void SquishMeshX(SquishableMesh *mesh) {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 276  : 	float isStride;
; 277  : 	float notStride;
; 278  : 	float minVertX;
; 279  : 	uint meshLoc = mesh->meshLocation;

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR mesh$[rsp]
  0001b	8b 00		 mov	 eax, DWORD PTR [rax]
  0001d	89 44 24 2c	 mov	 DWORD PTR meshLoc$[rsp], eax

; 280  : 	for (uint i = meshLoc + stride; i < meshLoc + quadTempLen * 3 / 4; i += stride) {

  00021	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR stride
  00027	8b 4c 24 2c	 mov	 ecx, DWORD PTR meshLoc$[rsp]
  0002b	03 c8		 add	 ecx, eax
  0002d	8b c1		 mov	 eax, ecx
  0002f	89 44 24 30	 mov	 DWORD PTR i$1[rsp], eax
  00033	eb 12		 jmp	 SHORT $LN4@SquishMesh
$LN2@SquishMesh:
  00035	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR stride
  0003b	8b 4c 24 30	 mov	 ecx, DWORD PTR i$1[rsp]
  0003f	03 c8		 add	 ecx, eax
  00041	8b c1		 mov	 eax, ecx
  00043	89 44 24 30	 mov	 DWORD PTR i$1[rsp], eax
$LN4@SquishMesh:
  00047	6b 05 00 00 00
	00 03		 imul	 eax, DWORD PTR quadTempLen, 3
  0004e	33 d2		 xor	 edx, edx
  00050	b9 04 00 00 00	 mov	 ecx, 4
  00055	f7 f1		 div	 ecx
  00057	8b 4c 24 2c	 mov	 ecx, DWORD PTR meshLoc$[rsp]
  0005b	03 c8		 add	 ecx, eax
  0005d	8b c1		 mov	 eax, ecx
  0005f	39 44 24 30	 cmp	 DWORD PTR i$1[rsp], eax
  00063	0f 83 fa 00 00
	00		 jae	 $LN3@SquishMesh

; 281  : 		notStride = !(isStride = i - meshLoc == stride);

  00069	8b 44 24 2c	 mov	 eax, DWORD PTR meshLoc$[rsp]
  0006d	8b 4c 24 30	 mov	 ecx, DWORD PTR i$1[rsp]
  00071	2b c8		 sub	 ecx, eax
  00073	8b c1		 mov	 eax, ecx
  00075	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR stride
  0007b	75 0a		 jne	 SHORT $LN6@SquishMesh
  0007d	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
  00085	eb 08		 jmp	 SHORT $LN7@SquishMesh
$LN6@SquishMesh:
  00087	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
$LN7@SquishMesh:
  0008f	f3 0f 2a 44 24
	34		 cvtsi2ss xmm0, DWORD PTR tv73[rsp]
  00095	f3 0f 11 44 24
	20		 movss	 DWORD PTR isStride$[rsp], xmm0
  0009b	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR isStride$[rsp]
  000a1	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  000a8	7a 0c		 jp	 SHORT $LN8@SquishMesh
  000aa	75 0a		 jne	 SHORT $LN8@SquishMesh
  000ac	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  000b4	eb 08		 jmp	 SHORT $LN9@SquishMesh
$LN8@SquishMesh:
  000b6	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@SquishMesh:
  000be	f3 0f 2a 44 24
	38		 cvtsi2ss xmm0, DWORD PTR tv77[rsp]
  000c4	f3 0f 11 44 24
	24		 movss	 DWORD PTR notStride$[rsp], xmm0

; 282  : 		minVertX = vertices[i + (uint)((-isStride + notStride) * stride)];

  000ca	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR isStride$[rsp]
  000d0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000d7	f3 0f 58 44 24
	24		 addss	 xmm0, DWORD PTR notStride$[rsp]
  000dd	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR stride
  000e3	f3 48 0f 2a c8	 cvtsi2ss xmm1, rax
  000e8	f3 0f 59 c1	 mulss	 xmm0, xmm1
  000ec	f3 48 0f 2c c0	 cvttss2si rax, xmm0
  000f1	8b 4c 24 30	 mov	 ecx, DWORD PTR i$1[rsp]
  000f5	03 c8		 add	 ecx, eax
  000f7	8b c1		 mov	 eax, ecx
  000f9	8b c0		 mov	 eax, eax
  000fb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  00102	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  00107	f3 0f 11 44 24
	28		 movss	 DWORD PTR minVertX$[rsp], xmm0

; 283  : 		vertices[i] = minVertX + (isStride * mesh->origXMinY + notStride * mesh->origXMaxY - minVertX) * mesh->squishAmt;

  0010d	48 8b 44 24 50	 mov	 rax, QWORD PTR mesh$[rsp]
  00112	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR isStride$[rsp]
  00118	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [rax+12]
  0011d	48 8b 44 24 50	 mov	 rax, QWORD PTR mesh$[rsp]
  00122	f3 0f 10 4c 24
	24		 movss	 xmm1, DWORD PTR notStride$[rsp]
  00128	f3 0f 59 48 08	 mulss	 xmm1, DWORD PTR [rax+8]
  0012d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00131	f3 0f 5c 44 24
	28		 subss	 xmm0, DWORD PTR minVertX$[rsp]
  00137	48 8b 44 24 50	 mov	 rax, QWORD PTR mesh$[rsp]
  0013c	f3 0f 59 40 10	 mulss	 xmm0, DWORD PTR [rax+16]
  00141	f3 0f 10 4c 24
	28		 movss	 xmm1, DWORD PTR minVertX$[rsp]
  00147	f3 0f 58 c8	 addss	 xmm1, xmm0
  0014b	0f 28 c1	 movaps	 xmm0, xmm1
  0014e	8b 44 24 30	 mov	 eax, DWORD PTR i$1[rsp]
  00152	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  00159	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 284  : 	}

  0015e	e9 d2 fe ff ff	 jmp	 $LN2@SquishMesh
$LN3@SquishMesh:

; 285  : }

  00163	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00167	5f		 pop	 rdi
  00168	c3		 ret	 0
SquishMeshX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
tv69 = 48
vec$ = 80
index$ = 88
vecIndex PROC

; 286  : float vecIndex(Vector2 vec, ushort index) {

$LN5:
  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 287  : 	return vec.y * index + vec.x * (float)!index;

  0001b	0f b7 44 24 58	 movzx	 eax, WORD PTR index$[rsp]
  00020	85 c0		 test	 eax, eax
  00022	75 0a		 jne	 SHORT $LN3@vecIndex
  00024	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv69[rsp], 1
  0002c	eb 08		 jmp	 SHORT $LN4@vecIndex
$LN3@vecIndex:
  0002e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv69[rsp], 0
$LN4@vecIndex:
  00036	0f b7 44 24 58	 movzx	 eax, WORD PTR index$[rsp]
  0003b	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0003f	f3 0f 10 4c 24
	54		 movss	 xmm1, DWORD PTR vec$[rsp+4]
  00045	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00049	0f 28 c1	 movaps	 xmm0, xmm1
  0004c	f3 0f 2a 4c 24
	30		 cvtsi2ss xmm1, DWORD PTR tv69[rsp]
  00052	f3 0f 10 54 24
	50		 movss	 xmm2, DWORD PTR vec$[rsp]
  00058	f3 0f 59 d1	 mulss	 xmm2, xmm1
  0005c	0f 28 ca	 movaps	 xmm1, xmm2
  0005f	f3 0f 58 c1	 addss	 xmm0, xmm1

; 288  : }

  00063	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00067	5f		 pop	 rdi
  00068	c3		 ret	 0
vecIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
i$ = 32
index$ = 36
curAtlasStruct$ = 52
leftCheck$ = 68
rightCheck$ = 69
tv77 = 72
tv79 = 76
tv84 = 80
tv86 = 84
tv163 = 88
tv168 = 96
mesh$ = 128
textureUnitIndex$ = 136
points$ = 144
DefaultAtlasMesh PROC

; 310  : {

$LN20:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  0000b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00010	57		 push	 rdi
  00011	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00015	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001a	b9 14 00 00 00	 mov	 ecx, 20
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR [rsp+128]
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003a	90		 npad	 1

; 311  : 	uint i, index;
; 312  : 	uniqueAtlasStruct curAtlasStruct;
; 313  : 	bool leftCheck, rightCheck;
; 314  : 	for (i = 0; i < quadTempLen; i++) {

  0003b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00043	eb 0a		 jmp	 SHORT $LN4@DefaultAtl
$LN2@DefaultAtl:
  00045	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00049	ff c0		 inc	 eax
  0004b	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@DefaultAtl:
  0004f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  00055	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  00059	0f 83 80 01 00
	00		 jae	 $LN3@DefaultAtl

; 315  : 		index = mesh->meshLocation + i;

  0005f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mesh$[rsp]
  00067	8b 00		 mov	 eax, DWORD PTR [rax]
  00069	03 44 24 20	 add	 eax, DWORD PTR i$[rsp]
  0006d	89 44 24 24	 mov	 DWORD PTR index$[rsp], eax

; 316  : 		if ((i + 1) % stride == 0) {

  00071	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00075	ff c0		 inc	 eax
  00077	33 d2		 xor	 edx, edx
  00079	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  0007f	8b c2		 mov	 eax, edx
  00081	85 c0		 test	 eax, eax
  00083	75 1b		 jne	 SHORT $LN8@DefaultAtl

; 317  : 			vertices[index] = textureUnitIndex;

  00085	8b 44 24 24	 mov	 eax, DWORD PTR index$[rsp]
  00089	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  00090	f3 0f 10 84 24
	88 00 00 00	 movss	 xmm0, DWORD PTR textureUnitIndex$[rsp]
  00099	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 318  : 			continue;

  0009e	eb a5		 jmp	 SHORT $LN2@DefaultAtl
$LN8@DefaultAtl:

; 319  : 		}
; 320  : 		rightCheck = ((i - 3) % stride) == 0;

  000a0	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000a4	83 e8 03	 sub	 eax, 3
  000a7	33 d2		 xor	 edx, edx
  000a9	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  000af	8b c2		 mov	 eax, edx
  000b1	85 c0		 test	 eax, eax
  000b3	75 0a		 jne	 SHORT $LN12@DefaultAtl
  000b5	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  000bd	eb 08		 jmp	 SHORT $LN13@DefaultAtl
$LN12@DefaultAtl:
  000bf	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN13@DefaultAtl:
  000c7	83 7c 24 48 00	 cmp	 DWORD PTR tv77[rsp], 0
  000cc	75 0a		 jne	 SHORT $LN14@DefaultAtl
  000ce	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv79[rsp], 0
  000d6	eb 08		 jmp	 SHORT $LN15@DefaultAtl
$LN14@DefaultAtl:
  000d8	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv79[rsp], 1
$LN15@DefaultAtl:
  000e0	0f b6 44 24 4c	 movzx	 eax, BYTE PTR tv79[rsp]
  000e5	88 44 24 45	 mov	 BYTE PTR rightCheck$[rsp], al

; 321  : 		leftCheck = ((i - 2) % stride) == 0;

  000e9	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000ed	83 e8 02	 sub	 eax, 2
  000f0	33 d2		 xor	 edx, edx
  000f2	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  000f8	8b c2		 mov	 eax, edx
  000fa	85 c0		 test	 eax, eax
  000fc	75 0a		 jne	 SHORT $LN16@DefaultAtl
  000fe	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
  00106	eb 08		 jmp	 SHORT $LN17@DefaultAtl
$LN16@DefaultAtl:
  00108	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
$LN17@DefaultAtl:
  00110	83 7c 24 50 00	 cmp	 DWORD PTR tv84[rsp], 0
  00115	75 0a		 jne	 SHORT $LN18@DefaultAtl
  00117	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv86[rsp], 0
  0011f	eb 08		 jmp	 SHORT $LN19@DefaultAtl
$LN18@DefaultAtl:
  00121	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv86[rsp], 1
$LN19@DefaultAtl:
  00129	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv86[rsp]
  0012e	88 44 24 44	 mov	 BYTE PTR leftCheck$[rsp], al

; 322  : 		if (leftCheck || rightCheck) {

  00132	0f b6 44 24 44	 movzx	 eax, BYTE PTR leftCheck$[rsp]
  00137	85 c0		 test	 eax, eax
  00139	75 09		 jne	 SHORT $LN10@DefaultAtl
  0013b	0f b6 44 24 45	 movzx	 eax, BYTE PTR rightCheck$[rsp]
  00140	85 c0		 test	 eax, eax
  00142	74 75		 je	 SHORT $LN9@DefaultAtl
$LN10@DefaultAtl:

; 323  : 			curAtlasStruct = atlasTexCoords[atlasIndexBuffer[(i - 2 * leftCheck - 3 * rightCheck) / 9 + 4 * rightCheck]];

  00144	0f b6 44 24 44	 movzx	 eax, BYTE PTR leftCheck$[rsp]
  00149	d1 e0		 shl	 eax, 1
  0014b	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  0014f	2b c8		 sub	 ecx, eax
  00151	8b c1		 mov	 eax, ecx
  00153	0f b6 4c 24 45	 movzx	 ecx, BYTE PTR rightCheck$[rsp]
  00158	6b c9 03	 imul	 ecx, ecx, 3
  0015b	2b c1		 sub	 eax, ecx
  0015d	33 d2		 xor	 edx, edx
  0015f	b9 09 00 00 00	 mov	 ecx, 9
  00164	f7 f1		 div	 ecx
  00166	0f b6 4c 24 45	 movzx	 ecx, BYTE PTR rightCheck$[rsp]
  0016b	8d 04 88	 lea	 eax, DWORD PTR [rax+rcx*4]
  0016e	8b c0		 mov	 eax, eax
  00170	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:atlasIndexBuffer
  00177	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0017b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:atlasTexCoords
  00182	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00185	89 44 24 34	 mov	 DWORD PTR curAtlasStruct$[rsp], eax

; 324  : 			vertices[index] = vecIndex(points[curAtlasStruct.x], curAtlasStruct.y);

  00189	0f b6 44 24 34	 movzx	 eax, BYTE PTR curAtlasStruct$[rsp]
  0018e	0f b7 54 24 36	 movzx	 edx, WORD PTR curAtlasStruct$[rsp+2]
  00193	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR points$[rsp]
  0019b	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0019f	e8 00 00 00 00	 call	 vecIndex
  001a4	8b 44 24 24	 mov	 eax, DWORD PTR index$[rsp]
  001a8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  001af	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 325  : 			continue;

  001b4	e9 8c fe ff ff	 jmp	 $LN2@DefaultAtl
$LN9@DefaultAtl:

; 326  : 		}
; 327  : 		vertices[index] = quadTemplate[i];

  001b9	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  001bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:quadTemplate
  001c4	8b 54 24 24	 mov	 edx, DWORD PTR index$[rsp]
  001c8	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR vertices
  001cf	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  001d4	f3 41 0f 11 04
	90		 movss	 DWORD PTR [r8+rdx*4], xmm0

; 328  : 	}

  001da	e9 66 fe ff ff	 jmp	 $LN2@DefaultAtl
$LN3@DefaultAtl:

; 329  : 	for (i = 0; i < indTempLen; i++) indices[mesh->indiciesLoc + i] = indiciesTemplate[i] + mesh->indiciesLoc / 2 + mesh->indiciesLoc / indTempLen;

  001df	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  001e7	eb 0a		 jmp	 SHORT $LN7@DefaultAtl
$LN5@DefaultAtl:
  001e9	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  001ed	ff c0		 inc	 eax
  001ef	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN7@DefaultAtl:
  001f3	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR indTempLen
  001f9	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  001fd	73 72		 jae	 SHORT $LN6@DefaultAtl
  001ff	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00203	48 89 44 24 58	 mov	 QWORD PTR tv163[rsp], rax
  00208	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:indiciesTemplate
  0020f	33 d2		 xor	 edx, edx
  00211	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR mesh$[rsp]
  00219	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  0021d	41 b8 02 00 00
	00		 mov	 r8d, 2
  00223	41 f7 f0	 div	 r8d
  00226	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv163[rsp]
  0022b	8b 0c 91	 mov	 ecx, DWORD PTR [rcx+rdx*4]
  0022e	03 c8		 add	 ecx, eax
  00230	8b c1		 mov	 eax, ecx
  00232	89 44 24 60	 mov	 DWORD PTR tv168[rsp], eax
  00236	33 d2		 xor	 edx, edx
  00238	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR mesh$[rsp]
  00240	8b 41 04	 mov	 eax, DWORD PTR [rcx+4]
  00243	f7 35 00 00 00
	00		 div	 DWORD PTR indTempLen
  00249	8b 4c 24 60	 mov	 ecx, DWORD PTR tv168[rsp]
  0024d	03 c8		 add	 ecx, eax
  0024f	8b c1		 mov	 eax, ecx
  00251	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR mesh$[rsp]
  00259	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  0025c	03 4c 24 20	 add	 ecx, DWORD PTR i$[rsp]
  00260	8b c9		 mov	 ecx, ecx
  00262	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR indices
  00269	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
  0026c	e9 78 ff ff ff	 jmp	 $LN5@DefaultAtl
$LN6@DefaultAtl:

; 330  : }

  00271	48 8b cc	 mov	 rcx, rsp
  00274	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:DefaultAtlasMesh$rtcFrameData
  0027b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00280	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00284	5f		 pop	 rdi
  00285	c3		 ret	 0
DefaultAtlasMesh ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
i$ = 32
index$ = 36
curAtlasStruct$ = 52
leftCheck$ = 68
rightCheck$ = 69
isStructX$ = 70
tv77 = 72
tv79 = 76
tv84 = 80
tv86 = 84
tv143 = 88
tv154 = 96
tv171 = 104
tv176 = 112
mesh$ = 144
textureUnitIndex$ = 152
points1$ = 160
points2$ = 168
DefaultAtlasMesh2 PROC

; 332  : {

$LN24:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	57		 push	 rdi
  00016	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 18 00 00 00	 mov	 ecx, 24
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  0003d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00042	90		 npad	 1

; 333  : 	uint i, index;
; 334  : 	uniqueAtlasStruct curAtlasStruct;
; 335  : 	bool leftCheck, rightCheck;
; 336  : 	bool isStructX;
; 337  : 	for (i = 0; i < quadTempLen; i++) {

  00043	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0004b	eb 0a		 jmp	 SHORT $LN4@DefaultAtl
$LN2@DefaultAtl:
  0004d	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00051	ff c0		 inc	 eax
  00053	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@DefaultAtl:
  00057	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  0005d	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  00061	0f 83 da 01 00
	00		 jae	 $LN3@DefaultAtl

; 338  : 		index = mesh->meshLocation + i;

  00067	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR mesh$[rsp]
  0006f	8b 00		 mov	 eax, DWORD PTR [rax]
  00071	03 44 24 20	 add	 eax, DWORD PTR i$[rsp]
  00075	89 44 24 24	 mov	 DWORD PTR index$[rsp], eax

; 339  : 		if ((i + 1) % stride == 0) {

  00079	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0007d	ff c0		 inc	 eax
  0007f	33 d2		 xor	 edx, edx
  00081	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  00087	8b c2		 mov	 eax, edx
  00089	85 c0		 test	 eax, eax
  0008b	75 1b		 jne	 SHORT $LN8@DefaultAtl

; 340  : 			vertices[index] = textureUnitIndex;

  0008d	8b 44 24 24	 mov	 eax, DWORD PTR index$[rsp]
  00091	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  00098	f3 0f 10 84 24
	98 00 00 00	 movss	 xmm0, DWORD PTR textureUnitIndex$[rsp]
  000a1	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 341  : 			continue;

  000a6	eb a5		 jmp	 SHORT $LN2@DefaultAtl
$LN8@DefaultAtl:

; 342  : 		}
; 343  : 		rightCheck = ((i - 3) % stride) == 0;

  000a8	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000ac	83 e8 03	 sub	 eax, 3
  000af	33 d2		 xor	 edx, edx
  000b1	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  000b7	8b c2		 mov	 eax, edx
  000b9	85 c0		 test	 eax, eax
  000bb	75 0a		 jne	 SHORT $LN12@DefaultAtl
  000bd	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  000c5	eb 08		 jmp	 SHORT $LN13@DefaultAtl
$LN12@DefaultAtl:
  000c7	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN13@DefaultAtl:
  000cf	83 7c 24 48 00	 cmp	 DWORD PTR tv77[rsp], 0
  000d4	75 0a		 jne	 SHORT $LN14@DefaultAtl
  000d6	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv79[rsp], 0
  000de	eb 08		 jmp	 SHORT $LN15@DefaultAtl
$LN14@DefaultAtl:
  000e0	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv79[rsp], 1
$LN15@DefaultAtl:
  000e8	0f b6 44 24 4c	 movzx	 eax, BYTE PTR tv79[rsp]
  000ed	88 44 24 45	 mov	 BYTE PTR rightCheck$[rsp], al

; 344  : 		leftCheck = ((i - 2) % stride) == 0;

  000f1	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000f5	83 e8 02	 sub	 eax, 2
  000f8	33 d2		 xor	 edx, edx
  000fa	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  00100	8b c2		 mov	 eax, edx
  00102	85 c0		 test	 eax, eax
  00104	75 0a		 jne	 SHORT $LN16@DefaultAtl
  00106	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
  0010e	eb 08		 jmp	 SHORT $LN17@DefaultAtl
$LN16@DefaultAtl:
  00110	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
$LN17@DefaultAtl:
  00118	83 7c 24 50 00	 cmp	 DWORD PTR tv84[rsp], 0
  0011d	75 0a		 jne	 SHORT $LN18@DefaultAtl
  0011f	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv86[rsp], 0
  00127	eb 08		 jmp	 SHORT $LN19@DefaultAtl
$LN18@DefaultAtl:
  00129	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv86[rsp], 1
$LN19@DefaultAtl:
  00131	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv86[rsp]
  00136	88 44 24 44	 mov	 BYTE PTR leftCheck$[rsp], al

; 345  : 		if (leftCheck || rightCheck) {

  0013a	0f b6 44 24 44	 movzx	 eax, BYTE PTR leftCheck$[rsp]
  0013f	85 c0		 test	 eax, eax
  00141	75 0d		 jne	 SHORT $LN10@DefaultAtl
  00143	0f b6 44 24 45	 movzx	 eax, BYTE PTR rightCheck$[rsp]
  00148	85 c0		 test	 eax, eax
  0014a	0f 84 cb 00 00
	00		 je	 $LN9@DefaultAtl
$LN10@DefaultAtl:

; 346  : 			curAtlasStruct = atlasTexCoords[atlasIndexBuffer[(i - 2 * leftCheck - 3 * rightCheck) / 9 + 4 * rightCheck]];

  00150	0f b6 44 24 44	 movzx	 eax, BYTE PTR leftCheck$[rsp]
  00155	d1 e0		 shl	 eax, 1
  00157	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  0015b	2b c8		 sub	 ecx, eax
  0015d	8b c1		 mov	 eax, ecx
  0015f	0f b6 4c 24 45	 movzx	 ecx, BYTE PTR rightCheck$[rsp]
  00164	6b c9 03	 imul	 ecx, ecx, 3
  00167	2b c1		 sub	 eax, ecx
  00169	33 d2		 xor	 edx, edx
  0016b	b9 09 00 00 00	 mov	 ecx, 9
  00170	f7 f1		 div	 ecx
  00172	0f b6 4c 24 45	 movzx	 ecx, BYTE PTR rightCheck$[rsp]
  00177	8d 04 88	 lea	 eax, DWORD PTR [rax+rcx*4]
  0017a	8b c0		 mov	 eax, eax
  0017c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:atlasIndexBuffer
  00183	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00187	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:atlasTexCoords
  0018e	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00191	89 44 24 34	 mov	 DWORD PTR curAtlasStruct$[rsp], eax

; 347  : 			isStructX = (bool)curAtlasStruct.x;

  00195	0f b6 44 24 34	 movzx	 eax, BYTE PTR curAtlasStruct$[rsp]
  0019a	85 c0		 test	 eax, eax
  0019c	75 0a		 jne	 SHORT $LN20@DefaultAtl
  0019e	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
  001a6	eb 08		 jmp	 SHORT $LN21@DefaultAtl
$LN20@DefaultAtl:
  001a8	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
$LN21@DefaultAtl:
  001b0	0f b6 44 24 58	 movzx	 eax, BYTE PTR tv143[rsp]
  001b5	88 44 24 46	 mov	 BYTE PTR isStructX$[rsp], al

; 348  : 			vertices[index] = vecIndex(*(Vector2*)((uintptr_t)&points1 * isStructX + (uintptr_t)&points2 * !isStructX), curAtlasStruct.y);

  001b9	0f b6 44 24 46	 movzx	 eax, BYTE PTR isStructX$[rsp]
  001be	85 c0		 test	 eax, eax
  001c0	75 0b		 jne	 SHORT $LN22@DefaultAtl
  001c2	48 c7 44 24 60
	01 00 00 00	 mov	 QWORD PTR tv154[rsp], 1
  001cb	eb 09		 jmp	 SHORT $LN23@DefaultAtl
$LN22@DefaultAtl:
  001cd	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR tv154[rsp], 0
$LN23@DefaultAtl:
  001d6	0f b6 44 24 46	 movzx	 eax, BYTE PTR isStructX$[rsp]
  001db	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR points1$[rsp]
  001e3	48 0f af c8	 imul	 rcx, rax
  001e7	48 8b c1	 mov	 rax, rcx
  001ea	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR points2$[rsp]
  001f2	48 0f af 4c 24
	60		 imul	 rcx, QWORD PTR tv154[rsp]
  001f8	0f b7 54 24 36	 movzx	 edx, WORD PTR curAtlasStruct$[rsp+2]
  001fd	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00201	e8 00 00 00 00	 call	 vecIndex
  00206	8b 44 24 24	 mov	 eax, DWORD PTR index$[rsp]
  0020a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  00211	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 349  : 			continue;

  00216	e9 32 fe ff ff	 jmp	 $LN2@DefaultAtl
$LN9@DefaultAtl:

; 350  : 		}
; 351  : 		vertices[index] = quadTemplate[i];

  0021b	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0021f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:quadTemplate
  00226	8b 54 24 24	 mov	 edx, DWORD PTR index$[rsp]
  0022a	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR vertices
  00231	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  00236	f3 41 0f 11 04
	90		 movss	 DWORD PTR [r8+rdx*4], xmm0

; 352  : 	}

  0023c	e9 0c fe ff ff	 jmp	 $LN2@DefaultAtl
$LN3@DefaultAtl:

; 353  : 	for (i = 0; i < indTempLen; i++) indices[mesh->indiciesLoc + i] = indiciesTemplate[i] + mesh->indiciesLoc / 2 + mesh->indiciesLoc / indTempLen;

  00241	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00249	eb 0a		 jmp	 SHORT $LN7@DefaultAtl
$LN5@DefaultAtl:
  0024b	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0024f	ff c0		 inc	 eax
  00251	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN7@DefaultAtl:
  00255	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR indTempLen
  0025b	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  0025f	73 72		 jae	 SHORT $LN6@DefaultAtl
  00261	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00265	48 89 44 24 68	 mov	 QWORD PTR tv171[rsp], rax
  0026a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:indiciesTemplate
  00271	33 d2		 xor	 edx, edx
  00273	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR mesh$[rsp]
  0027b	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  0027f	41 b8 02 00 00
	00		 mov	 r8d, 2
  00285	41 f7 f0	 div	 r8d
  00288	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv171[rsp]
  0028d	8b 0c 91	 mov	 ecx, DWORD PTR [rcx+rdx*4]
  00290	03 c8		 add	 ecx, eax
  00292	8b c1		 mov	 eax, ecx
  00294	89 44 24 70	 mov	 DWORD PTR tv176[rsp], eax
  00298	33 d2		 xor	 edx, edx
  0029a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR mesh$[rsp]
  002a2	8b 41 04	 mov	 eax, DWORD PTR [rcx+4]
  002a5	f7 35 00 00 00
	00		 div	 DWORD PTR indTempLen
  002ab	8b 4c 24 70	 mov	 ecx, DWORD PTR tv176[rsp]
  002af	03 c8		 add	 ecx, eax
  002b1	8b c1		 mov	 eax, ecx
  002b3	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR mesh$[rsp]
  002bb	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  002be	03 4c 24 20	 add	 ecx, DWORD PTR i$[rsp]
  002c2	8b c9		 mov	 ecx, ecx
  002c4	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR indices
  002cb	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
  002ce	e9 78 ff ff ff	 jmp	 $LN5@DefaultAtl
$LN6@DefaultAtl:

; 354  : }

  002d3	48 8b cc	 mov	 rcx, rsp
  002d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:DefaultAtlasMesh2$rtcFrameData
  002dd	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002e2	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  002e9	5f		 pop	 rdi
  002ea	c3		 ret	 0
DefaultAtlasMesh2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
$T1 = 32
meshLoc$ = 64
toMoveTo$ = 72
scale$ = 80
MoveScaleMeshX PROC

; 355  : void MoveScaleMeshX(uint meshLoc, float toMoveTo, float scale) {

$LN8:
  00000	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  00006	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  0000c	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00010	57		 push	 rdi
  00011	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  0001c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00021	90		 npad	 1

; 356  : 	for (vertexIterator = 0; vertexIterator < quadTempLen; vertexIterator += stride) vertices[meshLoc + vertexIterator] = positionTemplate[GetOrigVertex(vertexIterator)] * scale + toMoveTo;

  00022	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR vertexIterator, 0
  0002c	eb 16		 jmp	 SHORT $LN4@MoveScaleM
$LN2@MoveScaleM:
  0002e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR stride
  00034	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR vertexIterator
  0003a	03 c8		 add	 ecx, eax
  0003c	8b c1		 mov	 eax, ecx
  0003e	89 05 00 00 00
	00		 mov	 DWORD PTR vertexIterator, eax
$LN4@MoveScaleM:
  00044	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  0004a	39 05 00 00 00
	00		 cmp	 DWORD PTR vertexIterator, eax
  00050	73 67		 jae	 SHORT $LN3@MoveScaleM

; 114  : 	return vertex - vertex / stride * (stride - 2);

  00052	33 d2		 xor	 edx, edx
  00054	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  0005a	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  00060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR stride
  00066	83 e9 02	 sub	 ecx, 2
  00069	0f af c1	 imul	 eax, ecx
  0006c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR vertexIterator
  00072	2b c8		 sub	 ecx, eax
  00074	8b c1		 mov	 eax, ecx
  00076	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax

; 356  : 	for (vertexIterator = 0; vertexIterator < quadTempLen; vertexIterator += stride) vertices[meshLoc + vertexIterator] = positionTemplate[GetOrigVertex(vertexIterator)] * scale + toMoveTo;

  0007a	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  0007e	48 98		 cdqe
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:positionTemplate
  00087	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  0008c	f3 0f 59 44 24
	50		 mulss	 xmm0, DWORD PTR scale$[rsp]
  00092	f3 0f 58 44 24
	48		 addss	 xmm0, DWORD PTR toMoveTo$[rsp]
  00098	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  0009e	8b 4c 24 40	 mov	 ecx, DWORD PTR meshLoc$[rsp]
  000a2	03 c8		 add	 ecx, eax
  000a4	8b c1		 mov	 eax, ecx
  000a6	8b c0		 mov	 eax, eax
  000a8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  000af	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0
  000b4	e9 75 ff ff ff	 jmp	 $LN2@MoveScaleM
$LN3@MoveScaleM:

; 357  : }

  000b9	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000bd	5f		 pop	 rdi
  000be	c3		 ret	 0
MoveScaleMeshX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
$T1 = 32
meshLoc$ = 64
toMoveTo$ = 72
scale$ = 80
MoveScaleMeshY PROC

; 358  : void MoveScaleMeshY(uint meshLoc, float toMoveTo, float scale) {

$LN8:
  00000	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  00006	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  0000c	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00010	57		 push	 rdi
  00011	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  0001c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00021	90		 npad	 1

; 359  : 	for (vertexIterator = 1; vertexIterator < quadTempLen; vertexIterator += stride) vertices[meshLoc + vertexIterator] = positionTemplate[GetOrigVertex(vertexIterator)] * scale + toMoveTo;

  00022	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR vertexIterator, 1
  0002c	eb 16		 jmp	 SHORT $LN4@MoveScaleM
$LN2@MoveScaleM:
  0002e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR stride
  00034	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR vertexIterator
  0003a	03 c8		 add	 ecx, eax
  0003c	8b c1		 mov	 eax, ecx
  0003e	89 05 00 00 00
	00		 mov	 DWORD PTR vertexIterator, eax
$LN4@MoveScaleM:
  00044	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  0004a	39 05 00 00 00
	00		 cmp	 DWORD PTR vertexIterator, eax
  00050	73 67		 jae	 SHORT $LN3@MoveScaleM

; 114  : 	return vertex - vertex / stride * (stride - 2);

  00052	33 d2		 xor	 edx, edx
  00054	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  0005a	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  00060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR stride
  00066	83 e9 02	 sub	 ecx, 2
  00069	0f af c1	 imul	 eax, ecx
  0006c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR vertexIterator
  00072	2b c8		 sub	 ecx, eax
  00074	8b c1		 mov	 eax, ecx
  00076	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax

; 359  : 	for (vertexIterator = 1; vertexIterator < quadTempLen; vertexIterator += stride) vertices[meshLoc + vertexIterator] = positionTemplate[GetOrigVertex(vertexIterator)] * scale + toMoveTo;

  0007a	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  0007e	48 98		 cdqe
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:positionTemplate
  00087	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  0008c	f3 0f 59 44 24
	50		 mulss	 xmm0, DWORD PTR scale$[rsp]
  00092	f3 0f 58 44 24
	48		 addss	 xmm0, DWORD PTR toMoveTo$[rsp]
  00098	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  0009e	8b 4c 24 40	 mov	 ecx, DWORD PTR meshLoc$[rsp]
  000a2	03 c8		 add	 ecx, eax
  000a4	8b c1		 mov	 eax, ecx
  000a6	8b c0		 mov	 eax, eax
  000a8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  000af	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0
  000b4	e9 75 ff ff ff	 jmp	 $LN2@MoveScaleM
$LN3@MoveScaleM:

; 360  : }

  000b9	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000bd	5f		 pop	 rdi
  000be	c3		 ret	 0
MoveScaleMeshY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
$T1 = 32
meshLoc$ = 64
toMoveTo$ = 72
MoveMeshX PROC

; 361  : void MoveMeshX(uint meshLoc, float toMoveTo) {

$LN8:
  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	90		 npad	 1

; 362  : 	for (vertexIterator = 0; vertexIterator < quadTempLen; vertexIterator += stride) vertices[meshLoc + vertexIterator] = positionTemplate[GetOrigVertex(vertexIterator)] + toMoveTo;

  0001c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR vertexIterator, 0
  00026	eb 16		 jmp	 SHORT $LN4@MoveMeshX
$LN2@MoveMeshX:
  00028	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR stride
  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR vertexIterator
  00034	03 c8		 add	 ecx, eax
  00036	8b c1		 mov	 eax, ecx
  00038	89 05 00 00 00
	00		 mov	 DWORD PTR vertexIterator, eax
$LN4@MoveMeshX:
  0003e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  00044	39 05 00 00 00
	00		 cmp	 DWORD PTR vertexIterator, eax
  0004a	73 61		 jae	 SHORT $LN3@MoveMeshX

; 114  : 	return vertex - vertex / stride * (stride - 2);

  0004c	33 d2		 xor	 edx, edx
  0004e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  00054	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  0005a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR stride
  00060	83 e9 02	 sub	 ecx, 2
  00063	0f af c1	 imul	 eax, ecx
  00066	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR vertexIterator
  0006c	2b c8		 sub	 ecx, eax
  0006e	8b c1		 mov	 eax, ecx
  00070	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax

; 362  : 	for (vertexIterator = 0; vertexIterator < quadTempLen; vertexIterator += stride) vertices[meshLoc + vertexIterator] = positionTemplate[GetOrigVertex(vertexIterator)] + toMoveTo;

  00074	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00078	48 98		 cdqe
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:positionTemplate
  00081	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  00086	f3 0f 58 44 24
	48		 addss	 xmm0, DWORD PTR toMoveTo$[rsp]
  0008c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  00092	8b 4c 24 40	 mov	 ecx, DWORD PTR meshLoc$[rsp]
  00096	03 c8		 add	 ecx, eax
  00098	8b c1		 mov	 eax, ecx
  0009a	8b c0		 mov	 eax, eax
  0009c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  000a3	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0
  000a8	e9 7b ff ff ff	 jmp	 $LN2@MoveMeshX
$LN3@MoveMeshX:

; 363  : }

  000ad	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b1	5f		 pop	 rdi
  000b2	c3		 ret	 0
MoveMeshX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
$T1 = 32
meshLoc$ = 64
toMoveTo$ = 72
MoveMeshY PROC

; 364  : void MoveMeshY(uint meshLoc, float toMoveTo) {

$LN8:
  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	90		 npad	 1

; 365  : 	for (vertexIterator = 1; vertexIterator < quadTempLen; vertexIterator += stride) vertices[meshLoc + vertexIterator] = positionTemplate[GetOrigVertex(vertexIterator)] + toMoveTo;

  0001c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR vertexIterator, 1
  00026	eb 16		 jmp	 SHORT $LN4@MoveMeshY
$LN2@MoveMeshY:
  00028	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR stride
  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR vertexIterator
  00034	03 c8		 add	 ecx, eax
  00036	8b c1		 mov	 eax, ecx
  00038	89 05 00 00 00
	00		 mov	 DWORD PTR vertexIterator, eax
$LN4@MoveMeshY:
  0003e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  00044	39 05 00 00 00
	00		 cmp	 DWORD PTR vertexIterator, eax
  0004a	73 61		 jae	 SHORT $LN3@MoveMeshY

; 114  : 	return vertex - vertex / stride * (stride - 2);

  0004c	33 d2		 xor	 edx, edx
  0004e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  00054	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  0005a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR stride
  00060	83 e9 02	 sub	 ecx, 2
  00063	0f af c1	 imul	 eax, ecx
  00066	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR vertexIterator
  0006c	2b c8		 sub	 ecx, eax
  0006e	8b c1		 mov	 eax, ecx
  00070	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax

; 365  : 	for (vertexIterator = 1; vertexIterator < quadTempLen; vertexIterator += stride) vertices[meshLoc + vertexIterator] = positionTemplate[GetOrigVertex(vertexIterator)] + toMoveTo;

  00074	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00078	48 98		 cdqe
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:positionTemplate
  00081	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  00086	f3 0f 58 44 24
	48		 addss	 xmm0, DWORD PTR toMoveTo$[rsp]
  0008c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  00092	8b 4c 24 40	 mov	 ecx, DWORD PTR meshLoc$[rsp]
  00096	03 c8		 add	 ecx, eax
  00098	8b c1		 mov	 eax, ecx
  0009a	8b c0		 mov	 eax, eax
  0009c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  000a3	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0
  000a8	e9 7b ff ff ff	 jmp	 $LN2@MoveMeshY
$LN3@MoveMeshY:

; 366  : }

  000ad	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b1	5f		 pop	 rdi
  000b2	c3		 ret	 0
MoveMeshY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
indRight$ = 32
indLeft$ = 36
strideTakeTwo$ = 40
tv76 = 44
meshLoc$ = 64
position$ = 72
scale$ = 80
MoveScaleMesh PROC

; 367  : void MoveScaleMesh(uint meshLoc, Vector2 position, Vector2 scale) {

$LN8:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 368  : 	float indRight = 0;

  0001f	0f 57 c0	 xorps	 xmm0, xmm0
  00022	f3 0f 11 44 24
	20		 movss	 DWORD PTR indRight$[rsp], xmm0

; 369  : 	float indLeft;
; 370  : 	uint strideTakeTwo = stride - 2;

  00028	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR stride
  0002e	83 e8 02	 sub	 eax, 2
  00031	89 44 24 28	 mov	 DWORD PTR strideTakeTwo$[rsp], eax

; 371  : 	for (vertexIterator = 0; vertexIterator < quadTempLen; vertexIterator += (indRight * strideTakeTwo) + 1) {

  00035	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR vertexIterator, 0
  0003f	eb 3b		 jmp	 SHORT $LN4@MoveScaleM
$LN2@MoveScaleM:
  00041	8b 44 24 28	 mov	 eax, DWORD PTR strideTakeTwo$[rsp]
  00045	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  0004a	f3 0f 10 4c 24
	20		 movss	 xmm1, DWORD PTR indRight$[rsp]
  00050	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00054	0f 28 c1	 movaps	 xmm0, xmm1
  00057	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  0005f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  00065	f3 48 0f 2a c8	 cvtsi2ss xmm1, rax
  0006a	f3 0f 58 c8	 addss	 xmm1, xmm0
  0006e	0f 28 c1	 movaps	 xmm0, xmm1
  00071	f3 48 0f 2c c0	 cvttss2si rax, xmm0
  00076	89 05 00 00 00
	00		 mov	 DWORD PTR vertexIterator, eax
$LN4@MoveScaleM:
  0007c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  00082	39 05 00 00 00
	00		 cmp	 DWORD PTR vertexIterator, eax
  00088	0f 83 c2 00 00
	00		 jae	 $LN3@MoveScaleM

; 372  : 		indRight = vertexIterator % stride;

  0008e	33 d2		 xor	 edx, edx
  00090	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  00096	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  0009c	8b c2		 mov	 eax, edx
  0009e	8b c0		 mov	 eax, eax
  000a0	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  000a5	f3 0f 11 44 24
	20		 movss	 DWORD PTR indRight$[rsp], xmm0

; 373  : 		indLeft = !indRight;

  000ab	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR indRight$[rsp]
  000b1	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  000b8	7a 0c		 jp	 SHORT $LN6@MoveScaleM
  000ba	75 0a		 jne	 SHORT $LN6@MoveScaleM
  000bc	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv76[rsp], 1
  000c4	eb 08		 jmp	 SHORT $LN7@MoveScaleM
$LN6@MoveScaleM:
  000c6	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv76[rsp], 0
$LN7@MoveScaleM:
  000ce	f3 0f 2a 44 24
	2c		 cvtsi2ss xmm0, DWORD PTR tv76[rsp]
  000d4	f3 0f 11 44 24
	24		 movss	 DWORD PTR indLeft$[rsp], xmm0

; 374  : 		vertices[meshLoc + vertexIterator] = quadTemplate[vertexIterator] * (indLeft * scale.x + indRight * scale.y) + (indLeft * position.x + indRight * position.y);

  000da	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:quadTemplate
  000e7	f3 0f 10 44 24
	24		 movss	 xmm0, DWORD PTR indLeft$[rsp]
  000ed	f3 0f 59 44 24
	50		 mulss	 xmm0, DWORD PTR scale$[rsp]
  000f3	f3 0f 10 4c 24
	20		 movss	 xmm1, DWORD PTR indRight$[rsp]
  000f9	f3 0f 59 4c 24
	54		 mulss	 xmm1, DWORD PTR scale$[rsp+4]
  000ff	f3 0f 58 c1	 addss	 xmm0, xmm1
  00103	f3 0f 10 0c 81	 movss	 xmm1, DWORD PTR [rcx+rax*4]
  00108	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0010c	0f 28 c1	 movaps	 xmm0, xmm1
  0010f	f3 0f 10 4c 24
	24		 movss	 xmm1, DWORD PTR indLeft$[rsp]
  00115	f3 0f 59 4c 24
	48		 mulss	 xmm1, DWORD PTR position$[rsp]
  0011b	f3 0f 10 54 24
	20		 movss	 xmm2, DWORD PTR indRight$[rsp]
  00121	f3 0f 59 54 24
	4c		 mulss	 xmm2, DWORD PTR position$[rsp+4]
  00127	f3 0f 58 ca	 addss	 xmm1, xmm2
  0012b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0012f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  00135	8b 4c 24 40	 mov	 ecx, DWORD PTR meshLoc$[rsp]
  00139	03 c8		 add	 ecx, eax
  0013b	8b c1		 mov	 eax, ecx
  0013d	8b c0		 mov	 eax, eax
  0013f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  00146	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 375  : 	}

  0014b	e9 f1 fe ff ff	 jmp	 $LN2@MoveScaleM
$LN3@MoveScaleM:

; 376  : }

  00150	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00154	5f		 pop	 rdi
  00155	c3		 ret	 0
MoveScaleMesh ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
indRight$ = 32
indLeft$ = 36
tv75 = 40
meshLoc$ = 64
position$ = 72
MoveMeshTo PROC

; 377  : void MoveMeshTo(unsigned int meshLoc, Vector2 position) {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	57		 push	 rdi
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00015	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001a	90		 npad	 1

; 378  : 	float indRight;
; 379  : 	float indLeft;
; 380  : 	for (vertexIterator = 0; vertexIterator < quadTempLen; vertexIterator += (indRight * strideTakeTwo) + 1) {

  0001b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR vertexIterator, 0
  00025	eb 3d		 jmp	 SHORT $LN4@MoveMeshTo
$LN2@MoveMeshTo:
  00027	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR strideTakeTwo
  0002d	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  00032	f3 0f 10 4c 24
	20		 movss	 xmm1, DWORD PTR indRight$[rsp]
  00038	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0003c	0f 28 c1	 movaps	 xmm0, xmm1
  0003f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00047	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  0004d	f3 48 0f 2a c8	 cvtsi2ss xmm1, rax
  00052	f3 0f 58 c8	 addss	 xmm1, xmm0
  00056	0f 28 c1	 movaps	 xmm0, xmm1
  00059	f3 48 0f 2c c0	 cvttss2si rax, xmm0
  0005e	89 05 00 00 00
	00		 mov	 DWORD PTR vertexIterator, eax
$LN4@MoveMeshTo:
  00064	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  0006a	39 05 00 00 00
	00		 cmp	 DWORD PTR vertexIterator, eax
  00070	0f 83 a2 00 00
	00		 jae	 $LN3@MoveMeshTo

; 381  : 		indRight = vertexIterator % stride;

  00076	33 d2		 xor	 edx, edx
  00078	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  0007e	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  00084	8b c2		 mov	 eax, edx
  00086	8b c0		 mov	 eax, eax
  00088	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  0008d	f3 0f 11 44 24
	20		 movss	 DWORD PTR indRight$[rsp], xmm0

; 382  : 		indLeft = !indRight;

  00093	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR indRight$[rsp]
  00099	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  000a0	7a 0c		 jp	 SHORT $LN6@MoveMeshTo
  000a2	75 0a		 jne	 SHORT $LN6@MoveMeshTo
  000a4	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  000ac	eb 08		 jmp	 SHORT $LN7@MoveMeshTo
$LN6@MoveMeshTo:
  000ae	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN7@MoveMeshTo:
  000b6	f3 0f 2a 44 24
	28		 cvtsi2ss xmm0, DWORD PTR tv75[rsp]
  000bc	f3 0f 11 44 24
	24		 movss	 DWORD PTR indLeft$[rsp], xmm0

; 383  : 		vertices[meshLoc + vertexIterator] = quadTemplate[vertexIterator] + (indLeft * position.x + indRight * position.y);

  000c2	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:quadTemplate
  000cf	f3 0f 10 44 24
	24		 movss	 xmm0, DWORD PTR indLeft$[rsp]
  000d5	f3 0f 59 44 24
	48		 mulss	 xmm0, DWORD PTR position$[rsp]
  000db	f3 0f 10 4c 24
	20		 movss	 xmm1, DWORD PTR indRight$[rsp]
  000e1	f3 0f 59 4c 24
	4c		 mulss	 xmm1, DWORD PTR position$[rsp+4]
  000e7	f3 0f 58 c1	 addss	 xmm0, xmm1
  000eb	f3 0f 10 0c 81	 movss	 xmm1, DWORD PTR [rcx+rax*4]
  000f0	f3 0f 58 c8	 addss	 xmm1, xmm0
  000f4	0f 28 c1	 movaps	 xmm0, xmm1
  000f7	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  000fd	8b 4c 24 40	 mov	 ecx, DWORD PTR meshLoc$[rsp]
  00101	03 c8		 add	 ecx, eax
  00103	8b c1		 mov	 eax, ecx
  00105	8b c0		 mov	 eax, eax
  00107	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  0010e	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 384  : 	}

  00113	e9 0f ff ff ff	 jmp	 $LN2@MoveMeshTo
$LN3@MoveMeshTo:

; 385  : }

  00118	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0011c	5f		 pop	 rdi
  0011d	c3		 ret	 0
MoveMeshTo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
indRight$ = 32
meshLoc$ = 64
scaleX$ = 72
scaleY$ = 80
ScaleMesh PROC

; 386  : void ScaleMesh(uint meshLoc, float scaleX, float scaleY) {

$LN6:
  00000	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  00006	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  0000c	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00010	57		 push	 rdi
  00011	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  0001c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 387  : 	char indRight = 0;

  00021	c6 44 24 20 00	 mov	 BYTE PTR indRight$[rsp], 0

; 388  : 	for (vertexIterator = 0; vertexIterator < quadTempLen; vertexIterator += ((indRight = (vertexIterator) % stride) * strideTakeTwo) + 1) {

  00026	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR vertexIterator, 0
  00030	eb 30		 jmp	 SHORT $LN4@ScaleMesh
$LN2@ScaleMesh:
  00032	33 d2		 xor	 edx, edx
  00034	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  0003a	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  00040	8b c2		 mov	 eax, edx
  00042	88 44 24 20	 mov	 BYTE PTR indRight$[rsp], al
  00046	0f be 44 24 20	 movsx	 eax, BYTE PTR indRight$[rsp]
  0004b	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR strideTakeTwo
  00052	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR vertexIterator
  00058	8d 44 01 01	 lea	 eax, DWORD PTR [rcx+rax+1]
  0005c	89 05 00 00 00
	00		 mov	 DWORD PTR vertexIterator, eax
$LN4@ScaleMesh:
  00062	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  00068	39 05 00 00 00
	00		 cmp	 DWORD PTR vertexIterator, eax
  0006e	73 5f		 jae	 SHORT $LN3@ScaleMesh

; 389  : 		vertices[meshLoc + vertexIterator] = quadTemplate[vertexIterator] * ((indRight ^ 1) * scaleX + indRight * scaleY);

  00070	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:quadTemplate
  0007d	0f be 54 24 20	 movsx	 edx, BYTE PTR indRight$[rsp]
  00082	83 f2 01	 xor	 edx, 1
  00085	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00089	f3 0f 59 44 24
	48		 mulss	 xmm0, DWORD PTR scaleX$[rsp]
  0008f	0f be 54 24 20	 movsx	 edx, BYTE PTR indRight$[rsp]
  00094	f3 0f 2a ca	 cvtsi2ss xmm1, edx
  00098	f3 0f 59 4c 24
	50		 mulss	 xmm1, DWORD PTR scaleY$[rsp]
  0009e	f3 0f 58 c1	 addss	 xmm0, xmm1
  000a2	f3 0f 10 0c 81	 movss	 xmm1, DWORD PTR [rcx+rax*4]
  000a7	f3 0f 59 c8	 mulss	 xmm1, xmm0
  000ab	0f 28 c1	 movaps	 xmm0, xmm1
  000ae	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  000b4	8b 4c 24 40	 mov	 ecx, DWORD PTR meshLoc$[rsp]
  000b8	03 c8		 add	 ecx, eax
  000ba	8b c1		 mov	 eax, ecx
  000bc	8b c0		 mov	 eax, eax
  000be	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  000c5	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 390  : 	}

  000ca	e9 63 ff ff ff	 jmp	 $LN2@ScaleMesh
$LN3@ScaleMesh:

; 391  : }

  000cf	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d3	5f		 pop	 rdi
  000d4	c3		 ret	 0
ScaleMesh ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
meshLoc$ = 48
scaleX$ = 56
ScaleMeshX PROC

; 392  : void ScaleMeshX(uint meshLoc, float scaleX) {

$LN6:
  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	90		 npad	 1

; 393  : 	for (vertexIterator = 0; vertexIterator < quadTempLen; vertexIterator += stride) vertices[meshLoc + vertexIterator] = quadTemplate[vertexIterator] * scaleX;

  0001c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR vertexIterator, 0
  00026	eb 16		 jmp	 SHORT $LN4@ScaleMeshX
$LN2@ScaleMeshX:
  00028	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR stride
  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR vertexIterator
  00034	03 c8		 add	 ecx, eax
  00036	8b c1		 mov	 eax, ecx
  00038	89 05 00 00 00
	00		 mov	 DWORD PTR vertexIterator, eax
$LN4@ScaleMeshX:
  0003e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  00044	39 05 00 00 00
	00		 cmp	 DWORD PTR vertexIterator, eax
  0004a	73 36		 jae	 SHORT $LN3@ScaleMeshX
  0004c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  00052	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:quadTemplate
  00059	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  0005e	f3 0f 59 44 24
	38		 mulss	 xmm0, DWORD PTR scaleX$[rsp]
  00064	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  0006a	8b 4c 24 30	 mov	 ecx, DWORD PTR meshLoc$[rsp]
  0006e	03 c8		 add	 ecx, eax
  00070	8b c1		 mov	 eax, ecx
  00072	8b c0		 mov	 eax, eax
  00074	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  0007b	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0
  00080	eb a6		 jmp	 SHORT $LN2@ScaleMeshX
$LN3@ScaleMeshX:

; 394  : }

  00082	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00086	5f		 pop	 rdi
  00087	c3		 ret	 0
ScaleMeshX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
indRight$ = 32
meshLoc$ = 64
scaleY$ = 72
ScaleMeshY PROC

; 395  : void ScaleMeshY(uint meshLoc, float scaleY) {

$LN6:
  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 396  : 	char indRight = NULL;

  0001b	c6 44 24 20 00	 mov	 BYTE PTR indRight$[rsp], 0

; 397  : 	for (vertexIterator = 1; vertexIterator < quadTempLen; vertexIterator += stride) vertices[meshLoc + vertexIterator] = quadTemplate[vertexIterator] * scaleY;

  00020	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR vertexIterator, 1
  0002a	eb 16		 jmp	 SHORT $LN4@ScaleMeshY
$LN2@ScaleMeshY:
  0002c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR stride
  00032	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR vertexIterator
  00038	03 c8		 add	 ecx, eax
  0003a	8b c1		 mov	 eax, ecx
  0003c	89 05 00 00 00
	00		 mov	 DWORD PTR vertexIterator, eax
$LN4@ScaleMeshY:
  00042	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  00048	39 05 00 00 00
	00		 cmp	 DWORD PTR vertexIterator, eax
  0004e	73 36		 jae	 SHORT $LN3@ScaleMeshY
  00050	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  00056	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:quadTemplate
  0005d	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  00062	f3 0f 59 44 24
	48		 mulss	 xmm0, DWORD PTR scaleY$[rsp]
  00068	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR vertexIterator
  0006e	8b 4c 24 40	 mov	 ecx, DWORD PTR meshLoc$[rsp]
  00072	03 c8		 add	 ecx, eax
  00074	8b c1		 mov	 eax, ecx
  00076	8b c0		 mov	 eax, eax
  00078	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  0007f	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0
  00084	eb a6		 jmp	 SHORT $LN2@ScaleMeshY
$LN3@ScaleMeshY:

; 398  : }

  00086	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008a	5f		 pop	 rdi
  0008b	c3		 ret	 0
ScaleMeshY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c
_TEXT	SEGMENT
left$ = 32
i$1 = 36
$T2 = 40
tv67 = 44
tv130 = 48
tv137 = 56
tv145 = 60
tv147 = 64
mesh$ = 96
newVertices$ = 104
ChangeTexCoordTo PROC

; 400  : void ChangeTexCoordTo(Mesh* mesh, Vector2* newVertices) {

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 401  : 	bool left = true;

  0001b	c6 44 24 20 01	 mov	 BYTE PTR left$[rsp], 1

; 402  : 	for (uint i = TEX_COORD_X_OFFSET; i < quadTempLen; i += ((left = !((i - (TEX_COORD_X_OFFSET + 1)) % stride)) * (stride - 2)) + 1) {

  00020	c7 44 24 24 02
	00 00 00	 mov	 DWORD PTR i$1[rsp], 2
  00028	eb 4d		 jmp	 SHORT $LN4@ChangeTexC
$LN2@ChangeTexC:
  0002a	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  0002e	83 e8 03	 sub	 eax, 3
  00031	33 d2		 xor	 edx, edx
  00033	f7 35 00 00 00
	00		 div	 DWORD PTR stride
  00039	8b c2		 mov	 eax, edx
  0003b	85 c0		 test	 eax, eax
  0003d	75 0a		 jne	 SHORT $LN6@ChangeTexC
  0003f	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv67[rsp], 1
  00047	eb 08		 jmp	 SHORT $LN7@ChangeTexC
$LN6@ChangeTexC:
  00049	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv67[rsp], 0
$LN7@ChangeTexC:
  00051	0f b6 44 24 2c	 movzx	 eax, BYTE PTR tv67[rsp]
  00056	88 44 24 20	 mov	 BYTE PTR left$[rsp], al
  0005a	0f b6 44 24 20	 movzx	 eax, BYTE PTR left$[rsp]
  0005f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR stride
  00065	83 e9 02	 sub	 ecx, 2
  00068	0f af c1	 imul	 eax, ecx
  0006b	8b 4c 24 24	 mov	 ecx, DWORD PTR i$1[rsp]
  0006f	8d 44 01 01	 lea	 eax, DWORD PTR [rcx+rax+1]
  00073	89 44 24 24	 mov	 DWORD PTR i$1[rsp], eax
$LN4@ChangeTexC:
  00077	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR quadTempLen
  0007d	39 44 24 24	 cmp	 DWORD PTR i$1[rsp], eax
  00081	0f 83 ef 00 00
	00		 jae	 $LN3@ChangeTexC

; 403  : 		vertices[i + mesh->meshLocation] = Branch(newVertices[I_InRange(i, stride - 1, stride * 3 - 1)].x, newVertices[i > (stride * 2 - 1)].y, left);

  00087	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR stride
  0008d	8d 44 00 ff	 lea	 eax, DWORD PTR [rax+rax-1]
  00091	39 44 24 24	 cmp	 DWORD PTR i$1[rsp], eax
  00095	76 0b		 jbe	 SHORT $LN8@ChangeTexC
  00097	48 c7 44 24 30
	01 00 00 00	 mov	 QWORD PTR tv130[rsp], 1
  000a0	eb 09		 jmp	 SHORT $LN9@ChangeTexC
$LN8@ChangeTexC:
  000a2	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv130[rsp], 0
$LN9@ChangeTexC:
  000ab	0f b6 44 24 20	 movzx	 eax, BYTE PTR left$[rsp]
  000b0	85 c0		 test	 eax, eax
  000b2	75 0a		 jne	 SHORT $LN10@ChangeTexC
  000b4	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv137[rsp], 1
  000bc	eb 08		 jmp	 SHORT $LN11@ChangeTexC
$LN10@ChangeTexC:
  000be	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv137[rsp], 0
$LN11@ChangeTexC:
  000c6	6b 05 00 00 00
	00 03		 imul	 eax, DWORD PTR stride, 3
  000cd	ff c8		 dec	 eax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h

; 87   : 	return i < max && i > min;

  000cf	39 44 24 24	 cmp	 DWORD PTR i$1[rsp], eax
  000d3	7d 18		 jge	 SHORT $LN14@ChangeTexC
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c

; 403  : 		vertices[i + mesh->meshLocation] = Branch(newVertices[I_InRange(i, stride - 1, stride * 3 - 1)].x, newVertices[i > (stride * 2 - 1)].y, left);

  000d5	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR stride
  000db	ff c8		 dec	 eax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h

; 87   : 	return i < max && i > min;

  000dd	39 44 24 24	 cmp	 DWORD PTR i$1[rsp], eax
  000e1	7e 0a		 jle	 SHORT $LN14@ChangeTexC
  000e3	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv145[rsp], 1
  000eb	eb 08		 jmp	 SHORT $LN15@ChangeTexC
$LN14@ChangeTexC:
  000ed	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv145[rsp], 0
$LN15@ChangeTexC:
  000f5	83 7c 24 3c 00	 cmp	 DWORD PTR tv145[rsp], 0
  000fa	75 0a		 jne	 SHORT $LN16@ChangeTexC
  000fc	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  00104	eb 08		 jmp	 SHORT $LN17@ChangeTexC
$LN16@ChangeTexC:
  00106	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv147[rsp], 1
$LN17@ChangeTexC:
  0010e	0f b6 44 24 40	 movzx	 eax, BYTE PTR tv147[rsp]
  00113	88 44 24 28	 mov	 BYTE PTR $T2[rsp], al
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.c

; 403  : 		vertices[i + mesh->meshLocation] = Branch(newVertices[I_InRange(i, stride - 1, stride * 3 - 1)].x, newVertices[i > (stride * 2 - 1)].y, left);

  00117	0f b6 44 24 28	 movzx	 eax, BYTE PTR $T2[rsp]
  0011c	0f b6 c0	 movzx	 eax, al
  0011f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR newVertices$[rsp]
  00124	f3 0f 10 04 c1	 movss	 xmm0, DWORD PTR [rcx+rax*8]
  00129	0f b6 44 24 20	 movzx	 eax, BYTE PTR left$[rsp]
  0012e	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00132	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00136	48 8b 44 24 68	 mov	 rax, QWORD PTR newVertices$[rsp]
  0013b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv130[rsp]
  00140	f3 0f 10 4c c8
	04		 movss	 xmm1, DWORD PTR [rax+rcx*8+4]
  00146	f3 0f 2a 54 24
	38		 cvtsi2ss xmm2, DWORD PTR tv137[rsp]
  0014c	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00150	f3 0f 58 c1	 addss	 xmm0, xmm1
  00154	48 8b 44 24 60	 mov	 rax, QWORD PTR mesh$[rsp]
  00159	8b 00		 mov	 eax, DWORD PTR [rax]
  0015b	8b 4c 24 24	 mov	 ecx, DWORD PTR i$1[rsp]
  0015f	03 c8		 add	 ecx, eax
  00161	8b c1		 mov	 eax, ecx
  00163	8b c0		 mov	 eax, eax
  00165	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR vertices
  0016c	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 404  : 		//printf("assigned %u to %f, %s\n", i, vertices[i + mesh->meshLocation], BoolToStr(left));
; 405  : 	}

  00171	e9 b4 fe ff ff	 jmp	 $LN2@ChangeTexC
$LN3@ChangeTexC:

; 406  : }

  00176	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0017a	5f		 pop	 rdi
  0017b	c3		 ret	 0
ChangeTexCoordTo ENDP
_TEXT	ENDS
END
