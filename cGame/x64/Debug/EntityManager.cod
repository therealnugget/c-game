; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35211.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	cells
PUBLIC	oneBVector
PUBLIC	zeroVector
PUBLIC	cellCheckStates
PUBLIC	zeroBVector
PUBLIC	entityHead
EXTRN	__imp_roundf:PROC
cells	DQ	0100000H DUP (?)
zeroVector DQ	01H DUP (?)
cellCheckStates DB 0100000H DUP (?)
zeroBVector DW	01H DUP (?)
	ALIGN	8

entityHead DQ	01H DUP (?)
COMM	scale:WORD
COMM	curCheckedCell:QWORD
COMM	onRight:BYTE
COMM	prevCheckedCell:QWORD
COMM	curSliderNode:QWORD
COMM	checkColPtrVal:QWORD
COMM	onTop:BYTE
COMM	curAnimator:QWORD
COMM	index:DWORD
COMM	curNode:QWORD
COMM	subData:QWORD
COMM	curAnimInd:DWORD
COMM	curSquishable:QWORD
COMM	onLeft:BYTE
COMM	deltaT:DWORD
COMM	curSquishMesh:QWORD
COMM	curCollider:QWORD
COMM	posIsZeroVec:BYTE
COMM	curData:QWORD
COMM	curMesh:QWORD
COMM	subCollider:QWORD
COMM	checkedSub:BYTE
COMM	curSlider:QWORD
COMM	curColPtrVal:QWORD
COMM	curEntity:QWORD
COMM	subBorderIndex:DWORD
COMM	onBottom:BYTE
COMM	solveIndex:DWORD
_DATA	ENDS
oneBVector DB	01H
	DB	01H
__8C83BECC_concurrencysal@h DB 01H
__608E3340_sal@h DB 01H
__FB67E29A_vadefs@h DB 01H
__1D1B619C_vcruntime@h DB 01H
__735960E1_corecrt@h DB 01H
__211DB995_corecrt_malloc@h DB 01H
__4C2AD0C7_winpackagefamily@h DB 01H
__9DED9ED1_winapifamily@h DB 01H
__12FEDF4E_sdkddkver@h DB 01H
__9BAEE128_excpt@h DB 01H
__B7B53233_stdarg@h DB 01H
__6B04FCB3_specstrings_undef@h DB 01H
__F4027AF7_specstrings_strict@h DB 01H
__B90340D4_sdv_driverspecs@h DB 01H
__BFFF5AD3_driverspecs@h DB 01H
__32847078_specstrings@h DB 01H
__108B2620_corecrt_wctype@h DB 01H
__6CD6613D_ctype@h DB 01H
__30902A1F_kernelspecs@h DB 01H
__376FD5CA_basetsd@h DB 01H
__13DE2371_errno@h DB 01H
__8C6AE390_vcruntime_string@h DB 01H
__8ACB2152_corecrt_memcpy_s@h DB 01H
__EA6C9D17_corecrt_memory@h DB 01H
__0DF2AF52_corecrt_wstring@h DB 01H
__6E889ECC_string@h DB 01H
__9BEDF4DE_guiddef@h DB 01H
__51BFD2FE_pshpack4@h DB 01H
__31652CEA_poppack@h DB 01H
__5532AE4C_pshpack2@h DB 01H
__58A52B9A_pshpack8@h DB 01H
__57741015_pshpack1@h DB 01H
__CDE68C90_apiset@h DB 01H
__0BF06E8D_ktmtypes@h DB 01H
__40C200C0_winnt@h DB 01H
__9336F789_minwindef@h DB 01H
__55136115_windef@h DB 01H
__32205BF0_apisetcconv@h DB 01H
__B48FDEA0_minwinbase@h DB 01H
__3551B028_apiquery2@h DB 01H
__65BE04AA_processenv@h DB 01H
__4767CA46_fileapi@h DB 01H
__282E6C4B_fileapifromapp@h DB 01H
__393AF12C_debugapi@h DB 01H
__EBC502B8_utilapiset@h DB 01H
__1EAD8C69_handleapi@h DB 01H
__D8EF9B29_errhandlingapi@h DB 01H
__97FC1204_fibersapi@h DB 01H
__27448220_namedpipeapi@h DB 01H
__6EA33B2A_profileapi@h DB 01H
__EAC6F673_heapapi@h DB 01H
__D64EEA5A_ioapiset@h DB 01H
__144BD4B6_synchapi@h DB 01H
__03B1C640_interlockedapi@h DB 01H
__DC64CB38_processthreadsapi@h DB 01H
__D719B518_sysinfoapi@h DB 01H
__410385B1_memoryapi@h DB 01H
__C1AD45EF_enclaveapi@h DB 01H
__F4C3AA32_threadpoollegacyapiset@h DB 01H
__AC5A7A9F_threadpoolapiset@h DB 01H
__F5254B21_jobapi@h DB 01H
__BCEA6EE8_jobapi2@h DB 01H
__D18ACE72_wow64apiset@h DB 01H
__669B0D4A_libloaderapi@h DB 01H
__645F7034_securitybaseapi@h DB 01H
__67E58557_namespaceapi@h DB 01H
__599D9D3A_systemtopologyapi@h DB 01H
__2337E373_processtopologyapi@h DB 01H
__02BFF239_securityappcontainer@h DB 01H
__9C196272_realtimeapiset@h DB 01H
__5AB313A4_winerror@h DB 01H
__B7E7187B_timezoneapi@h DB 01H
__6DE9EB6F_winbase@h DB 01H
__56B2AFF2_wingdi@h DB 01H
__BA1161A9_tvout@h DB 01H
__0501A018_winuser@h DB 01H
__EF12FA99_datetimeapi@h DB 01H
__8FA7C3CA_winnls@h DB 01H
__390F0C47_stringapiset@h DB 01H
__28605B0A_wincontypes@h DB 01H
__BFBDE86D_consoleapi@h DB 01H
__C3CAFBF0_consoleapi2@h DB 01H
__C20891C7_consoleapi3@h DB 01H
__717C98B6_wincon@h DB 01H
__2884C177_verrsrc@h DB 01H
__A3FD3A34_winver@h DB 01H
__6F8AD9F1_reason@h DB 01H
__4C90FD6F_winreg@h DB 01H
__68AFEBAD_wnnc@h DB 01H
__5A7AB086_winnetwk@h DB 01H
__859C3CD3_cderr@h DB 01H
__81B12F1A_dde@h DB 01H
__DD3AF97A_ddeml@h DB 01H
__E6B47715_dlgs@h DB 01H
__944BD57D_lzexpand@h DB 01H
__E4B2DFC7_mmsyscom@h DB 01H
__5287D88F_mciapi@h DB 01H
__DBDC1384_mmiscapi@h DB 01H
__1A78C0D7_mmiscapi2@h DB 01H
__0D05975C_playsoundapi@h DB 01H
__757A63A9_mmeapi@h DB 01H
__6326AB05_timeapi@h DB 01H
__77D483B2_joystickapi@h DB 01H
__59CF7431_mmsystem@h DB 01H
__CEAC417E_nb30@h DB 01H
__3BA1A118_rpcdcep@h DB 01H
__74064437_rpcdce@h DB 01H
__90546602_rpcnsi@h DB 01H
__83114A2C_rpcnterr@h DB 01H
__CA67519E_rpcasync@h DB 01H
__D8CEBCD8_rpc@h DB 01H
__9F43AC2D_shellapi@h DB 01H
__6C8D3703_winperf@h DB 01H
__AB40A29E_inaddr@h DB 01H
__40D4FEA5_winsock@h DB 01H
__51394074_bcrypt@h DB 01H
__F177C154_ncrypt@h DB 01H
__1445529E_dpapi@h DB 01H
__5743FB20_wincrypt@h DB 01H
__97CA12BF_winefs@h DB 01H
__6DF63719_rpcnsip@h DB 01H
__031EFCA1_rpcsal@h DB 01H
__BA08D1DA_rpcndr@h DB 01H
__3A941F83_wtypesbase@h DB 01H
__C244FEE1_wtypes@h DB 01H
__FB7C5F97_winioctl@h DB 01H
__4B65E4AC_winsmcrd@h DB 01H
__1EA80168_winscard@h DB 01H
__516FC0F9_prsht@h DB 01H
__88BA11C6_winspool@h DB 01H
__955456CD_stddef@h DB 01H
__99AED4FB_corecrt_search@h DB 01H
__8B813BF6_corecrt_wstdlib@h DB 01H
__3D1CA2C3_limits@h DB 01H
__E8FB0A68_stdlib@h DB 01H
__18DB4C56_unknwnbase@h DB 01H
__1AE6FA1A_objidlbase@h DB 01H
__7F98E437_cguid@h DB 01H
__6B2DFB49_combaseapi@h DB 01H
__CB0E8B37_unknwn@h DB 01H
__D981EF0A_objidl@h DB 01H
__37089EB8_oaidl@h DB 01H
__CA2DDD8B_propidlbase@h DB 01H
__39ED323E_coml2api@h DB 01H
__78E82682_oleidl@h DB 01H
__97883CFE_servprov@h DB 01H
__CE01DDB9_msxml@h DB 01H
__A4784895_urlmon@h DB 01H
__325F1C97_propidl@h DB 01H
__D3D43343_objbase@h DB 01H
__B3A2AF1B_oleauto@h DB 01H
__5722A8AA_ole2@h DB 01H
__590A450A_commdlg@h DB 01H
__2FE8A10C_stralign@h DB 01H
__34558472_winsvc@h DB 01H
__058845F1_mcx@h DB 01H
__7F16006B_ime_cmodes@h DB 01H
__0A3AF599_imm@h DB 01H
__11B87C25_Windows@h DB 01H
__0B1C67B3_gl@h DB 01H
__D7C03EE9_glu@h DB 01H
__5B769280_glew@h DB 01H
__F2638511_stdbool@h DB 01H
__836A8CFC_stdint@h DB 01H
__0A1327A7_glfw3@h DB 01H
__1D9A7FA2_corecrt_math@h DB 01H
__2E93F1C0_math@h DB 01H
__7570C268_vectors@h DB 01H
__60B45B40_corecrt_stdio_config@h DB 01H
__CFA3741E_corecrt_wstdio@h DB 01H
__B3FE3303_stdio@h DB 01H
__DD0D2CA2_main@h DB 01H
__9378A798_Debug@h DB 01H
__29DBA756_animations@h DB 01H
__A6D01AF2_Physics@h DB 01H
__1408441D_Mesh@h DB 01H
__7CA6EAD6_EntityManager@h DB 01H
__7BF3DF52_math@h DB 01H
__03D9FA9C_player@h DB 01H
__EB74335E_EntityManager@c DB 01H
$S1	DD	00H
	DD	01H
CONST	ENDS
PUBLIC	SortGridCell
PUBLIC	RemoveCellChecks
PUBLIC	InsertAtHeadCellChecks
PUBLIC	InsertAtHead
PUBLIC	RemoveEntAppropriate2
PUBLIC	ResetScaleUpdate
PUBLIC	ResetVertexUpdate
PUBLIC	limitedDeltaTime2
PUBLIC	GetVectorMidPoint
PUBLIC	GetVectorMidPoint2
PUBLIC	RemoveEntity
PUBLIC	RemoveEntityNode
PUBLIC	EntityInitialize
PUBLIC	UpdateSliders
PUBLIC	UpdateEntities
PUBLIC	UpdateSquishables
pdata	SEGMENT
$pdata$SortGridCell DD imagerel $LN13
	DD	imagerel $LN13+554
	DD	imagerel $unwind$SortGridCell
$pdata$RemoveCellChecks DD imagerel $LN5
	DD	imagerel $LN5+140
	DD	imagerel $unwind$RemoveCellChecks
$pdata$InsertAtHeadCellChecks DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$InsertAtHeadCellChecks
$pdata$InsertAtHead DD imagerel $LN4
	DD	imagerel $LN4+104
	DD	imagerel $unwind$InsertAtHead
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$RemoveEntAppropriate2 DD imagerel $LN6
	DD	imagerel $LN6+132
	DD	imagerel $unwind$RemoveEntAppropriate2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ResetScaleUpdate DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$ResetScaleUpdate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ResetVertexUpdate DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$ResetVertexUpdate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$limitedDeltaTime2 DD imagerel $LN13
	DD	imagerel $LN13+387
	DD	imagerel $unwind$limitedDeltaTime2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GetVectorMidPoint DD imagerel $LN9
	DD	imagerel $LN9+280
	DD	imagerel $unwind$GetVectorMidPoint
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GetVectorMidPoint2 DD imagerel $LN7
	DD	imagerel $LN7+240
	DD	imagerel $unwind$GetVectorMidPoint2
pdata	ENDS
pdata	SEGMENT
$pdata$RemoveEntity DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$RemoveEntity
$pdata$RemoveEntityNode DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$RemoveEntityNode
$pdata$EntityInitialize DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$EntityInitialize
$pdata$UpdateSliders DD imagerel $LN15
	DD	imagerel $LN15+475
	DD	imagerel $unwind$UpdateSliders
$pdata$UpdateEntities DD imagerel $LN210
	DD	imagerel $LN210+7036
	DD	imagerel $unwind$UpdateEntities
$pdata$UpdateSquishables DD imagerel $LN6
	DD	imagerel $LN6+125
	DD	imagerel $unwind$UpdateSquishables
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetVectorMidPoint2 DD 032b01H
	DD	01a0112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
GetVectorMidPoint2$rtcName$0 DB 076H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+1
GetVectorMidPoint2$rtcName$1 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
GetVectorMidPoint2$rtcName$2 DB 06cH
	DB	068H
	DB	073H
	DB	00H
GetVectorMidPoint2$rtcName$3 DB 072H
	DB	068H
	DB	073H
	DB	00H
GetVectorMidPoint2$rtcName$4 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
GetVectorMidPoint2$rtcVarDesc DD 0b8H
	DD	08H
	DQ	FLAT:GetVectorMidPoint2$rtcName$4
	DD	098H
	DD	08H
	DQ	FLAT:GetVectorMidPoint2$rtcName$3
	DD	078H
	DD	08H
	DQ	FLAT:GetVectorMidPoint2$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:GetVectorMidPoint2$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:GetVectorMidPoint2$rtcName$0
	ORG $+240
GetVectorMidPoint2$rtcFrameData DD 05H
	DD	00H
	DQ	FLAT:GetVectorMidPoint2$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetVectorMidPoint DD 032601H
	DD	01c010dH
	DD	07006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
GetVectorMidPoint$rtcName$0 DB 076H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+1
GetVectorMidPoint$rtcName$1 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
GetVectorMidPoint$rtcName$2 DB 06cH
	DB	068H
	DB	073H
	DB	00H
GetVectorMidPoint$rtcName$3 DB 072H
	DB	068H
	DB	073H
	DB	00H
GetVectorMidPoint$rtcName$4 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
GetVectorMidPoint$rtcVarDesc DD 0c8H
	DD	08H
	DQ	FLAT:GetVectorMidPoint$rtcName$4
	DD	0a8H
	DD	08H
	DQ	FLAT:GetVectorMidPoint$rtcName$3
	DD	088H
	DD	08H
	DQ	FLAT:GetVectorMidPoint$rtcName$2
	DD	068H
	DD	08H
	DQ	FLAT:GetVectorMidPoint$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:GetVectorMidPoint$rtcName$0
	ORG $+240
GetVectorMidPoint$rtcFrameData DD 05H
	DD	00H
	DQ	FLAT:GetVectorMidPoint$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$limitedDeltaTime2 DD 020b01H
	DD	07007920bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ResetVertexUpdate DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ResetScaleUpdate DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RemoveEntAppropriate2 DD 020e01H
	DD	0700a520eH
xdata	ENDS
xdata	SEGMENT
$unwind$SortGridCell DD 023519H
	DD	07006f20dH
	DD	imagerel __GSHandlerCheck
	DD	078H
$unwind$RemoveCellChecks DD 020a01H
	DD	07006520aH
$unwind$InsertAtHeadCellChecks DD 020f01H
	DD	0700b320fH
$unwind$InsertAtHead DD 020f01H
	DD	0700b320fH
$unwind$RemoveEntity DD 020f01H
	DD	0700b520fH
$unwind$RemoveEntityNode DD 020f01H
	DD	0700b520fH
$unwind$EntityInitialize DD 020601H
	DD	070023206H
$unwind$UpdateSliders DD 020601H
	DD	070029206H
$unwind$UpdateEntities DD 031a01H
	DD	0520109H
	DD	07002H
$unwind$UpdateSquishables DD 020601H
	DD	070023206H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:SortGridCell
	DD	030H
	DD	0214H
SortGridCell$rtcName$0 DB 070H
	DB	061H
	DB	073H
	DB	074H
	DB	043H
	DB	065H
	DB	06cH
	DB	06cH
	DB	050H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+4
SortGridCell$rtcName$1 DB 063H
	DB	065H
	DB	06cH
	DB	06cH
	DB	050H
	DB	06fH
	DB	073H
	DB	069H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	049H
	DB	06eH
	DB	047H
	DB	072H
	DB	069H
	DB	064H
	DB	00H
	ORG $+13
SortGridCell$rtcVarDesc DD 058H
	DD	08H
	DQ	FLAT:SortGridCell$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:SortGridCell$rtcName$0
	ORG $+96
SortGridCell$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:SortGridCell$rtcVarDesc
UpdateEntities$rtcName$0 DB 061H
	DB	00H
	ORG $+2
UpdateEntities$rtcName$1 DB 062H
	DB	00H
	ORG $+2
UpdateEntities$rtcName$2 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
UpdateEntities$rtcName$3 DB 06cH
	DB	068H
	DB	073H
	DB	00H
UpdateEntities$rtcName$4 DB 072H
	DB	068H
	DB	073H
	DB	00H
UpdateEntities$rtcName$5 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
UpdateEntities$rtcName$6 DB 06cH
	DB	068H
	DB	073H
	DB	00H
UpdateEntities$rtcName$7 DB 072H
	DB	068H
	DB	073H
	DB	00H
UpdateEntities$rtcName$8 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
UpdateEntities$rtcName$9 DB 076H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+1
UpdateEntities$rtcName$10 DB 05fH
	DB	074H
	DB	068H
	DB	069H
	DB	073H
	DB	00H
	ORG $+2
UpdateEntities$rtcVarDesc DD 01e8H
	DD	08H
	DQ	FLAT:UpdateEntities$rtcName$10
	DD	01c8H
	DD	08H
	DQ	FLAT:UpdateEntities$rtcName$9
	DD	01a8H
	DD	08H
	DQ	FLAT:UpdateEntities$rtcName$8
	DD	0188H
	DD	08H
	DQ	FLAT:UpdateEntities$rtcName$7
	DD	0168H
	DD	08H
	DQ	FLAT:UpdateEntities$rtcName$6
	DD	0148H
	DD	08H
	DQ	FLAT:UpdateEntities$rtcName$5
	DD	0128H
	DD	08H
	DQ	FLAT:UpdateEntities$rtcName$4
	DD	0108H
	DD	08H
	DQ	FLAT:UpdateEntities$rtcName$3
	DD	0d8H
	DD	08H
	DQ	FLAT:UpdateEntities$rtcName$2
	DD	0b8H
	DD	08H
	DQ	FLAT:UpdateEntities$rtcName$1
	DD	098H
	DD	08H
	DQ	FLAT:UpdateEntities$rtcName$0
	ORG $+528
UpdateEntities$rtcFrameData DD 0bH
	DD	00H
	DQ	FLAT:UpdateEntities$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
_TEXT	SEGMENT
UpdateSquishables PROC

; 402  : void UpdateSquishables(void) {

$LN6:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  0000d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 403  : 	curSquishable = squishHead;

  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR squishHead
  00019	48 89 05 00 00
	00 00		 mov	 QWORD PTR curSquishable, rax
$LN2@UpdateSqui:

; 404  : 	while (curSquishable) {

  00020	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR curSquishable, 0
  00028	74 4d		 je	 SHORT $LN3@UpdateSqui

; 405  : 		curSquishMesh = curSquishable->value;

  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curSquishable
  00031	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00034	48 89 05 00 00
	00 00		 mov	 QWORD PTR curSquishMesh, rax

; 406  : 		if (!curSquishMesh->bSquish) goto cont;

  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curSquishMesh
  00042	0f b6 40 14	 movzx	 eax, BYTE PTR [rax+20]
  00046	85 c0		 test	 eax, eax
  00048	75 02		 jne	 SHORT $LN4@UpdateSqui
  0004a	eb 17		 jmp	 SHORT $cont$7
$LN4@UpdateSqui:

; 407  : 		SquishMeshX(curSquishMesh);

  0004c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curSquishMesh
  00053	e8 00 00 00 00	 call	 SquishMeshX

; 408  : 		curSquishMesh->bSquish = false;

  00058	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curSquishMesh
  0005f	c6 40 14 00	 mov	 BYTE PTR [rax+20], 0
$cont$7:

; 409  : 	cont:
; 410  : 		advance(curSquishable);

  00063	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curSquishable
  0006a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0006e	48 89 05 00 00
	00 00		 mov	 QWORD PTR curSquishable, rax

; 411  : 	}

  00075	eb a9		 jmp	 SHORT $LN2@UpdateSqui
$LN3@UpdateSqui:

; 412  : }

  00077	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007b	5f		 pop	 rdi
  0007c	c3		 ret	 0
UpdateSquishables ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
_TEXT	SEGMENT
temp$14 = 32
temp2$15 = 36
size$16 = 40
size$17 = 44
$T18 = 60
$T19 = 64
$T20 = 72
$T21 = 80
$T22 = 112
$T23 = 116
$T24 = 120
$T25 = 124
$T26 = 128
$T27 = 136
a$ = 152
b$ = 184
_this$28 = 216
transform$ = 232
transform$ = 240
lhs$ = 264
rhs$ = 296
_this$29 = 328
lhs$ = 344
lhs$ = 360
rhs$ = 392
_this$30 = 424
vector$ = 456
scalar$ = 472
_this$31 = 488
tv77 = 500
tv177 = 504
tv180 = 512
tv182 = 516
tv185 = 520
tv187 = 524
tv190 = 528
tv192 = 532
tv195 = 536
tv197 = 540
tv346 = 544
tv461 = 548
tv471 = 552
tv453 = 560
tv490 = 568
tv500 = 572
tv482 = 576
tv523 = 584
tv525 = 588
tv528 = 592
tv535 = 596
tv552 = 600
tv554 = 604
tv557 = 608
tv564 = 612
tv576 = 616
tv583 = 620
tv585 = 624
tv592 = 628
tv594 = 632
tv839 = 636
tv836 = 640
tv811 = 644
tv825 = 648
UpdateEntities PROC

; 178  : void UpdateEntities(void) {

$LN210:
  00000	40 57		 push	 rdi
  00002	48 81 ec 90 02
	00 00		 sub	 rsp, 656		; 00000290H
  00009	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0000e	b9 9c 00 00 00	 mov	 ecx, 156		; 0000009cH
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00021	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 179  : 	plrGrounded = false;//removed mt code because it made searching annoying. it's bound to be in a previous version on one of my pcs somewhere but if it gets lost don't worry, it's absolute trash anyway. the code i did for the much newer multithreaded quadtree collision solver i wrote in c++ is much better and actually works.

  00026	c6 05 00 00 00
	00 00		 mov	 BYTE PTR plrGrounded, 0

; 180  : 	for (solveIndex = 0; (solveIndex < SOLVE_ITTER); solveIndex++) {

  0002d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR solveIndex, 0
  00037	eb 0e		 jmp	 SHORT $LN4@UpdateEnti
$LN2@UpdateEnti:
  00039	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR solveIndex
  0003f	ff c0		 inc	 eax
  00041	89 05 00 00 00
	00		 mov	 DWORD PTR solveIndex, eax
$LN4@UpdateEnti:
  00047	83 3d 00 00 00
	00 14		 cmp	 DWORD PTR solveIndex, 20
  0004e	0f 83 de 0d 00
	00		 jae	 $LN3@UpdateEnti

; 181  : 		curNode = entityHead;

  00054	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR entityHead
  0005b	48 89 05 00 00
	00 00		 mov	 QWORD PTR curNode, rax
$LN5@UpdateEnti:

; 182  : 		while (curNode) {

  00062	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR curNode, 0
  0006a	0f 84 15 02 00
	00		 je	 $LN6@UpdateEnti

; 183  : 			if (!(curData = curNode->entity->physicsData)) goto preColSolvCont;

  00070	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curNode
  00077	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 89 05 00 00
	00 00		 mov	 QWORD PTR curData, rax
  00084	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR curData, 0
  0008c	75 05		 jne	 SHORT $LN21@UpdateEnti
  0008e	e9 db 01 00 00	 jmp	 $preColSolvCont$211
$LN21@UpdateEnti:

; 184  : #ifdef IS_DEV
; 185  : 			AddForceY(*curData, curData->transform, gravAccel * limitedDeltaTime2(2.0f) * !curData->bIsStatic * curData->gravityMultiplier * (curNode->entity->tag != playerTag || pressingKey[K_KEY] || pressingKey[J_KEY]) * (pressingKey[K_KEY] - pressingKey[J_KEY])) / SOLVE_ITTER_F;
; 186  : #else
; 187  : 			AddForceY(*curData, curData->transform, gravAccel * limitedDeltaTime2(2.0f) * !curData->bIsStatic * curData->gravityMultiplier / SOLVE_ITTER_F);

  00093	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  0009a	0f b6 40 50	 movzx	 eax, BYTE PTR [rax+80]
  0009e	85 c0		 test	 eax, eax
  000a0	75 0d		 jne	 SHORT $LN90@UpdateEnti
  000a2	c7 84 24 f4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv77[rsp], 1
  000ad	eb 0b		 jmp	 SHORT $LN91@UpdateEnti
$LN90@UpdateEnti:
  000af	c7 84 24 f4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv77[rsp], 0
$LN91@UpdateEnti:
  000ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000c2	e8 00 00 00 00	 call	 limitedDeltaTime2
  000c7	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR gravAccel
  000cf	f3 0f 59 c8	 mulss	 xmm1, xmm0
  000d3	0f 28 c1	 movaps	 xmm0, xmm1
  000d6	f3 0f 2a 8c 24
	f4 01 00 00	 cvtsi2ss xmm1, DWORD PTR tv77[rsp]
  000df	f3 0f 59 c1	 mulss	 xmm0, xmm1
  000e3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  000ea	f3 0f 59 40 30	 mulss	 xmm0, DWORD PTR [rax+48]
  000ef	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41a00000
  000f7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  000fe	f3 0f 10 48 4c	 movss	 xmm1, DWORD PTR [rax+76]
  00103	f3 0f 58 c8	 addss	 xmm1, xmm0
  00107	0f 28 c1	 movaps	 xmm0, xmm1
  0010a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  00111	f3 0f 11 40 4c	 movss	 DWORD PTR [rax+76], xmm0
  00116	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  0011d	c6 40 01 01	 mov	 BYTE PTR [rax+1], 1
  00121	c6 05 00 00 00
	00 01		 mov	 BYTE PTR shouldDraw, 1
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h

; 343  : 	QueryPerformanceCounter(&cTime);

  00128	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cTime
  0012f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 344  : 	return (float)((cTime.QuadPart - pTime.QuadPart) * 1000000 / frequency) / 1000000.0f * timeScale;

  00135	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR pTime
  0013c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR cTime
  00143	48 2b c8	 sub	 rcx, rax
  00146	48 8b c1	 mov	 rax, rcx
  00149	48 69 c0 40 42
	0f 00		 imul	 rax, rax, 1000000	; 000f4240H
  00150	48 99		 cdq
  00152	48 f7 3d 00 00
	00 00		 idiv	 QWORD PTR frequency
  00159	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  0015e	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@49742400
  00166	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR timeScale
  0016e	f3 0f 11 44 24
	3c		 movss	 DWORD PTR $T18[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c

; 189  : 			AddVectorsAssign(&curData->transform.position, VectorByScalar(curData->velocity, INV_SOLVE_ITTER_F * deltaTime()));

  00174	f3 0f 10 44 24
	3c		 movss	 xmm0, DWORD PTR $T18[rsp]
  0017a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3d4ccccd
  00182	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00186	0f 28 c1	 movaps	 xmm0, xmm1
  00189	f3 0f 11 84 24
	d8 01 00 00	 movss	 DWORD PTR scalar$[rsp], xmm0
  00192	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  00199	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  0019d	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR vector$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 61   : 	Vector2 _this = { vector.x * scalar, vector.y * scalar };

  001a5	f3 0f 10 84 24
	c8 01 00 00	 movss	 xmm0, DWORD PTR vector$[rsp]
  001ae	f3 0f 59 84 24
	d8 01 00 00	 mulss	 xmm0, DWORD PTR scalar$[rsp]
  001b7	f3 0f 11 84 24
	e8 01 00 00	 movss	 DWORD PTR _this$31[rsp], xmm0
  001c0	f3 0f 10 84 24
	cc 01 00 00	 movss	 xmm0, DWORD PTR vector$[rsp+4]
  001c9	f3 0f 59 84 24
	d8 01 00 00	 mulss	 xmm0, DWORD PTR scalar$[rsp]
  001d2	f3 0f 11 84 24
	ec 01 00 00	 movss	 DWORD PTR _this$31[rsp+4], xmm0

; 62   : 	return _this;

  001db	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR _this$31[rsp]
  001e3	48 89 44 24 40	 mov	 QWORD PTR $T19[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c

; 189  : 			AddVectorsAssign(&curData->transform.position, VectorByScalar(curData->velocity, INV_SOLVE_ITTER_F * deltaTime()));

  001e8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  001ef	48 83 c0 0c	 add	 rax, 12
  001f3	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR lhs$[rsp], rax
  001fb	48 8b 44 24 40	 mov	 rax, QWORD PTR $T19[rsp]
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 52   : 	*lhs = AddVectors(*lhs, rhs);

  00200	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR rhs$[rsp], rax
  00208	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR lhs$[rsp]
  00210	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00213	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR lhs$[rsp], rax

; 35   : 	_this.x = lhs.x + rhs.x;

  0021b	f3 0f 10 84 24
	68 01 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp]
  00224	f3 0f 58 84 24
	88 01 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp]
  0022d	f3 0f 11 84 24
	a8 01 00 00	 movss	 DWORD PTR _this$30[rsp], xmm0

; 36   : 	_this.y = lhs.y + rhs.y;

  00236	f3 0f 10 84 24
	6c 01 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  0023f	f3 0f 58 84 24
	8c 01 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp+4]
  00248	f3 0f 11 84 24
	ac 01 00 00	 movss	 DWORD PTR _this$30[rsp+4], xmm0

; 37   : 	return _this;

  00251	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR _this$30[rsp]
  00259	48 89 44 24 48	 mov	 QWORD PTR $T20[rsp], rax

; 52   : 	*lhs = AddVectors(*lhs, rhs);

  0025e	48 8b 44 24 48	 mov	 rax, QWORD PTR $T20[rsp]
  00263	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR lhs$[rsp]
  0026b	48 89 01	 mov	 QWORD PTR [rcx], rax
$preColSolvCont$211:
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c

; 191  : 			advance(curNode);

  0026e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curNode
  00275	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00279	48 89 05 00 00
	00 00		 mov	 QWORD PTR curNode, rax

; 192  : 		}

  00280	e9 dd fd ff ff	 jmp	 $LN5@UpdateEnti
$LN6@UpdateEnti:

; 193  : 		curNode = entityHead;

  00285	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR entityHead
  0028c	48 89 05 00 00
	00 00		 mov	 QWORD PTR curNode, rax
$LN7@UpdateEnti:

; 194  : 		while (curNode) {

  00293	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR curNode, 0
  0029b	0f 84 f3 00 00
	00		 je	 $LN8@UpdateEnti

; 195  : 			curData = (curEntity = curNode->entity)->physicsData;

  002a1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curNode
  002a8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002ab	48 89 05 00 00
	00 00		 mov	 QWORD PTR curEntity, rax
  002b2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curEntity
  002b9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002bc	48 89 05 00 00
	00 00		 mov	 QWORD PTR curData, rax

; 196  : 			if (curData) {

  002c3	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR curData, 0
  002cb	74 7b		 je	 SHORT $LN22@UpdateEnti

; 197  : 				curEntity->midPoint = AddVectors(curEntity->origMidpoint, curData->transform.position);

  002cd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  002d4	48 8b 40 0c	 mov	 rax, QWORD PTR [rax+12]
  002d8	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR rhs$[rsp], rax
  002e0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curEntity
  002e7	48 8b 40 1c	 mov	 rax, QWORD PTR [rax+28]
  002eb	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR lhs$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 35   : 	_this.x = lhs.x + rhs.x;

  002f3	f3 0f 10 84 24
	08 01 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp]
  002fc	f3 0f 58 84 24
	28 01 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp]
  00305	f3 0f 11 84 24
	48 01 00 00	 movss	 DWORD PTR _this$29[rsp], xmm0

; 36   : 	_this.y = lhs.y + rhs.y;

  0030e	f3 0f 10 84 24
	0c 01 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  00317	f3 0f 58 84 24
	2c 01 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp+4]
  00320	f3 0f 11 84 24
	4c 01 00 00	 movss	 DWORD PTR _this$29[rsp+4], xmm0

; 37   : 	return _this;

  00329	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR _this$29[rsp]
  00331	48 89 44 24 50	 mov	 QWORD PTR $T21[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c

; 197  : 				curEntity->midPoint = AddVectors(curEntity->origMidpoint, curData->transform.position);

  00336	48 8b 44 24 50	 mov	 rax, QWORD PTR $T21[rsp]
  0033b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curEntity
  00342	48 89 41 14	 mov	 QWORD PTR [rcx+20], rax

; 198  : 			}

  00346	eb 1e		 jmp	 SHORT $LN23@UpdateEnti
$LN22@UpdateEnti:

; 199  : 			else {
; 200  : 				curEntity->midPoint = GetVectorMidPoint(curEntity->trueAABB);

  00348	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curEntity
  0034f	48 83 c0 3c	 add	 rax, 60			; 0000003cH
  00353	48 8b c8	 mov	 rcx, rax
  00356	e8 00 00 00 00	 call	 GetVectorMidPoint
  0035b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curEntity
  00362	48 89 41 14	 mov	 QWORD PTR [rcx+20], rax
$LN23@UpdateEnti:

; 201  : 			}
; 202  : 			SortGridCell(curEntity);

  00366	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curEntity
  0036d	e8 00 00 00 00	 call	 SortGridCell

; 203  : 			curEntity->bMadeTrueAABB = false;

  00372	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curEntity
  00379	c6 40 28 00	 mov	 BYTE PTR [rax+40], 0

; 204  : 			advance(curNode);

  0037d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curNode
  00384	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00388	48 89 05 00 00
	00 00		 mov	 QWORD PTR curNode, rax

; 205  : 		}

  0038f	e9 ff fe ff ff	 jmp	 $LN7@UpdateEnti
$LN8@UpdateEnti:

; 206  : 		index = 0;

  00394	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR index, 0

; 207  : 		curNode = entityHead;

  0039e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR entityHead
  003a5	48 89 05 00 00
	00 00		 mov	 QWORD PTR curNode, rax
$LN9@UpdateEnti:

; 208  : 		while (curNode) {

  003ac	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR curNode, 0
  003b4	0f 84 f4 09 00
	00		 je	 $LN10@UpdateEnti

; 209  : 			curData = (curEntity = curNode->entity)->physicsData;

  003ba	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curNode
  003c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003c4	48 89 05 00 00
	00 00		 mov	 QWORD PTR curEntity, rax
  003cb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curEntity
  003d2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003d5	48 89 05 00 00
	00 00		 mov	 QWORD PTR curData, rax

; 210  : 			curColPtrVal = curEntity->pastCellPosition;

  003dc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curEntity
  003e3	48 8b 40 0c	 mov	 rax, QWORD PTR [rax+12]
  003e7	48 89 05 00 00
	00 00		 mov	 QWORD PTR curColPtrVal, rax

; 211  : 			if (curColPtrVal.x != -1 && curColPtrVal.x != GRID_COUNT_X_INT + 1) curCollider = cells[curColPtrVal.x][curColPtrVal.y];

  003ee	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR curColPtrVal, -1
  003f5	74 3b		 je	 SHORT $LN24@UpdateEnti
  003f7	81 3d 00 00 00
	00 01 04 00 00	 cmp	 DWORD PTR curColPtrVal, 1025 ; 00000401H
  00401	74 2f		 je	 SHORT $LN24@UpdateEnti
  00403	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curColPtrVal
  0040a	48 69 c0 00 20
	00 00		 imul	 rax, rax, 8192		; 00002000H
  00411	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cells
  00418	48 03 c8	 add	 rcx, rax
  0041b	48 8b c1	 mov	 rax, rcx
  0041e	48 63 0d 04 00
	00 00		 movsxd	 rcx, DWORD PTR curColPtrVal+4
  00425	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00429	48 89 05 00 00
	00 00		 mov	 QWORD PTR curCollider, rax
  00430	eb 05		 jmp	 SHORT $LN25@UpdateEnti
$LN24@UpdateEnti:

; 212  : 			else goto cont;

  00432	e9 60 09 00 00	 jmp	 $cont$212
$LN25@UpdateEnti:

; 213  : 			if (cellCheckStates[curColPtrVal.x][curColPtrVal.y]) goto cont;

  00437	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curColPtrVal
  0043e	48 69 c0 00 04
	00 00		 imul	 rax, rax, 1024		; 00000400H
  00445	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cellCheckStates
  0044c	48 03 c8	 add	 rcx, rax
  0044f	48 8b c1	 mov	 rax, rcx
  00452	48 63 0d 04 00
	00 00		 movsxd	 rcx, DWORD PTR curColPtrVal+4
  00459	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0045d	85 c0		 test	 eax, eax
  0045f	74 05		 je	 SHORT $LN26@UpdateEnti
  00461	e9 31 09 00 00	 jmp	 $cont$212
$LN26@UpdateEnti:

; 214  : 			cellCheckStates[curColPtrVal.x][curColPtrVal.y] = true;

  00466	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curColPtrVal
  0046d	48 69 c0 00 04
	00 00		 imul	 rax, rax, 1024		; 00000400H
  00474	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cellCheckStates
  0047b	48 03 c8	 add	 rcx, rax
  0047e	48 8b c1	 mov	 rax, rcx
  00481	48 63 0d 04 00
	00 00		 movsxd	 rcx, DWORD PTR curColPtrVal+4
  00488	c6 04 08 01	 mov	 BYTE PTR [rax+rcx], 1

; 215  : 			InsertAtHeadCellChecks(&totalCheckedCells[index++], curColPtrVal);

  0048c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR index
  00492	48 6b c0 18	 imul	 rax, rax, 24
  00496	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR totalCheckedCells
  0049d	48 03 c8	 add	 rcx, rax
  004a0	48 8b c1	 mov	 rax, rcx
  004a3	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR tv177[rsp], rax
  004ab	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR index
  004b1	ff c0		 inc	 eax
  004b3	89 05 00 00 00
	00		 mov	 DWORD PTR index, eax
  004b9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curColPtrVal
  004c0	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR tv177[rsp]
  004c8	e8 00 00 00 00	 call	 InsertAtHeadCellChecks

; 216  : 			onLeft = curColPtrVal.x == 0;

  004cd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR curColPtrVal, 0
  004d4	75 0d		 jne	 SHORT $LN92@UpdateEnti
  004d6	c7 84 24 00 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv180[rsp], 1
  004e1	eb 0b		 jmp	 SHORT $LN93@UpdateEnti
$LN92@UpdateEnti:
  004e3	c7 84 24 00 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv180[rsp], 0
$LN93@UpdateEnti:
  004ee	83 bc 24 00 02
	00 00 00	 cmp	 DWORD PTR tv180[rsp], 0
  004f6	75 0d		 jne	 SHORT $LN94@UpdateEnti
  004f8	c7 84 24 04 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv182[rsp], 0
  00503	eb 0b		 jmp	 SHORT $LN95@UpdateEnti
$LN94@UpdateEnti:
  00505	c7 84 24 04 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv182[rsp], 1
$LN95@UpdateEnti:
  00510	0f b6 84 24 04
	02 00 00	 movzx	 eax, BYTE PTR tv182[rsp]
  00518	88 05 00 00 00
	00		 mov	 BYTE PTR onLeft, al

; 217  : 			onBottom = curColPtrVal.y == 0;

  0051e	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR curColPtrVal+4, 0
  00525	75 0d		 jne	 SHORT $LN96@UpdateEnti
  00527	c7 84 24 08 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv185[rsp], 1
  00532	eb 0b		 jmp	 SHORT $LN97@UpdateEnti
$LN96@UpdateEnti:
  00534	c7 84 24 08 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv185[rsp], 0
$LN97@UpdateEnti:
  0053f	83 bc 24 08 02
	00 00 00	 cmp	 DWORD PTR tv185[rsp], 0
  00547	75 0d		 jne	 SHORT $LN98@UpdateEnti
  00549	c7 84 24 0c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv187[rsp], 0
  00554	eb 0b		 jmp	 SHORT $LN99@UpdateEnti
$LN98@UpdateEnti:
  00556	c7 84 24 0c 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv187[rsp], 1
$LN99@UpdateEnti:
  00561	0f b6 84 24 0c
	02 00 00	 movzx	 eax, BYTE PTR tv187[rsp]
  00569	88 05 00 00 00
	00		 mov	 BYTE PTR onBottom, al

; 218  : 			onRight = curColPtrVal.x == GRID_COUNT_X_INT - 1;

  0056f	81 3d 00 00 00
	00 ff 03 00 00	 cmp	 DWORD PTR curColPtrVal, 1023 ; 000003ffH
  00579	75 0d		 jne	 SHORT $LN100@UpdateEnti
  0057b	c7 84 24 10 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv190[rsp], 1
  00586	eb 0b		 jmp	 SHORT $LN101@UpdateEnti
$LN100@UpdateEnti:
  00588	c7 84 24 10 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv190[rsp], 0
$LN101@UpdateEnti:
  00593	83 bc 24 10 02
	00 00 00	 cmp	 DWORD PTR tv190[rsp], 0
  0059b	75 0d		 jne	 SHORT $LN102@UpdateEnti
  0059d	c7 84 24 14 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv192[rsp], 0
  005a8	eb 0b		 jmp	 SHORT $LN103@UpdateEnti
$LN102@UpdateEnti:
  005aa	c7 84 24 14 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv192[rsp], 1
$LN103@UpdateEnti:
  005b5	0f b6 84 24 14
	02 00 00	 movzx	 eax, BYTE PTR tv192[rsp]
  005bd	88 05 00 00 00
	00		 mov	 BYTE PTR onRight, al

; 219  : 			onTop = curColPtrVal.y == GRID_COUNT_Y_INT - 1;

  005c3	81 3d 04 00 00
	00 ff 03 00 00	 cmp	 DWORD PTR curColPtrVal+4, 1023 ; 000003ffH
  005cd	75 0d		 jne	 SHORT $LN104@UpdateEnti
  005cf	c7 84 24 18 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv195[rsp], 1
  005da	eb 0b		 jmp	 SHORT $LN105@UpdateEnti
$LN104@UpdateEnti:
  005dc	c7 84 24 18 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv195[rsp], 0
$LN105@UpdateEnti:
  005e7	83 bc 24 18 02
	00 00 00	 cmp	 DWORD PTR tv195[rsp], 0
  005ef	75 0d		 jne	 SHORT $LN106@UpdateEnti
  005f1	c7 84 24 1c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv197[rsp], 0
  005fc	eb 0b		 jmp	 SHORT $LN107@UpdateEnti
$LN106@UpdateEnti:
  005fe	c7 84 24 1c 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv197[rsp], 1
$LN107@UpdateEnti:
  00609	0f b6 84 24 1c
	02 00 00	 movzx	 eax, BYTE PTR tv197[rsp]
  00611	88 05 00 00 00
	00		 mov	 BYTE PTR onTop, al
$LN142@UpdateEnti:
$LL11@UpdateEnti:

; 220  : 			while (curCollider) {

  00617	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR curCollider, 0
  0061f	0f 84 72 07 00
	00		 je	 $LN12@UpdateEnti

; 221  : 				subBorderIndex = currentCell;

  00625	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR subBorderIndex, 0

; 222  : 				subCollider = curCollider->next;

  0062f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curCollider
  00636	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  0063a	48 89 05 00 00
	00 00		 mov	 QWORD PTR subCollider, rax

; 223  : 				curData = curCollider->physicsData;

  00641	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curCollider
  00648	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0064b	48 89 05 00 00
	00 00		 mov	 QWORD PTR curData, rax

; 224  : 				if (!subCollider) goto _switch;

  00652	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR subCollider, 0
  0065a	75 05		 jne	 SHORT $LN27@UpdateEnti
  0065c	e9 bb 04 00 00	 jmp	 $LN144@UpdateEnti
$LN27@UpdateEnti:
$iterate$213:

; 225  : 			iterate:
; 226  : 				checkedSub = false;

  00661	c6 05 00 00 00
	00 00		 mov	 BYTE PTR checkedSub, 0
$LL13@UpdateEnti:

; 227  : 				while (subCollider) {

  00668	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR subCollider, 0
  00670	0f 84 a6 04 00
	00		 je	 $LN14@UpdateEnti

; 228  : 					subData = subCollider->physicsData;

  00676	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR subCollider
  0067d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00680	48 89 05 00 00
	00 00		 mov	 QWORD PTR subData, rax

; 229  : 					if (curData && !checkedSub && !curCollider->bMadeTrueAABB) {

  00687	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR curData, 0
  0068f	0f 84 23 02 00
	00		 je	 $LN28@UpdateEnti
  00695	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR checkedSub
  0069c	85 c0		 test	 eax, eax
  0069e	0f 85 14 02 00
	00		 jne	 $LN28@UpdateEnti
  006a4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curCollider
  006ab	0f b6 40 28	 movzx	 eax, BYTE PTR [rax+40]
  006af	85 c0		 test	 eax, eax
  006b1	0f 85 01 02 00
	00		 jne	 $LN28@UpdateEnti

; 230  : 						updateAABB2(curTrueAABB, curCollider, temp, curData);

  006b7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curCollider
  006be	48 83 c0 3c	 add	 rax, 60			; 0000003cH
  006c2	48 89 05 00 00
	00 00		 mov	 QWORD PTR curTrueAABB, rax
  006c9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curCollider
  006d0	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  006d4	48 89 05 00 00
	00 00		 mov	 QWORD PTR curAABB, rax
  006db	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  006e2	48 89 05 00 00
	00 00		 mov	 QWORD PTR curColTransform, rax
  006e9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAABB
  006f0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curColTransform
  006f7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  006fb	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [rcx+4]
  00700	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curColTransform
  00707	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [rax+12]
  0070c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTrueAABB
  00713	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  00717	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAABB
  0071e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curColTransform
  00725	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  0072a	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [rcx+8]
  0072f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curColTransform
  00736	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [rax+16]
  0073b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTrueAABB
  00742	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  00747	b8 08 00 00 00	 mov	 eax, 8
  0074c	48 6b c0 01	 imul	 rax, rax, 1
  00750	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curAABB
  00757	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curColTransform
  0075e	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [rcx+rax]
  00763	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [rdx+4]
  00768	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curColTransform
  0076f	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [rax+12]
  00774	b8 08 00 00 00	 mov	 eax, 8
  00779	48 6b c0 01	 imul	 rax, rax, 1
  0077d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  00784	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0
  00789	b8 08 00 00 00	 mov	 eax, 8
  0078e	48 6b c0 01	 imul	 rax, rax, 1
  00792	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curAABB
  00799	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curColTransform
  007a0	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [rcx+rax+4]
  007a6	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [rdx+8]
  007ab	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curColTransform
  007b2	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [rax+16]
  007b7	b8 08 00 00 00	 mov	 eax, 8
  007bc	48 6b c0 01	 imul	 rax, rax, 1
  007c0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  007c7	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0
  007cd	b8 08 00 00 00	 mov	 eax, 8
  007d2	48 6b c0 01	 imul	 rax, rax, 1
  007d6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  007dd	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curTrueAABB
  007e4	f3 0f 10 01	 movss	 xmm0, DWORD PTR [rcx]
  007e8	0f 2f 04 02	 comiss	 xmm0, DWORD PTR [rdx+rax]
  007ec	76 4c		 jbe	 SHORT $LN29@UpdateEnti
  007ee	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTrueAABB
  007f5	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  007f9	f3 0f 11 44 24
	20		 movss	 DWORD PTR temp$14[rsp], xmm0
  007ff	b8 08 00 00 00	 mov	 eax, 8
  00804	48 6b c0 01	 imul	 rax, rax, 1
  00808	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  0080f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curTrueAABB
  00816	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [rdx+rax]
  0081b	f3 0f 11 01	 movss	 DWORD PTR [rcx], xmm0
  0081f	b8 08 00 00 00	 mov	 eax, 8
  00824	48 6b c0 01	 imul	 rax, rax, 1
  00828	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  0082f	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR temp$14[rsp]
  00835	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0
$LN29@UpdateEnti:
  0083a	b8 08 00 00 00	 mov	 eax, 8
  0083f	48 6b c0 01	 imul	 rax, rax, 1
  00843	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  0084a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curTrueAABB
  00851	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [rcx+4]
  00856	0f 2f 44 02 04	 comiss	 xmm0, DWORD PTR [rdx+rax+4]
  0085b	76 50		 jbe	 SHORT $LN30@UpdateEnti
  0085d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTrueAABB
  00864	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00869	f3 0f 11 44 24
	20		 movss	 DWORD PTR temp$14[rsp], xmm0
  0086f	b8 08 00 00 00	 mov	 eax, 8
  00874	48 6b c0 01	 imul	 rax, rax, 1
  00878	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  0087f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curTrueAABB
  00886	f3 0f 10 44 02
	04		 movss	 xmm0, DWORD PTR [rdx+rax+4]
  0088c	f3 0f 11 41 04	 movss	 DWORD PTR [rcx+4], xmm0
  00891	b8 08 00 00 00	 mov	 eax, 8
  00896	48 6b c0 01	 imul	 rax, rax, 1
  0089a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTrueAABB
  008a1	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR temp$14[rsp]
  008a7	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0
$LN30@UpdateEnti:

; 231  : 						curCollider->bMadeTrueAABB = true;

  008ad	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curCollider
  008b4	c6 40 28 01	 mov	 BYTE PTR [rax+40], 1
$LN28@UpdateEnti:

; 232  : 					}
; 233  : 					checkedSub = true;

  008b8	c6 05 00 00 00
	00 01		 mov	 BYTE PTR checkedSub, 1

; 234  : 					if (subData && !subCollider->bMadeTrueAABB) {

  008bf	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR subData, 0
  008c7	0f 84 14 02 00
	00		 je	 $LN31@UpdateEnti
  008cd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR subCollider
  008d4	0f b6 40 28	 movzx	 eax, BYTE PTR [rax+40]
  008d8	85 c0		 test	 eax, eax
  008da	0f 85 01 02 00
	00		 jne	 $LN31@UpdateEnti

; 235  : 						updateAABB2(curSubTrueAABB, subCollider, temp2, subData);

  008e0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR subCollider
  008e7	48 83 c0 3c	 add	 rax, 60			; 0000003cH
  008eb	48 89 05 00 00
	00 00		 mov	 QWORD PTR curSubTrueAABB, rax
  008f2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR subCollider
  008f9	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  008fd	48 89 05 00 00
	00 00		 mov	 QWORD PTR curAABB, rax
  00904	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR subData
  0090b	48 89 05 00 00
	00 00		 mov	 QWORD PTR curColTransform, rax
  00912	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAABB
  00919	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curColTransform
  00920	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00924	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [rcx+4]
  00929	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curColTransform
  00930	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [rax+12]
  00935	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curSubTrueAABB
  0093c	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  00940	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAABB
  00947	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curColTransform
  0094e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00953	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [rcx+8]
  00958	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curColTransform
  0095f	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [rax+16]
  00964	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curSubTrueAABB
  0096b	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  00970	b8 08 00 00 00	 mov	 eax, 8
  00975	48 6b c0 01	 imul	 rax, rax, 1
  00979	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curAABB
  00980	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curColTransform
  00987	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [rcx+rax]
  0098c	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [rdx+4]
  00991	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curColTransform
  00998	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [rax+12]
  0099d	b8 08 00 00 00	 mov	 eax, 8
  009a2	48 6b c0 01	 imul	 rax, rax, 1
  009a6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curSubTrueAABB
  009ad	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0
  009b2	b8 08 00 00 00	 mov	 eax, 8
  009b7	48 6b c0 01	 imul	 rax, rax, 1
  009bb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curAABB
  009c2	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curColTransform
  009c9	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [rcx+rax+4]
  009cf	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [rdx+8]
  009d4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curColTransform
  009db	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [rax+16]
  009e0	b8 08 00 00 00	 mov	 eax, 8
  009e5	48 6b c0 01	 imul	 rax, rax, 1
  009e9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curSubTrueAABB
  009f0	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0
  009f6	b8 08 00 00 00	 mov	 eax, 8
  009fb	48 6b c0 01	 imul	 rax, rax, 1
  009ff	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curSubTrueAABB
  00a06	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curSubTrueAABB
  00a0d	f3 0f 10 01	 movss	 xmm0, DWORD PTR [rcx]
  00a11	0f 2f 04 02	 comiss	 xmm0, DWORD PTR [rdx+rax]
  00a15	76 4c		 jbe	 SHORT $LN32@UpdateEnti
  00a17	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curSubTrueAABB
  00a1e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00a22	f3 0f 11 44 24
	24		 movss	 DWORD PTR temp2$15[rsp], xmm0
  00a28	b8 08 00 00 00	 mov	 eax, 8
  00a2d	48 6b c0 01	 imul	 rax, rax, 1
  00a31	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curSubTrueAABB
  00a38	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curSubTrueAABB
  00a3f	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [rdx+rax]
  00a44	f3 0f 11 01	 movss	 DWORD PTR [rcx], xmm0
  00a48	b8 08 00 00 00	 mov	 eax, 8
  00a4d	48 6b c0 01	 imul	 rax, rax, 1
  00a51	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curSubTrueAABB
  00a58	f3 0f 10 44 24
	24		 movss	 xmm0, DWORD PTR temp2$15[rsp]
  00a5e	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0
$LN32@UpdateEnti:
  00a63	b8 08 00 00 00	 mov	 eax, 8
  00a68	48 6b c0 01	 imul	 rax, rax, 1
  00a6c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curSubTrueAABB
  00a73	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curSubTrueAABB
  00a7a	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [rcx+4]
  00a7f	0f 2f 44 02 04	 comiss	 xmm0, DWORD PTR [rdx+rax+4]
  00a84	76 50		 jbe	 SHORT $LN33@UpdateEnti
  00a86	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curSubTrueAABB
  00a8d	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00a92	f3 0f 11 44 24
	24		 movss	 DWORD PTR temp2$15[rsp], xmm0
  00a98	b8 08 00 00 00	 mov	 eax, 8
  00a9d	48 6b c0 01	 imul	 rax, rax, 1
  00aa1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curSubTrueAABB
  00aa8	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curSubTrueAABB
  00aaf	f3 0f 10 44 02
	04		 movss	 xmm0, DWORD PTR [rdx+rax+4]
  00ab5	f3 0f 11 41 04	 movss	 DWORD PTR [rcx+4], xmm0
  00aba	b8 08 00 00 00	 mov	 eax, 8
  00abf	48 6b c0 01	 imul	 rax, rax, 1
  00ac3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curSubTrueAABB
  00aca	f3 0f 10 44 24
	24		 movss	 xmm0, DWORD PTR temp2$15[rsp]
  00ad0	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0
$LN33@UpdateEnti:

; 236  : 						subCollider->bMadeTrueAABB = true;

  00ad6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR subCollider
  00add	c6 40 28 01	 mov	 BYTE PTR [rax+40], 1
$LN31@UpdateEnti:

; 237  : 					}
; 238  : 					if (curCollider != subCollider) AABBsOverlap(curCollider, subCollider);

  00ae1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR subCollider
  00ae8	48 39 05 00 00
	00 00		 cmp	 QWORD PTR curCollider, rax
  00aef	74 14		 je	 SHORT $LN34@UpdateEnti
  00af1	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR subCollider
  00af8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curCollider
  00aff	e8 00 00 00 00	 call	 AABBsOverlap
  00b04	90		 npad	 1
$LN34@UpdateEnti:

; 239  : 					advance(subCollider);

  00b05	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR subCollider
  00b0c	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00b10	48 89 05 00 00
	00 00		 mov	 QWORD PTR subCollider, rax

; 240  : 				}

  00b17	e9 4c fb ff ff	 jmp	 $LL13@UpdateEnti
$LN14@UpdateEnti:
$LN144@UpdateEnti:
$LN208@UpdateEnti:
$LN207@UpdateEnti:
$LN206@UpdateEnti:
$LN205@UpdateEnti:
$LN204@UpdateEnti:
$LN203@UpdateEnti:
$LN202@UpdateEnti:
$LN201@UpdateEnti:
$_switch$214:

; 241  : 			_switch:
; 242  : 				subBorderIndex++;

  00b1c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR subBorderIndex
  00b22	ff c0		 inc	 eax
  00b24	89 05 00 00 00
	00		 mov	 DWORD PTR subBorderIndex, eax
$afterInc$215:

; 243  : 			afterInc:
; 244  : 				if (subBorderIndex >= 9) {

  00b2a	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR subBorderIndex, 9
  00b31	7c 17		 jl	 SHORT $LN35@UpdateEnti

; 245  : 					advance(curCollider);

  00b33	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curCollider
  00b3a	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00b3e	48 89 05 00 00
	00 00		 mov	 QWORD PTR curCollider, rax

; 246  : 					continue;

  00b45	e9 cd fa ff ff	 jmp	 $LL11@UpdateEnti
$LN35@UpdateEnti:

; 247  : 				}
; 248  : 				switch (subBorderIndex) {

  00b4a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR subBorderIndex
  00b50	89 84 24 20 02
	00 00		 mov	 DWORD PTR tv346[rsp], eax
  00b57	8b 84 24 20 02
	00 00		 mov	 eax, DWORD PTR tv346[rsp]
  00b5e	ff c8		 dec	 eax
  00b60	89 84 24 20 02
	00 00		 mov	 DWORD PTR tv346[rsp], eax
  00b67	83 bc 24 20 02
	00 00 07	 cmp	 DWORD PTR tv346[rsp], 7
  00b6f	0f 87 bc 01 00
	00		 ja	 $LN15@UpdateEnti
  00b75	48 63 84 24 20
	02 00 00	 movsxd	 rax, DWORD PTR tv346[rsp]
  00b7d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00b84	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN209@UpdateEnti[rcx+rax*4]
  00b8b	48 03 c1	 add	 rax, rcx
  00b8e	ff e0		 jmp	 rax
$LN36@UpdateEnti:

; 249  : 				case right:
; 250  : 					if (onRight) goto _switch;

  00b90	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR onRight
  00b97	85 c0		 test	 eax, eax
  00b99	74 05		 je	 SHORT $LN37@UpdateEnti
  00b9b	e9 7c ff ff ff	 jmp	 $_switch$214
$LN37@UpdateEnti:

; 251  : 					checkColPtrVal.x = curColPtrVal.x + 1;

  00ba0	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR curColPtrVal
  00ba6	ff c0		 inc	 eax
  00ba8	89 05 00 00 00
	00		 mov	 DWORD PTR checkColPtrVal, eax

; 252  : 					checkColPtrVal.y = curColPtrVal.y;

  00bae	8b 05 04 00 00
	00		 mov	 eax, DWORD PTR curColPtrVal+4
  00bb4	89 05 04 00 00
	00		 mov	 DWORD PTR checkColPtrVal+4, eax

; 253  : 					break;

  00bba	e9 72 01 00 00	 jmp	 $LN15@UpdateEnti
$LN38@UpdateEnti:

; 254  : 				case bottom_right:
; 255  : 					if (onBottom || onRight) goto _switch;

  00bbf	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR onBottom
  00bc6	85 c0		 test	 eax, eax
  00bc8	75 0b		 jne	 SHORT $LN40@UpdateEnti
  00bca	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR onRight
  00bd1	85 c0		 test	 eax, eax
  00bd3	74 05		 je	 SHORT $LN39@UpdateEnti
$LN40@UpdateEnti:
  00bd5	e9 42 ff ff ff	 jmp	 $LN201@UpdateEnti
$LN39@UpdateEnti:

; 256  : 					checkColPtrVal.x = curColPtrVal.x + 1;

  00bda	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR curColPtrVal
  00be0	ff c0		 inc	 eax
  00be2	89 05 00 00 00
	00		 mov	 DWORD PTR checkColPtrVal, eax

; 257  : 					checkColPtrVal.y = curColPtrVal.y - 1;

  00be8	8b 05 04 00 00
	00		 mov	 eax, DWORD PTR curColPtrVal+4
  00bee	ff c8		 dec	 eax
  00bf0	89 05 04 00 00
	00		 mov	 DWORD PTR checkColPtrVal+4, eax

; 258  : 					break;

  00bf6	e9 36 01 00 00	 jmp	 $LN15@UpdateEnti
$LN41@UpdateEnti:

; 259  : 				case bottom:
; 260  : 					if (onBottom) goto _switch;

  00bfb	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR onBottom
  00c02	85 c0		 test	 eax, eax
  00c04	74 05		 je	 SHORT $LN42@UpdateEnti
  00c06	e9 11 ff ff ff	 jmp	 $LN202@UpdateEnti
$LN42@UpdateEnti:

; 261  : 					checkColPtrVal.x = curColPtrVal.x;

  00c0b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR curColPtrVal
  00c11	89 05 00 00 00
	00		 mov	 DWORD PTR checkColPtrVal, eax

; 262  : 					checkColPtrVal.y = curColPtrVal.y - 1;

  00c17	8b 05 04 00 00
	00		 mov	 eax, DWORD PTR curColPtrVal+4
  00c1d	ff c8		 dec	 eax
  00c1f	89 05 04 00 00
	00		 mov	 DWORD PTR checkColPtrVal+4, eax

; 263  : 					break;

  00c25	e9 07 01 00 00	 jmp	 $LN15@UpdateEnti
$LN43@UpdateEnti:

; 264  : 				case bottom_left:
; 265  : 					if (onBottom || onLeft) goto _switch;

  00c2a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR onBottom
  00c31	85 c0		 test	 eax, eax
  00c33	75 0b		 jne	 SHORT $LN45@UpdateEnti
  00c35	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR onLeft
  00c3c	85 c0		 test	 eax, eax
  00c3e	74 05		 je	 SHORT $LN44@UpdateEnti
$LN45@UpdateEnti:
  00c40	e9 d7 fe ff ff	 jmp	 $LN203@UpdateEnti
$LN44@UpdateEnti:

; 266  : 					checkColPtrVal.x = curColPtrVal.x - 1;

  00c45	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR curColPtrVal
  00c4b	ff c8		 dec	 eax
  00c4d	89 05 00 00 00
	00		 mov	 DWORD PTR checkColPtrVal, eax

; 267  : 					checkColPtrVal.y = curColPtrVal.y - 1;

  00c53	8b 05 04 00 00
	00		 mov	 eax, DWORD PTR curColPtrVal+4
  00c59	ff c8		 dec	 eax
  00c5b	89 05 04 00 00
	00		 mov	 DWORD PTR checkColPtrVal+4, eax

; 268  : 					break;

  00c61	e9 cb 00 00 00	 jmp	 $LN15@UpdateEnti
$LN46@UpdateEnti:

; 269  : 				case left:
; 270  : 					if (onLeft) goto _switch;

  00c66	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR onLeft
  00c6d	85 c0		 test	 eax, eax
  00c6f	74 05		 je	 SHORT $LN47@UpdateEnti
  00c71	e9 a6 fe ff ff	 jmp	 $LN204@UpdateEnti
$LN47@UpdateEnti:

; 271  : 					checkColPtrVal.x = curColPtrVal.x - 1;

  00c76	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR curColPtrVal
  00c7c	ff c8		 dec	 eax
  00c7e	89 05 00 00 00
	00		 mov	 DWORD PTR checkColPtrVal, eax

; 272  : 					checkColPtrVal.y = curColPtrVal.y;

  00c84	8b 05 04 00 00
	00		 mov	 eax, DWORD PTR curColPtrVal+4
  00c8a	89 05 04 00 00
	00		 mov	 DWORD PTR checkColPtrVal+4, eax

; 273  : 					break;

  00c90	e9 9c 00 00 00	 jmp	 $LN15@UpdateEnti
$LN48@UpdateEnti:

; 274  : 				case top_left:
; 275  : 					if (onTop || onLeft) goto _switch;

  00c95	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR onTop
  00c9c	85 c0		 test	 eax, eax
  00c9e	75 0b		 jne	 SHORT $LN50@UpdateEnti
  00ca0	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR onLeft
  00ca7	85 c0		 test	 eax, eax
  00ca9	74 05		 je	 SHORT $LN49@UpdateEnti
$LN50@UpdateEnti:
  00cab	e9 6c fe ff ff	 jmp	 $LN205@UpdateEnti
$LN49@UpdateEnti:

; 276  : 					checkColPtrVal.x = curColPtrVal.x - 1;

  00cb0	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR curColPtrVal
  00cb6	ff c8		 dec	 eax
  00cb8	89 05 00 00 00
	00		 mov	 DWORD PTR checkColPtrVal, eax

; 277  : 					checkColPtrVal.y = curColPtrVal.y + 1;

  00cbe	8b 05 04 00 00
	00		 mov	 eax, DWORD PTR curColPtrVal+4
  00cc4	ff c0		 inc	 eax
  00cc6	89 05 04 00 00
	00		 mov	 DWORD PTR checkColPtrVal+4, eax

; 278  : 					break;

  00ccc	eb 63		 jmp	 SHORT $LN15@UpdateEnti
$LN51@UpdateEnti:

; 279  : 				case top:
; 280  : 					if (onTop) goto _switch;

  00cce	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR onTop
  00cd5	85 c0		 test	 eax, eax
  00cd7	74 05		 je	 SHORT $LN52@UpdateEnti
  00cd9	e9 3e fe ff ff	 jmp	 $LN206@UpdateEnti
$LN52@UpdateEnti:

; 281  : 					checkColPtrVal.x = curColPtrVal.x;

  00cde	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR curColPtrVal
  00ce4	89 05 00 00 00
	00		 mov	 DWORD PTR checkColPtrVal, eax

; 282  : 					checkColPtrVal.y = curColPtrVal.y + 1;

  00cea	8b 05 04 00 00
	00		 mov	 eax, DWORD PTR curColPtrVal+4
  00cf0	ff c0		 inc	 eax
  00cf2	89 05 04 00 00
	00		 mov	 DWORD PTR checkColPtrVal+4, eax

; 283  : 					break;

  00cf8	eb 37		 jmp	 SHORT $LN15@UpdateEnti
$LN53@UpdateEnti:

; 284  : 				case top_right:
; 285  : 					if (onTop || onRight) goto _switch;

  00cfa	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR onTop
  00d01	85 c0		 test	 eax, eax
  00d03	75 0b		 jne	 SHORT $LN55@UpdateEnti
  00d05	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR onRight
  00d0c	85 c0		 test	 eax, eax
  00d0e	74 05		 je	 SHORT $LN54@UpdateEnti
$LN55@UpdateEnti:
  00d10	e9 07 fe ff ff	 jmp	 $LN207@UpdateEnti
$LN54@UpdateEnti:

; 286  : 					checkColPtrVal.x = curColPtrVal.x + 1;

  00d15	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR curColPtrVal
  00d1b	ff c0		 inc	 eax
  00d1d	89 05 00 00 00
	00		 mov	 DWORD PTR checkColPtrVal, eax

; 287  : 					checkColPtrVal.y = curColPtrVal.y + 1;

  00d23	8b 05 04 00 00
	00		 mov	 eax, DWORD PTR curColPtrVal+4
  00d29	ff c0		 inc	 eax
  00d2b	89 05 04 00 00
	00		 mov	 DWORD PTR checkColPtrVal+4, eax
$LN15@UpdateEnti:

; 288  : 					break;
; 289  : 				}
; 290  : 				subCollider = cells[checkColPtrVal.x][checkColPtrVal.y];

  00d31	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR checkColPtrVal
  00d38	48 69 c0 00 20
	00 00		 imul	 rax, rax, 8192		; 00002000H
  00d3f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cells
  00d46	48 03 c8	 add	 rcx, rax
  00d49	48 8b c1	 mov	 rax, rcx
  00d4c	48 63 0d 04 00
	00 00		 movsxd	 rcx, DWORD PTR checkColPtrVal+4
  00d53	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00d57	48 89 05 00 00
	00 00		 mov	 QWORD PTR subCollider, rax

; 291  : 				if (cellCheckStates[checkColPtrVal.x][checkColPtrVal.y]) goto _switch;

  00d5e	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR checkColPtrVal
  00d65	48 69 c0 00 04
	00 00		 imul	 rax, rax, 1024		; 00000400H
  00d6c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cellCheckStates
  00d73	48 03 c8	 add	 rcx, rax
  00d76	48 8b c1	 mov	 rax, rcx
  00d79	48 63 0d 04 00
	00 00		 movsxd	 rcx, DWORD PTR checkColPtrVal+4
  00d80	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00d84	85 c0		 test	 eax, eax
  00d86	74 05		 je	 SHORT $LN56@UpdateEnti
  00d88	e9 8f fd ff ff	 jmp	 $LN208@UpdateEnti
$LN56@UpdateEnti:

; 292  : 				goto iterate;

  00d8d	e9 cf f8 ff ff	 jmp	 $iterate$213

; 293  : 			}

  00d92	e9 80 f8 ff ff	 jmp	 $LN142@UpdateEnti
$LN12@UpdateEnti:
$cont$212:

; 294  : 		cont:
; 295  : 			advance(curNode);

  00d97	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curNode
  00d9e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00da2	48 89 05 00 00
	00 00		 mov	 QWORD PTR curNode, rax

; 296  : 		}

  00da9	e9 fe f5 ff ff	 jmp	 $LN9@UpdateEnti
$LN10@UpdateEnti:

; 297  : 		curCheckedCell = checkedCells;

  00dae	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR checkedCells
  00db5	48 89 05 00 00
	00 00		 mov	 QWORD PTR curCheckedCell, rax
$LL17@UpdateEnti:

; 298  : 		while (curCheckedCell) {

  00dbc	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR curCheckedCell, 0
  00dc4	74 5c		 je	 SHORT $LN18@UpdateEnti

; 299  : 			cellCheckStates[curCheckedCell->value.x][curCheckedCell->value.y] = false;

  00dc6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curCheckedCell
  00dcd	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00dd0	48 69 c0 00 04
	00 00		 imul	 rax, rax, 1024		; 00000400H
  00dd7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cellCheckStates
  00dde	48 03 c8	 add	 rcx, rax
  00de1	48 8b c1	 mov	 rax, rcx
  00de4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curCheckedCell
  00deb	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  00def	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0

; 300  : 			prevCheckedCell = curCheckedCell;

  00df3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curCheckedCell
  00dfa	48 89 05 00 00
	00 00		 mov	 QWORD PTR prevCheckedCell, rax

; 301  : 			advance(curCheckedCell);

  00e01	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curCheckedCell
  00e08	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00e0c	48 89 05 00 00
	00 00		 mov	 QWORD PTR curCheckedCell, rax

; 302  : 			RemoveCellChecks(prevCheckedCell);

  00e13	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR prevCheckedCell
  00e1a	e8 00 00 00 00	 call	 RemoveCellChecks
  00e1f	90		 npad	 1

; 303  : 		}

  00e20	eb 9a		 jmp	 SHORT $LL17@UpdateEnti
$LN18@UpdateEnti:

; 304  : 		checkedCells = NULL;

  00e22	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR checkedCells, 0

; 305  : 	}

  00e2d	e9 07 f2 ff ff	 jmp	 $LN2@UpdateEnti
$LN3@UpdateEnti:

; 306  : 	curNode = entityHead;

  00e32	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR entityHead
  00e39	48 89 05 00 00
	00 00		 mov	 QWORD PTR curNode, rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h

; 343  : 	QueryPerformanceCounter(&cTime);

  00e40	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cTime
  00e47	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 344  : 	return (float)((cTime.QuadPart - pTime.QuadPart) * 1000000 / frequency) / 1000000.0f * timeScale;

  00e4d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR pTime
  00e54	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR cTime
  00e5b	48 2b c8	 sub	 rcx, rax
  00e5e	48 8b c1	 mov	 rax, rcx
  00e61	48 69 c0 40 42
	0f 00		 imul	 rax, rax, 1000000	; 000f4240H
  00e68	48 99		 cdq
  00e6a	48 f7 3d 00 00
	00 00		 idiv	 QWORD PTR frequency
  00e71	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  00e76	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@49742400
  00e7e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR timeScale
  00e86	f3 0f 11 44 24
	70		 movss	 DWORD PTR $T22[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c

; 307  : 	deltaT = deltaTime();

  00e8c	f3 0f 10 44 24
	70		 movss	 xmm0, DWORD PTR $T22[rsp]
  00e92	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR deltaT, xmm0
$LL19@UpdateEnti:

; 308  : 	while (curNode) {

  00e9a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR curNode, 0
  00ea2	0f 84 9b 0c 00
	00		 je	 $LN20@UpdateEnti

; 309  : 		curData = curNode->entity->physicsData;

  00ea8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curNode
  00eaf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00eb2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00eb5	48 89 05 00 00
	00 00		 mov	 QWORD PTR curData, rax

; 310  : 		if (!curData) goto transformCont;

  00ebc	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR curData, 0
  00ec4	75 05		 jne	 SHORT $LN57@UpdateEnti
  00ec6	e9 61 0c 00 00	 jmp	 $transformCont$216
$LN57@UpdateEnti:

; 311  : 		curEntity = curNode->entity;

  00ecb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curNode
  00ed2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00ed5	48 89 05 00 00
	00 00		 mov	 QWORD PTR curEntity, rax

; 312  : 		curTransform = &curData->transform;

  00edc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  00ee3	48 89 05 00 00
	00 00		 mov	 QWORD PTR curTransform, rax

; 313  : #define ApplyFriction(coord, globalCoef) curData->velocity.coord -= (curData->velocity.coord < .0f ? FMax : FMin)(curData->frictionCoef.coord * globalCoef * ((curData->velocity.coord > .0f) * 2.0f - 1.0f) * curData->invMass * (bool)curData->velocity.coord, curData->velocity.coord);
; 314  : #define XOR_UpdateVert(coord) curTransform->updateVerticies.coord |= !curData->bIsStatic && memcmp(&curTransform->pastPos, &curTransform->position, vecSize);\
; 315  : shouldDraw |= curTransform->updateVerticies.coord
; 316  : 		ApplyFriction(x, GLOBAL_FRICTION_COEFFICIENT_X);

  00eea	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  00ef1	f3 0f 10 40 48	 movss	 xmm0, DWORD PTR [rax+72]
  00ef6	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00efd	76 0d		 jbe	 SHORT $LN110@UpdateEnti
  00eff	c7 84 24 24 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv461[rsp], 1
  00f0a	eb 0b		 jmp	 SHORT $LN111@UpdateEnti
$LN110@UpdateEnti:
  00f0c	c7 84 24 24 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv461[rsp], 0
$LN111@UpdateEnti:
  00f17	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  00f1e	f3 0f 10 40 48	 movss	 xmm0, DWORD PTR [rax+72]
  00f23	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00f2a	7a 0f		 jp	 SHORT $LN112@UpdateEnti
  00f2c	75 0d		 jne	 SHORT $LN112@UpdateEnti
  00f2e	c7 84 24 28 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv471[rsp], 0
  00f39	eb 0b		 jmp	 SHORT $LN113@UpdateEnti
$LN112@UpdateEnti:
  00f3b	c7 84 24 28 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv471[rsp], 1
$LN113@UpdateEnti:
  00f46	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  00f4d	0f 57 c0	 xorps	 xmm0, xmm0
  00f50	0f 2f 40 48	 comiss	 xmm0, DWORD PTR [rax+72]
  00f54	76 11		 jbe	 SHORT $LN108@UpdateEnti
  00f56	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:FMax
  00f5d	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR tv453[rsp], rax
  00f65	eb 0f		 jmp	 SHORT $LN109@UpdateEnti
$LN108@UpdateEnti:
  00f67	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:FMin
  00f6e	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR tv453[rsp], rax
$LN109@UpdateEnti:
  00f76	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  00f7d	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [rax+56]
  00f82	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41880000
  00f8a	f3 0f 2a 8c 24
	24 02 00 00	 cvtsi2ss xmm1, DWORD PTR tv461[rsp]
  00f93	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  00f9b	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f800000
  00fa3	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00fa7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  00fae	f3 0f 59 40 44	 mulss	 xmm0, DWORD PTR [rax+68]
  00fb3	0f b6 84 24 28
	02 00 00	 movzx	 eax, BYTE PTR tv471[rsp]
  00fbb	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00fbf	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00fc3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  00fca	f3 0f 10 48 48	 movss	 xmm1, DWORD PTR [rax+72]
  00fcf	ff 94 24 30 02
	00 00		 call	 QWORD PTR tv453[rsp]
  00fd6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  00fdd	f3 0f 10 48 48	 movss	 xmm1, DWORD PTR [rax+72]
  00fe2	f3 0f 5c c8	 subss	 xmm1, xmm0
  00fe6	0f 28 c1	 movaps	 xmm0, xmm1
  00fe9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  00ff0	f3 0f 11 40 48	 movss	 DWORD PTR [rax+72], xmm0

; 317  : 		ApplyFriction(y, GLOBAL_FRICTION_COEFFICIENT_Y);

  00ff5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  00ffc	f3 0f 10 40 4c	 movss	 xmm0, DWORD PTR [rax+76]
  01001	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  01008	76 0d		 jbe	 SHORT $LN116@UpdateEnti
  0100a	c7 84 24 38 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv490[rsp], 1
  01015	eb 0b		 jmp	 SHORT $LN117@UpdateEnti
$LN116@UpdateEnti:
  01017	c7 84 24 38 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv490[rsp], 0
$LN117@UpdateEnti:
  01022	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  01029	f3 0f 10 40 4c	 movss	 xmm0, DWORD PTR [rax+76]
  0102e	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  01035	7a 0f		 jp	 SHORT $LN118@UpdateEnti
  01037	75 0d		 jne	 SHORT $LN118@UpdateEnti
  01039	c7 84 24 3c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv500[rsp], 0
  01044	eb 0b		 jmp	 SHORT $LN119@UpdateEnti
$LN118@UpdateEnti:
  01046	c7 84 24 3c 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv500[rsp], 1
$LN119@UpdateEnti:
  01051	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  01058	0f 57 c0	 xorps	 xmm0, xmm0
  0105b	0f 2f 40 4c	 comiss	 xmm0, DWORD PTR [rax+76]
  0105f	76 11		 jbe	 SHORT $LN114@UpdateEnti
  01061	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:FMax
  01068	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR tv482[rsp], rax
  01070	eb 0f		 jmp	 SHORT $LN115@UpdateEnti
$LN114@UpdateEnti:
  01072	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:FMin
  01079	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR tv482[rsp], rax
$LN115@UpdateEnti:
  01081	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  01088	f3 0f 10 40 3c	 movss	 xmm0, DWORD PTR [rax+60]
  0108d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@00000000
  01095	f3 0f 2a 8c 24
	38 02 00 00	 cvtsi2ss xmm1, DWORD PTR tv490[rsp]
  0109e	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  010a6	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f800000
  010ae	f3 0f 59 c1	 mulss	 xmm0, xmm1
  010b2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  010b9	f3 0f 59 40 44	 mulss	 xmm0, DWORD PTR [rax+68]
  010be	0f b6 84 24 3c
	02 00 00	 movzx	 eax, BYTE PTR tv500[rsp]
  010c6	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  010ca	f3 0f 59 c1	 mulss	 xmm0, xmm1
  010ce	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  010d5	f3 0f 10 48 4c	 movss	 xmm1, DWORD PTR [rax+76]
  010da	ff 94 24 40 02
	00 00		 call	 QWORD PTR tv482[rsp]
  010e1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  010e8	f3 0f 10 48 4c	 movss	 xmm1, DWORD PTR [rax+76]
  010ed	f3 0f 5c c8	 subss	 xmm1, xmm0
  010f1	0f 28 c1	 movaps	 xmm0, xmm1
  010f4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  010fb	f3 0f 11 40 4c	 movss	 DWORD PTR [rax+76], xmm0

; 318  : 		XOR_UpdateVert(x);

  01100	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  01107	0f b6 40 50	 movzx	 eax, BYTE PTR [rax+80]
  0110b	85 c0		 test	 eax, eax
  0110d	75 36		 jne	 SHORT $LN120@UpdateEnti
  0110f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  01116	48 83 c0 0c	 add	 rax, 12
  0111a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTransform
  01121	48 83 c1 14	 add	 rcx, 20
  01125	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR vecSize
  0112c	48 8b d0	 mov	 rdx, rax
  0112f	e8 00 00 00 00	 call	 memcmp
  01134	85 c0		 test	 eax, eax
  01136	74 0d		 je	 SHORT $LN120@UpdateEnti
  01138	c7 84 24 48 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv523[rsp], 1
  01143	eb 0b		 jmp	 SHORT $LN121@UpdateEnti
$LN120@UpdateEnti:
  01145	c7 84 24 48 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv523[rsp], 0
$LN121@UpdateEnti:
  01150	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  01157	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0115a	89 84 24 4c 02
	00 00		 mov	 DWORD PTR tv525[rsp], eax
  01161	8b 84 24 48 02
	00 00		 mov	 eax, DWORD PTR tv523[rsp]
  01168	8b 8c 24 4c 02
	00 00		 mov	 ecx, DWORD PTR tv525[rsp]
  0116f	0b c8		 or	 ecx, eax
  01171	8b c1		 mov	 eax, ecx
  01173	85 c0		 test	 eax, eax
  01175	75 0d		 jne	 SHORT $LN122@UpdateEnti
  01177	c7 84 24 50 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv528[rsp], 0
  01182	eb 0b		 jmp	 SHORT $LN123@UpdateEnti
$LN122@UpdateEnti:
  01184	c7 84 24 50 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv528[rsp], 1
$LN123@UpdateEnti:
  0118f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  01196	0f b6 8c 24 50
	02 00 00	 movzx	 ecx, BYTE PTR tv528[rsp]
  0119e	88 08		 mov	 BYTE PTR [rax], cl
  011a0	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR shouldDraw
  011a7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTransform
  011ae	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  011b1	0b c1		 or	 eax, ecx
  011b3	85 c0		 test	 eax, eax
  011b5	75 0d		 jne	 SHORT $LN124@UpdateEnti
  011b7	c7 84 24 54 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv535[rsp], 0
  011c2	eb 0b		 jmp	 SHORT $LN125@UpdateEnti
$LN124@UpdateEnti:
  011c4	c7 84 24 54 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv535[rsp], 1
$LN125@UpdateEnti:
  011cf	0f b6 84 24 54
	02 00 00	 movzx	 eax, BYTE PTR tv535[rsp]
  011d7	88 05 00 00 00
	00		 mov	 BYTE PTR shouldDraw, al

; 319  : 		XOR_UpdateVert(y);

  011dd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  011e4	0f b6 40 50	 movzx	 eax, BYTE PTR [rax+80]
  011e8	85 c0		 test	 eax, eax
  011ea	75 36		 jne	 SHORT $LN126@UpdateEnti
  011ec	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  011f3	48 83 c0 0c	 add	 rax, 12
  011f7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTransform
  011fe	48 83 c1 14	 add	 rcx, 20
  01202	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR vecSize
  01209	48 8b d0	 mov	 rdx, rax
  0120c	e8 00 00 00 00	 call	 memcmp
  01211	85 c0		 test	 eax, eax
  01213	74 0d		 je	 SHORT $LN126@UpdateEnti
  01215	c7 84 24 58 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv552[rsp], 1
  01220	eb 0b		 jmp	 SHORT $LN127@UpdateEnti
$LN126@UpdateEnti:
  01222	c7 84 24 58 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv552[rsp], 0
$LN127@UpdateEnti:
  0122d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  01234	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  01238	89 84 24 5c 02
	00 00		 mov	 DWORD PTR tv554[rsp], eax
  0123f	8b 84 24 58 02
	00 00		 mov	 eax, DWORD PTR tv552[rsp]
  01246	8b 8c 24 5c 02
	00 00		 mov	 ecx, DWORD PTR tv554[rsp]
  0124d	0b c8		 or	 ecx, eax
  0124f	8b c1		 mov	 eax, ecx
  01251	85 c0		 test	 eax, eax
  01253	75 0d		 jne	 SHORT $LN128@UpdateEnti
  01255	c7 84 24 60 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv557[rsp], 0
  01260	eb 0b		 jmp	 SHORT $LN129@UpdateEnti
$LN128@UpdateEnti:
  01262	c7 84 24 60 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv557[rsp], 1
$LN129@UpdateEnti:
  0126d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  01274	0f b6 8c 24 60
	02 00 00	 movzx	 ecx, BYTE PTR tv557[rsp]
  0127c	88 48 01	 mov	 BYTE PTR [rax+1], cl
  0127f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR shouldDraw
  01286	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTransform
  0128d	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  01291	0b c1		 or	 eax, ecx
  01293	85 c0		 test	 eax, eax
  01295	75 0d		 jne	 SHORT $LN130@UpdateEnti
  01297	c7 84 24 64 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv564[rsp], 0
  012a2	eb 0b		 jmp	 SHORT $LN131@UpdateEnti
$LN130@UpdateEnti:
  012a4	c7 84 24 64 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv564[rsp], 1
$LN131@UpdateEnti:
  012af	0f b6 84 24 64
	02 00 00	 movzx	 eax, BYTE PTR tv564[rsp]
  012b7	88 05 00 00 00
	00		 mov	 BYTE PTR shouldDraw, al

; 320  : 		curMesh = curData->mesh;

  012bd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  012c4	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  012c8	48 89 05 00 00
	00 00		 mov	 QWORD PTR curMesh, rax

; 321  : 		curAnimator = curData->animator;

  012cf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curData
  012d6	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  012da	48 89 05 00 00
	00 00		 mov	 QWORD PTR curAnimator, rax

; 322  : 		posIsZeroVec = !memcmp(&(curTransform->position), &zeroVector, sizeof(Vector2));

  012e1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  012e8	48 83 c0 0c	 add	 rax, 12
  012ec	41 b8 08 00 00
	00		 mov	 r8d, 8
  012f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:zeroVector
  012f9	48 8b c8	 mov	 rcx, rax
  012fc	e8 00 00 00 00	 call	 memcmp
  01301	85 c0		 test	 eax, eax
  01303	75 0d		 jne	 SHORT $LN132@UpdateEnti
  01305	c7 84 24 68 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv576[rsp], 1
  01310	eb 0b		 jmp	 SHORT $LN133@UpdateEnti
$LN132@UpdateEnti:
  01312	c7 84 24 68 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv576[rsp], 0
$LN133@UpdateEnti:
  0131d	0f b6 84 24 68
	02 00 00	 movzx	 eax, BYTE PTR tv576[rsp]
  01325	88 05 00 00 00
	00		 mov	 BYTE PTR posIsZeroVec, al

; 323  : 		scale.x = curTransform->scale.x != 1.0f || !curTransform->matchesScale.x;

  0132b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  01332	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  01337	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3f800000
  0133e	7a 1e		 jp	 SHORT $LN134@UpdateEnti
  01340	75 1c		 jne	 SHORT $LN134@UpdateEnti
  01342	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  01349	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  0134d	85 c0		 test	 eax, eax
  0134f	74 0d		 je	 SHORT $LN134@UpdateEnti
  01351	c7 84 24 6c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv583[rsp], 0
  0135c	eb 0b		 jmp	 SHORT $LN135@UpdateEnti
$LN134@UpdateEnti:
  0135e	c7 84 24 6c 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv583[rsp], 1
$LN135@UpdateEnti:
  01369	83 bc 24 6c 02
	00 00 00	 cmp	 DWORD PTR tv583[rsp], 0
  01371	75 0d		 jne	 SHORT $LN136@UpdateEnti
  01373	c7 84 24 70 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv585[rsp], 0
  0137e	eb 0b		 jmp	 SHORT $LN137@UpdateEnti
$LN136@UpdateEnti:
  01380	c7 84 24 70 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv585[rsp], 1
$LN137@UpdateEnti:
  0138b	0f b6 84 24 70
	02 00 00	 movzx	 eax, BYTE PTR tv585[rsp]
  01393	88 05 00 00 00
	00		 mov	 BYTE PTR scale, al

; 324  : 		scale.y = curTransform->scale.y != 1.0f || !curTransform->matchesScale.y;

  01399	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  013a0	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  013a5	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3f800000
  013ac	7a 1e		 jp	 SHORT $LN138@UpdateEnti
  013ae	75 1c		 jne	 SHORT $LN138@UpdateEnti
  013b0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  013b7	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  013bb	85 c0		 test	 eax, eax
  013bd	74 0d		 je	 SHORT $LN138@UpdateEnti
  013bf	c7 84 24 74 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv592[rsp], 0
  013ca	eb 0b		 jmp	 SHORT $LN139@UpdateEnti
$LN138@UpdateEnti:
  013cc	c7 84 24 74 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv592[rsp], 1
$LN139@UpdateEnti:
  013d7	83 bc 24 74 02
	00 00 00	 cmp	 DWORD PTR tv592[rsp], 0
  013df	75 0d		 jne	 SHORT $LN140@UpdateEnti
  013e1	c7 84 24 78 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv594[rsp], 0
  013ec	eb 0b		 jmp	 SHORT $LN141@UpdateEnti
$LN140@UpdateEnti:
  013ee	c7 84 24 78 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv594[rsp], 1
$LN141@UpdateEnti:
  013f9	0f b6 84 24 78
	02 00 00	 movzx	 eax, BYTE PTR tv594[rsp]
  01401	88 05 01 00 00
	00		 mov	 BYTE PTR scale+1, al

; 325  : 		if (curTransform->updateVerticies.x && curTransform->updateVerticies.y) {

  01407	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  0140e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01411	85 c0		 test	 eax, eax
  01413	0f 84 e6 00 00
	00		 je	 $LN58@UpdateEnti
  01419	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  01420	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  01424	85 c0		 test	 eax, eax
  01426	0f 84 d3 00 00
	00		 je	 $LN58@UpdateEnti

; 326  : 			ResetScaleUpdate(curTransform);

  0142c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  01433	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR transform$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.h

; 202  : 	resetScale(transform);

  0143b	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR transform$[rsp]
  01443	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR oneBVector
  0144a	66 89 48 02	 mov	 WORD PTR [rax+2], cx
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c

; 327  : 			ResetVertexUpdate(curTransform);

  0144e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  01455	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR transform$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.h

; 199  : 	resetPos(transform);

  0145d	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR transform$[rsp]
  01465	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR zeroBVector
  0146c	66 89 08	 mov	 WORD PTR [rax], cx
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c

; 328  : 			if (posIsZeroVec) {

  0146f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR posIsZeroVec
  01476	85 c0		 test	 eax, eax
  01478	74 29		 je	 SHORT $LN60@UpdateEnti

; 329  : 				ScaleMesh(curMesh->meshLocation, curTransform->scale.x, curTransform->scale.y);

  0147a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  01481	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [rax+8]
  01486	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  0148d	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [rax+4]
  01492	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curMesh
  01499	8b 08		 mov	 ecx, DWORD PTR [rax]
  0149b	e8 00 00 00 00	 call	 ScaleMesh
  014a0	90		 npad	 1

; 330  : 			}

  014a1	eb 57		 jmp	 SHORT $LN61@UpdateEnti
$LN60@UpdateEnti:

; 331  : 			else {
; 332  : 				if (scale.x || scale.y) {

  014a3	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR scale
  014aa	85 c0		 test	 eax, eax
  014ac	75 0b		 jne	 SHORT $LN64@UpdateEnti
  014ae	0f b6 05 01 00
	00 00		 movzx	 eax, BYTE PTR scale+1
  014b5	85 c0		 test	 eax, eax
  014b7	74 27		 je	 SHORT $LN62@UpdateEnti
$LN64@UpdateEnti:

; 333  : 					MoveScaleMesh(curMesh->meshLocation, curTransform->position, curTransform->scale);

  014b9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  014c0	4c 8b 40 04	 mov	 r8, QWORD PTR [rax+4]
  014c4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  014cb	48 8b 50 0c	 mov	 rdx, QWORD PTR [rax+12]
  014cf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curMesh
  014d6	8b 08		 mov	 ecx, DWORD PTR [rax]
  014d8	e8 00 00 00 00	 call	 MoveScaleMesh
  014dd	90		 npad	 1

; 334  : 				}

  014de	eb 1a		 jmp	 SHORT $LN63@UpdateEnti
$LN62@UpdateEnti:

; 335  : 				else MoveMeshTo(curMesh->meshLocation, curTransform->position);

  014e0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  014e7	48 8b 50 0c	 mov	 rdx, QWORD PTR [rax+12]
  014eb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curMesh
  014f2	8b 08		 mov	 ecx, DWORD PTR [rax]
  014f4	e8 00 00 00 00	 call	 MoveMeshTo
  014f9	90		 npad	 1
$LN63@UpdateEnti:
$LN61@UpdateEnti:

; 336  : 			}
; 337  : 		}

  014fa	e9 d0 03 00 00	 jmp	 $LN59@UpdateEnti
$LN58@UpdateEnti:

; 338  : 		else {
; 339  : 			if (curTransform->updateVerticies.x) {//we set the mesh to a position on the x and y instead of ADDING BY a position on the x and y, in case the position was changed twice by two different factors in one frame.

  014ff	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  01506	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01509	85 c0		 test	 eax, eax
  0150b	74 34		 je	 SHORT $LN65@UpdateEnti

; 340  : 				curTransform->updateVerticies.x = false;

  0150d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  01514	c6 00 00	 mov	 BYTE PTR [rax], 0

; 341  : 				if (!scale.x) MoveMeshX(curMesh->meshLocation, curTransform->position.x);

  01517	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR scale
  0151e	85 c0		 test	 eax, eax
  01520	75 1d		 jne	 SHORT $LN66@UpdateEnti
  01522	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  01529	f3 0f 10 48 0c	 movss	 xmm1, DWORD PTR [rax+12]
  0152e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curMesh
  01535	8b 08		 mov	 ecx, DWORD PTR [rax]
  01537	e8 00 00 00 00	 call	 MoveMeshX
  0153c	90		 npad	 1
  0153d	eb 02		 jmp	 SHORT $LN67@UpdateEnti
$LN66@UpdateEnti:

; 342  : 				else goto changeScaleX;

  0153f	eb 0f		 jmp	 SHORT $changeScaleX$217
$LN67@UpdateEnti:
$LN65@UpdateEnti:

; 343  : 			}
; 344  : 			if (scale.x) {

  01541	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR scale
  01548	85 c0		 test	 eax, eax
  0154a	0f 84 93 01 00
	00		 je	 $LN68@UpdateEnti
$changeScaleX$217:

; 346  : 				checkGridSclCoord(curNode->entity, x);

  01550	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curNode
  01557	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0155a	b9 08 00 00 00	 mov	 ecx, 8
  0155f	48 6b c9 01	 imul	 rcx, rcx, 1
  01563	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curNode
  0156a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0156d	41 b8 08 00 00
	00		 mov	 r8d, 8
  01573	4d 6b c0 00	 imul	 r8, r8, 0
  01577	f3 0f 10 44 08
	2c		 movss	 xmm0, DWORD PTR [rax+rcx+44]
  0157d	f3 42 0f 5c 44
	02 2c		 subss	 xmm0, DWORD PTR [rdx+r8+44]
  01584	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0158c	f3 0f 11 44 24
	28		 movss	 DWORD PTR size$16[rsp], xmm0
  01592	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curNode
  01599	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0159c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  015a0	74 1e		 je	 SHORT $LN69@UpdateEnti
  015a2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curNode
  015a9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  015ac	48 8b 00	 mov	 rax, QWORD PTR [rax]
  015af	f3 0f 10 44 24
	28		 movss	 xmm0, DWORD PTR size$16[rsp]
  015b5	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [rax+4]
  015ba	f3 0f 11 44 24
	28		 movss	 DWORD PTR size$16[rsp], xmm0
$LN69@UpdateEnti:
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h

; 19   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  015c0	f3 0f 10 44 24
	28		 movss	 xmm0, DWORD PTR size$16[rsp]
  015c6	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  015cd	72 0d		 jb	 SHORT $LN185@UpdateEnti
  015cf	c7 84 24 7c 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv839[rsp], 1
  015da	eb 0b		 jmp	 SHORT $LN186@UpdateEnti
$LN185@UpdateEnti:
  015dc	c7 84 24 7c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv839[rsp], 0
$LN186@UpdateEnti:
  015e7	f3 0f 2a 84 24
	7c 02 00 00	 cvtsi2ss xmm0, DWORD PTR tv839[rsp]
  015f0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  015f8	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  01600	f3 0f 10 4c 24
	28		 movss	 xmm1, DWORD PTR size$16[rsp]
  01606	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0160a	0f 28 c1	 movaps	 xmm0, xmm1
  0160d	f3 0f 11 44 24
	74		 movss	 DWORD PTR $T23[rsp], xmm0
  01613	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR cellSize
  0161b	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  01622	72 0d		 jb	 SHORT $LN189@UpdateEnti
  01624	c7 84 24 80 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv836[rsp], 1
  0162f	eb 0b		 jmp	 SHORT $LN190@UpdateEnti
$LN189@UpdateEnti:
  01631	c7 84 24 80 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv836[rsp], 0
$LN190@UpdateEnti:
  0163c	f3 0f 2a 84 24
	80 02 00 00	 cvtsi2ss xmm0, DWORD PTR tv836[rsp]
  01645	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0164d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  01655	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR cellSize
  0165d	f3 0f 59 c8	 mulss	 xmm1, xmm0
  01661	0f 28 c1	 movaps	 xmm0, xmm1
  01664	f3 0f 11 44 24
	78		 movss	 DWORD PTR $T24[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c

; 346  : 				checkGridSclCoord(curNode->entity, x);

  0166a	f3 0f 10 44 24
	74		 movss	 xmm0, DWORD PTR $T23[rsp]
  01670	f3 0f 10 4c 24
	78		 movss	 xmm1, DWORD PTR $T24[rsp]
  01676	0f 2f c1	 comiss	 xmm0, xmm1
  01679	76 0e		 jbe	 SHORT $LN70@UpdateEnti
  0167b	f3 0f 10 44 24
	28		 movss	 xmm0, DWORD PTR size$16[rsp]
  01681	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR cellSize, xmm0
$LN70@UpdateEnti:

; 347  : 				curTransform->matchesScale.x = true;

  01689	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  01690	c6 40 02 01	 mov	 BYTE PTR [rax+2], 1

; 348  : 				if (posIsZeroVec) {

  01694	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR posIsZeroVec
  0169b	85 c0		 test	 eax, eax
  0169d	74 1d		 je	 SHORT $LN71@UpdateEnti

; 349  : 					ScaleMeshX(curMesh->meshLocation, curTransform->scale.x);

  0169f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  016a6	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [rax+4]
  016ab	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curMesh
  016b2	8b 08		 mov	 ecx, DWORD PTR [rax]
  016b4	e8 00 00 00 00	 call	 ScaleMeshX
  016b9	90		 npad	 1

; 350  : 				}

  016ba	eb 27		 jmp	 SHORT $LN72@UpdateEnti
$LN71@UpdateEnti:

; 351  : 				else {
; 352  : 					MoveScaleMeshX(curMesh->meshLocation, curTransform->position.x, curTransform->scale.x);

  016bc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  016c3	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  016c8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  016cf	f3 0f 10 48 0c	 movss	 xmm1, DWORD PTR [rax+12]
  016d4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curMesh
  016db	8b 08		 mov	 ecx, DWORD PTR [rax]
  016dd	e8 00 00 00 00	 call	 MoveScaleMeshX
  016e2	90		 npad	 1
$LN72@UpdateEnti:
$LN68@UpdateEnti:

; 353  : 				}
; 354  : 			}
; 355  : 			if (curTransform->updateVerticies.y) {

  016e3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  016ea	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  016ee	85 c0		 test	 eax, eax
  016f0	74 35		 je	 SHORT $LN73@UpdateEnti

; 356  : 				curTransform->updateVerticies.y = false;

  016f2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  016f9	c6 40 01 00	 mov	 BYTE PTR [rax+1], 0

; 357  : 				if (!scale.y) MoveMeshY(curMesh->meshLocation, curTransform->position.y);

  016fd	0f b6 05 01 00
	00 00		 movzx	 eax, BYTE PTR scale+1
  01704	85 c0		 test	 eax, eax
  01706	75 1d		 jne	 SHORT $LN74@UpdateEnti
  01708	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  0170f	f3 0f 10 48 10	 movss	 xmm1, DWORD PTR [rax+16]
  01714	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curMesh
  0171b	8b 08		 mov	 ecx, DWORD PTR [rax]
  0171d	e8 00 00 00 00	 call	 MoveMeshY
  01722	90		 npad	 1
  01723	eb 02		 jmp	 SHORT $LN75@UpdateEnti
$LN74@UpdateEnti:

; 358  : 				else goto changeScaleY;

  01725	eb 0f		 jmp	 SHORT $changeScaleY$218
$LN75@UpdateEnti:
$LN73@UpdateEnti:

; 359  : 			}
; 360  : 			if (scale.y) {

  01727	0f b6 05 01 00
	00 00		 movzx	 eax, BYTE PTR scale+1
  0172e	85 c0		 test	 eax, eax
  01730	0f 84 99 01 00
	00		 je	 $LN76@UpdateEnti
$changeScaleY$218:

; 362  : 				checkGridSclCoord(curNode->entity, y);

  01736	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curNode
  0173d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01740	b9 08 00 00 00	 mov	 ecx, 8
  01745	48 6b c9 01	 imul	 rcx, rcx, 1
  01749	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curNode
  01750	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  01753	41 b8 08 00 00
	00		 mov	 r8d, 8
  01759	4d 6b c0 00	 imul	 r8, r8, 0
  0175d	f3 0f 10 44 08
	30		 movss	 xmm0, DWORD PTR [rax+rcx+48]
  01763	f3 42 0f 5c 44
	02 30		 subss	 xmm0, DWORD PTR [rdx+r8+48]
  0176a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  01772	f3 0f 11 44 24
	2c		 movss	 DWORD PTR size$17[rsp], xmm0
  01778	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curNode
  0177f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01782	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  01786	74 1e		 je	 SHORT $LN77@UpdateEnti
  01788	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curNode
  0178f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01792	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01795	f3 0f 10 44 24
	2c		 movss	 xmm0, DWORD PTR size$17[rsp]
  0179b	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [rax+8]
  017a0	f3 0f 11 44 24
	2c		 movss	 DWORD PTR size$17[rsp], xmm0
$LN77@UpdateEnti:
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h

; 19   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  017a6	f3 0f 10 44 24
	2c		 movss	 xmm0, DWORD PTR size$17[rsp]
  017ac	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  017b3	72 0d		 jb	 SHORT $LN193@UpdateEnti
  017b5	c7 84 24 84 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv811[rsp], 1
  017c0	eb 0b		 jmp	 SHORT $LN194@UpdateEnti
$LN193@UpdateEnti:
  017c2	c7 84 24 84 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv811[rsp], 0
$LN194@UpdateEnti:
  017cd	f3 0f 2a 84 24
	84 02 00 00	 cvtsi2ss xmm0, DWORD PTR tv811[rsp]
  017d6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  017de	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  017e6	f3 0f 10 4c 24
	2c		 movss	 xmm1, DWORD PTR size$17[rsp]
  017ec	f3 0f 59 c8	 mulss	 xmm1, xmm0
  017f0	0f 28 c1	 movaps	 xmm0, xmm1
  017f3	f3 0f 11 44 24
	7c		 movss	 DWORD PTR $T25[rsp], xmm0
  017f9	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR cellSize+4
  01801	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  01808	72 0d		 jb	 SHORT $LN197@UpdateEnti
  0180a	c7 84 24 88 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv825[rsp], 1
  01815	eb 0b		 jmp	 SHORT $LN198@UpdateEnti
$LN197@UpdateEnti:
  01817	c7 84 24 88 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv825[rsp], 0
$LN198@UpdateEnti:
  01822	f3 0f 2a 84 24
	88 02 00 00	 cvtsi2ss xmm0, DWORD PTR tv825[rsp]
  0182b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  01833	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0183b	f3 0f 10 0d 04
	00 00 00	 movss	 xmm1, DWORD PTR cellSize+4
  01843	f3 0f 59 c8	 mulss	 xmm1, xmm0
  01847	0f 28 c1	 movaps	 xmm0, xmm1
  0184a	f3 0f 11 84 24
	80 00 00 00	 movss	 DWORD PTR $T26[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c

; 362  : 				checkGridSclCoord(curNode->entity, y);

  01853	f3 0f 10 44 24
	7c		 movss	 xmm0, DWORD PTR $T25[rsp]
  01859	f3 0f 10 8c 24
	80 00 00 00	 movss	 xmm1, DWORD PTR $T26[rsp]
  01862	0f 2f c1	 comiss	 xmm0, xmm1
  01865	76 0e		 jbe	 SHORT $LN78@UpdateEnti
  01867	f3 0f 10 44 24
	2c		 movss	 xmm0, DWORD PTR size$17[rsp]
  0186d	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR cellSize+4, xmm0
$LN78@UpdateEnti:

; 363  : 				curTransform->matchesScale.y = true;

  01875	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  0187c	c6 40 03 01	 mov	 BYTE PTR [rax+3], 1

; 364  : 				if (posIsZeroVec) ScaleMeshY(curMesh->meshLocation, curTransform->scale.y);

  01880	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR posIsZeroVec
  01887	85 c0		 test	 eax, eax
  01889	74 1d		 je	 SHORT $LN79@UpdateEnti
  0188b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  01892	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [rax+8]
  01897	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curMesh
  0189e	8b 08		 mov	 ecx, DWORD PTR [rax]
  018a0	e8 00 00 00 00	 call	 ScaleMeshY
  018a5	90		 npad	 1
  018a6	eb 27		 jmp	 SHORT $LN80@UpdateEnti
$LN79@UpdateEnti:

; 365  : 				else MoveScaleMeshY(curMesh->meshLocation, curTransform->position.y, curTransform->scale.y);

  018a8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  018af	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [rax+8]
  018b4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  018bb	f3 0f 10 48 10	 movss	 xmm1, DWORD PTR [rax+16]
  018c0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curMesh
  018c7	8b 08		 mov	 ecx, DWORD PTR [rax]
  018c9	e8 00 00 00 00	 call	 MoveScaleMeshY
  018ce	90		 npad	 1
$LN80@UpdateEnti:
$LN76@UpdateEnti:
$LN59@UpdateEnti:

; 366  : 			}
; 367  : 		}
; 368  : 		if (curAnimator) {

  018cf	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR curAnimator, 0
  018d7	0f 84 39 02 00
	00		 je	 $LN81@UpdateEnti

; 369  : 			if (curAnimator->animET >= ANIM_UPDATE_TIME / curAnimator->animSpeed) {

  018dd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAnimator
  018e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3daaaaab
  018ec	f3 0f 5e 40 30	 divss	 xmm0, DWORD PTR [rax+48]
  018f1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAnimator
  018f8	f3 0f 10 48 24	 movss	 xmm1, DWORD PTR [rax+36]
  018fd	0f 2f c8	 comiss	 xmm1, xmm0
  01900	0f 82 0b 01 00
	00		 jb	 $LN82@UpdateEnti

; 370  : 				if (curAnimator->active) {

  01906	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAnimator
  0190d	0f b6 40 2c	 movzx	 eax, BYTE PTR [rax+44]
  01911	85 c0		 test	 eax, eax
  01913	0f 84 f6 00 00
	00		 je	 $LN84@UpdateEnti

; 371  : 					curAnimator->animET = .0f;

  01919	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAnimator
  01920	0f 57 c0	 xorps	 xmm0, xmm0
  01923	f3 0f 11 40 24	 movss	 DWORD PTR [rax+36], xmm0

; 372  : 					curAnimator->curAnimFrame = (ushort)((ushort)(curAnimator->curAnimFrame + 1) % curAnimator->animFrameNo[curAnimator->animating]);

  01928	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAnimator
  0192f	0f b7 40 0a	 movzx	 eax, WORD PTR [rax+10]
  01933	ff c0		 inc	 eax
  01935	0f b7 c0	 movzx	 eax, ax
  01938	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curAnimator
  0193f	0f b7 49 08	 movzx	 ecx, WORD PTR [rcx+8]
  01943	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curAnimator
  0194a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0194d	0f b7 0c 4a	 movzx	 ecx, WORD PTR [rdx+rcx*2]
  01951	99		 cdq
  01952	f7 f9		 idiv	 ecx
  01954	8b c2		 mov	 eax, edx
  01956	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curAnimator
  0195d	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax

; 373  : 					glActiveTexture(curAnimator->textureID);

  01961	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAnimator
  01968	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0196b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewActiveTexture
  01972	ff 10		 call	 QWORD PTR [rax]

; 374  : #define BindTex(tex) glBindTexture(GL_TEXTURE_2D, tex);
; 375  : 					curAnimInd = curAnimator->animating;

  01974	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAnimator
  0197b	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  0197f	89 05 00 00 00
	00		 mov	 DWORD PTR curAnimInd, eax

; 376  : 					if (curAnimator->bUseTexCoordAnim) {

  01985	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAnimator
  0198c	0f b6 40 20	 movzx	 eax, BYTE PTR [rax+32]
  01990	85 c0		 test	 eax, eax
  01992	74 4b		 je	 SHORT $LN85@UpdateEnti

; 377  : 						ChangeTexCoordTo(curMesh, GetCurInd(texCoordPts));

  01994	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curAnimInd
  0199b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curAnimator
  019a2	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  019a6	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curAnimator
  019ad	0f b7 52 0a	 movzx	 edx, WORD PTR [rdx+10]
  019b1	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  019b5	48 8b 14 d0	 mov	 rdx, QWORD PTR [rax+rdx*8]
  019b9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curMesh
  019c0	e8 00 00 00 00	 call	 ChangeTexCoordTo

; 378  : 						BindTex(curAnimator->frameTexture);

  019c5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAnimator
  019cc	8b 50 18	 mov	 edx, DWORD PTR [rax+24]
  019cf	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  019d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glBindTexture
  019da	90		 npad	 1

; 379  : 						goto useTexCoordAnim;

  019db	eb 78		 jmp	 SHORT $useTexCoordAnim$219

; 380  : 					}

  019dd	eb 30		 jmp	 SHORT $LN86@UpdateEnti
$LN85@UpdateEnti:

; 381  : 					else {
; 382  : 						BindTex(GetCurInd(frameTextures));

  019df	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curAnimInd
  019e6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curAnimator
  019ed	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  019f1	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR curAnimator
  019f8	0f b7 52 0a	 movzx	 edx, WORD PTR [rdx+10]
  019fc	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  01a00	8b 14 90	 mov	 edx, DWORD PTR [rax+rdx*4]
  01a03	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  01a08	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glBindTexture
  01a0e	90		 npad	 1
$LN86@UpdateEnti:
$LN84@UpdateEnti:

; 383  : 					}
; 384  : 				}
; 385  : 			}

  01a0f	eb 20		 jmp	 SHORT $LN83@UpdateEnti
$LN82@UpdateEnti:

; 386  : 			else curAnimator->animET += deltaT;

  01a11	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAnimator
  01a18	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [rax+36]
  01a1d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR deltaT
  01a25	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAnimator
  01a2c	f3 0f 11 40 24	 movss	 DWORD PTR [rax+36], xmm0
$LN83@UpdateEnti:

; 387  : 			if (curAnimator->bUseTexCoordAnim) {

  01a31	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAnimator
  01a38	0f b6 40 20	 movzx	 eax, BYTE PTR [rax+32]
  01a3c	85 c0		 test	 eax, eax
  01a3e	0f 84 d2 00 00
	00		 je	 $LN87@UpdateEnti

; 388  : 				curAnimInd = curAnimator->animating;

  01a44	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAnimator
  01a4b	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  01a4f	89 05 00 00 00
	00		 mov	 DWORD PTR curAnimInd, eax
$useTexCoordAnim$219:

; 389  : 			useTexCoordAnim:
; 390  : 				if (curAnimator->curAnimFrame >= 0 && curAnimator->animScales) {

  01a55	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAnimator
  01a5c	0f b7 40 0a	 movzx	 eax, WORD PTR [rax+10]
  01a60	85 c0		 test	 eax, eax
  01a62	0f 8c ae 00 00
	00		 jl	 $LN88@UpdateEnti
  01a68	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curAnimator
  01a6f	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  01a74	0f 84 9c 00 00
	00		 je	 $LN88@UpdateEnti

; 391  : 					MoveScaleMesh(curMesh->meshLocation, curTransform->position, VectorMult(curAnimator->animScales[curAnimInd], curTransform->scale));

  01a7a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  01a81	48 8b 40 04	 mov	 rax, QWORD PTR [rax+4]
  01a85	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR b$[rsp], rax
  01a8d	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR curAnimInd
  01a94	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curAnimator
  01a9b	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  01a9f	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  01aa3	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR a$[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h

; 107  : 	_this.x = a.x * b.x;

  01aab	f3 0f 10 84 24
	98 00 00 00	 movss	 xmm0, DWORD PTR a$[rsp]
  01ab4	f3 0f 59 84 24
	b8 00 00 00	 mulss	 xmm0, DWORD PTR b$[rsp]
  01abd	f3 0f 11 84 24
	d8 00 00 00	 movss	 DWORD PTR _this$28[rsp], xmm0

; 108  : 	_this.y = a.y * b.y;

  01ac6	f3 0f 10 84 24
	9c 00 00 00	 movss	 xmm0, DWORD PTR a$[rsp+4]
  01acf	f3 0f 59 84 24
	bc 00 00 00	 mulss	 xmm0, DWORD PTR b$[rsp+4]
  01ad8	f3 0f 11 84 24
	dc 00 00 00	 movss	 DWORD PTR _this$28[rsp+4], xmm0

; 109  : 	return _this;

  01ae1	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR _this$28[rsp]
  01ae9	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR $T27[rsp], rax
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c

; 391  : 					MoveScaleMesh(curMesh->meshLocation, curTransform->position, VectorMult(curAnimator->animScales[curAnimInd], curTransform->scale));

  01af1	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR $T27[rsp]
  01af9	4c 8b c0	 mov	 r8, rax
  01afc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  01b03	48 8b 50 0c	 mov	 rdx, QWORD PTR [rax+12]
  01b07	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curMesh
  01b0e	8b 08		 mov	 ecx, DWORD PTR [rax]
  01b10	e8 00 00 00 00	 call	 MoveScaleMesh
  01b15	90		 npad	 1
$LN88@UpdateEnti:
$LN87@UpdateEnti:
$LN81@UpdateEnti:

; 392  : 				}
; 393  : 			}
; 394  : 		}
; 395  : 		curTransform->pastPos = curTransform->position;

  01b16	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curTransform
  01b1d	48 8b 40 0c	 mov	 rax, QWORD PTR [rax+12]
  01b21	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curTransform
  01b28	48 89 41 14	 mov	 QWORD PTR [rcx+20], rax
$transformCont$216:

; 396  : 	transformCont:
; 397  : 		advance(curNode);

  01b2c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curNode
  01b33	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  01b37	48 89 05 00 00
	00 00		 mov	 QWORD PTR curNode, rax

; 398  : 	}

  01b3e	e9 57 f3 ff ff	 jmp	 $LL19@UpdateEnti
$LN20@UpdateEnti:

; 399  : }

  01b43	48 8b cc	 mov	 rcx, rsp
  01b46	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:UpdateEntities$rtcFrameData
  01b4d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  01b52	48 81 c4 90 02
	00 00		 add	 rsp, 656		; 00000290H
  01b59	5f		 pop	 rdi
  01b5a	c3		 ret	 0
  01b5b	90		 npad	 1
$LN209@UpdateEnti:
  01b5c	00 00 00 00	 DD	 $LN36@UpdateEnti
  01b60	00 00 00 00	 DD	 $LN38@UpdateEnti
  01b64	00 00 00 00	 DD	 $LN41@UpdateEnti
  01b68	00 00 00 00	 DD	 $LN43@UpdateEnti
  01b6c	00 00 00 00	 DD	 $LN46@UpdateEnti
  01b70	00 00 00 00	 DD	 $LN48@UpdateEnti
  01b74	00 00 00 00	 DD	 $LN51@UpdateEnti
  01b78	00 00 00 00	 DD	 $LN53@UpdateEnti
UpdateEntities ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
t$ = 48
orig$ = 56
tv95 = 64
UpdateSliders PROC

; 415  : void UpdateSliders(void) {

$LN15:
  00000	40 57		 push	 rdi
  00002	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  0000d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 416  : 	curSliderNode = sliderHead;

  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR sliderHead
  00019	48 89 05 00 00
	00 00		 mov	 QWORD PTR curSliderNode, rax
$LN2@UpdateSlid:

; 417  : 	while (curSliderNode) {

  00020	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR curSliderNode, 0
  00028	0f 84 a7 01 00
	00		 je	 $LN3@UpdateSlid

; 418  : 		curSlider = curSliderNode->value;

  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curSliderNode
  00035	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00038	48 89 05 00 00
	00 00		 mov	 QWORD PTR curSlider, rax

; 419  : 		curSquishMesh = curSlider->mesh;

  0003f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curSlider
  00046	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00049	48 89 05 00 00
	00 00		 mov	 QWORD PTR curSquishMesh, rax

; 420  : 		//printf("%s, %f, %f\n", BoolToStr(curSquishMesh->bSquish), curSquishMesh->squishAmt, curSlider->pseudoValue);
; 421  : 		if (!curSquishMesh->bSquish) goto cont;

  00050	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curSquishMesh
  00057	0f b6 40 14	 movzx	 eax, BYTE PTR [rax+20]
  0005b	85 c0		 test	 eax, eax
  0005d	75 05		 jne	 SHORT $LN4@UpdateSlid
  0005f	e9 5a 01 00 00	 jmp	 $cont$16
$LN4@UpdateSlid:

; 422  : 		if (FAbs(curSquishMesh->squishAmt - curSlider->pseudoValue) <= curSlider->pseudoDist) {

  00064	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curSquishMesh
  0006b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curSlider
  00072	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  00077	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [rcx+8]
  0007c	f3 0f 11 44 24
	38		 movss	 DWORD PTR orig$[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h

; 19   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  00082	f3 0f 10 44 24
	38		 movss	 xmm0, DWORD PTR orig$[rsp]
  00088	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0008f	72 0a		 jb	 SHORT $LN9@UpdateSlid
  00091	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv95[rsp], 1
  00099	eb 08		 jmp	 SHORT $LN10@UpdateSlid
$LN9@UpdateSlid:
  0009b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv95[rsp], 0
$LN10@UpdateSlid:
  000a3	f3 0f 2a 44 24
	40		 cvtsi2ss xmm0, DWORD PTR tv95[rsp]
  000a9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  000b1	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000b9	f3 0f 10 4c 24
	38		 movss	 xmm1, DWORD PTR orig$[rsp]
  000bf	f3 0f 59 c8	 mulss	 xmm1, xmm0
  000c3	0f 28 c1	 movaps	 xmm0, xmm1
  000c6	f3 0f 11 44 24
	20		 movss	 DWORD PTR $T1[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c

; 422  : 		if (FAbs(curSquishMesh->squishAmt - curSlider->pseudoValue) <= curSlider->pseudoDist) {

  000cc	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR $T1[rsp]
  000d2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curSlider
  000d9	f3 0f 10 48 10	 movss	 xmm1, DWORD PTR [rax+16]
  000de	0f 2f c8	 comiss	 xmm1, xmm0
  000e1	72 24		 jb	 SHORT $LN5@UpdateSlid

; 423  : 			curSquishMesh->bSquish = false;

  000e3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curSquishMesh
  000ea	c6 40 14 00	 mov	 BYTE PTR [rax+20], 0

; 424  : 			SquishMeshX2(curSquishMesh, curSlider->pseudoValue);

  000ee	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curSlider
  000f5	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [rax+8]
  000fa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curSquishMesh
  00101	e8 00 00 00 00	 call	 SquishMeshX2
  00106	90		 npad	 1
$LN5@UpdateSlid:
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h

; 343  : 	QueryPerformanceCounter(&cTime);

  00107	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cTime
  0010e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 344  : 	return (float)((cTime.QuadPart - pTime.QuadPart) * 1000000 / frequency) / 1000000.0f * timeScale;

  00114	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR pTime
  0011b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR cTime
  00122	48 2b c8	 sub	 rcx, rax
  00125	48 8b c1	 mov	 rax, rcx
  00128	48 69 c0 40 42
	0f 00		 imul	 rax, rax, 1000000	; 000f4240H
  0012f	48 99		 cdq
  00131	48 f7 3d 00 00
	00 00		 idiv	 QWORD PTR frequency
  00138	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  0013d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@49742400
  00145	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR timeScale
  0014d	f3 0f 11 44 24
	24		 movss	 DWORD PTR $T2[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c

; 426  : 		SquishMeshX2(curSquishMesh, Lerp(curSquishMesh->squishAmt, curSlider->pseudoValue, deltaTime() * curSlider->decreaseSpd));

  00153	f3 0f 10 44 24
	24		 movss	 xmm0, DWORD PTR $T2[rsp]
  00159	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curSlider
  00160	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [rax+12]
  00165	f3 0f 11 44 24
	30		 movss	 DWORD PTR t$[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\math.h

; 57   : 	return a * (1.0f - t) + b * t;

  0016b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00173	f3 0f 5c 44 24
	30		 subss	 xmm0, DWORD PTR t$[rsp]
  00179	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curSquishMesh
  00180	f3 0f 10 48 10	 movss	 xmm1, DWORD PTR [rax+16]
  00185	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00189	0f 28 c1	 movaps	 xmm0, xmm1
  0018c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curSlider
  00193	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [rax+8]
  00198	f3 0f 59 4c 24
	30		 mulss	 xmm1, DWORD PTR t$[rsp]
  0019e	f3 0f 58 c1	 addss	 xmm0, xmm1
  001a2	f3 0f 11 44 24
	28		 movss	 DWORD PTR $T3[rsp], xmm0
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c

; 426  : 		SquishMeshX2(curSquishMesh, Lerp(curSquishMesh->squishAmt, curSlider->pseudoValue, deltaTime() * curSlider->decreaseSpd));

  001a8	f3 0f 10 44 24
	28		 movss	 xmm0, DWORD PTR $T3[rsp]
  001ae	0f 28 c8	 movaps	 xmm1, xmm0
  001b1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curSquishMesh
  001b8	e8 00 00 00 00	 call	 SquishMeshX2
  001bd	90		 npad	 1
$cont$16:

; 427  : 	cont:
; 428  : 		advance(curSliderNode);

  001be	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curSliderNode
  001c5	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001c9	48 89 05 00 00
	00 00		 mov	 QWORD PTR curSliderNode, rax

; 429  : 	}

  001d0	e9 4b fe ff ff	 jmp	 $LN2@UpdateSlid
$LN3@UpdateSlid:

; 430  : }

  001d5	48 83 c4 50	 add	 rsp, 80			; 00000050H
  001d9	5f		 pop	 rdi
  001da	c3		 ret	 0
UpdateSliders ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
_TEXT	SEGMENT
EntityInitialize PROC

; 146  : void EntityInitialize() {//this only needs to be called any time before the first main update

$LN3:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  0000d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 147  : 	mainColHead = NULL;

  00012	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR mainColHead, 0

; 148  : #if PROGRAM_IS_MULTITHREADED
; 149  : 	uint i;
; 150  : 	workCallBack = CheckCell;
; 151  : 	hMutex = CreateMutex(NULL, FALSE, NULL);
; 152  : 	collisionMutex = CreateMutex(NULL, FALSE, NULL);
; 153  : 	for (i = 0; i < lengthOf(cellDatas); i++) cellDatas[i] = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(cellData));
; 154  : 	InitializeThreadpoolEnvironment(&callbackEnviron);
; 155  : 	pool = CreateThreadpool(NULL);
; 156  : 	SetThreadpoolThreadMinimum(pool, 0);
; 157  : 	SetThreadpoolThreadMaximum(pool, NUM_THREADS);
; 158  : 	cleanupGroup = CreateThreadpoolCleanupGroup();
; 159  : 	SetThreadpoolCallbackPool(&callbackEnviron, pool);
; 160  : 	SetThreadpoolCallbackCleanupGroup(&callbackEnviron, cleanupGroup, NULL);
; 161  : #endif
; 162  : }

  0001d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00021	5f		 pop	 rdi
  00022	c3		 ret	 0
EntityInitialize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
_TEXT	SEGMENT
previous$ = 32
next$ = 40
node$ = 64
head$ = 72
RemoveEntityNode PROC

; 54   : void RemoveEntityNode(entityNode* node, entityNode** head) {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 	Remove(node, head, entityNode);

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR node$[rsp]
  00020	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00024	48 89 44 24 20	 mov	 QWORD PTR previous$[rsp], rax
  00029	48 8b 44 24 40	 mov	 rax, QWORD PTR node$[rsp]
  0002e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00032	48 89 44 24 28	 mov	 QWORD PTR next$[rsp], rax
  00037	48 83 7c 24 28
	00		 cmp	 QWORD PTR next$[rsp], 0
  0003d	74 0e		 je	 SHORT $LN2@RemoveEnti
  0003f	48 8b 44 24 28	 mov	 rax, QWORD PTR next$[rsp]
  00044	48 8b 4c 24 20	 mov	 rcx, QWORD PTR previous$[rsp]
  00049	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN2@RemoveEnti:
  0004d	48 83 7c 24 20
	00		 cmp	 QWORD PTR previous$[rsp], 0
  00053	74 10		 je	 SHORT $LN3@RemoveEnti
  00055	48 8b 44 24 20	 mov	 rax, QWORD PTR previous$[rsp]
  0005a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR next$[rsp]
  0005f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00063	eb 0d		 jmp	 SHORT $ret$6
$LN3@RemoveEnti:
  00065	48 8b 44 24 48	 mov	 rax, QWORD PTR head$[rsp]
  0006a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR next$[rsp]
  0006f	48 89 08	 mov	 QWORD PTR [rax], rcx
$ret$6:
  00072	48 8b 44 24 40	 mov	 rax, QWORD PTR node$[rsp]
  00077	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0
  0007f	48 8b 44 24 40	 mov	 rax, QWORD PTR node$[rsp]
  00084	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 56   : }

  0008c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00090	5f		 pop	 rdi
  00091	c3		 ret	 0
RemoveEntityNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
_TEXT	SEGMENT
previous$ = 32
next$ = 40
toRemove$ = 64
head$ = 72
RemoveEntity PROC

; 57   : void RemoveEntity(Entity* toRemove, Entity** head) {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 58   : 	Entity* previous = toRemove->prev, * next = toRemove->next;

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR toRemove$[rsp]
  00020	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00024	48 89 44 24 20	 mov	 QWORD PTR previous$[rsp], rax
  00029	48 8b 44 24 40	 mov	 rax, QWORD PTR toRemove$[rsp]
  0002e	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00032	48 89 44 24 28	 mov	 QWORD PTR next$[rsp], rax

; 59   : 	if (next) next->prev = previous;

  00037	48 83 7c 24 28
	00		 cmp	 QWORD PTR next$[rsp], 0
  0003d	74 0e		 je	 SHORT $LN2@RemoveEnti
  0003f	48 8b 44 24 28	 mov	 rax, QWORD PTR next$[rsp]
  00044	48 8b 4c 24 20	 mov	 rcx, QWORD PTR previous$[rsp]
  00049	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx
$LN2@RemoveEnti:

; 60   : 	if (previous)

  0004d	48 83 7c 24 20
	00		 cmp	 QWORD PTR previous$[rsp], 0
  00053	74 10		 je	 SHORT $LN3@RemoveEnti

; 61   : 	{
; 62   : 		previous->next = next;

  00055	48 8b 44 24 20	 mov	 rax, QWORD PTR previous$[rsp]
  0005a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR next$[rsp]
  0005f	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 63   : 		goto ret;

  00063	eb 0d		 jmp	 SHORT $ret$6
$LN3@RemoveEnti:

; 64   : 	}
; 65   : 	*head = next;

  00065	48 8b 44 24 48	 mov	 rax, QWORD PTR head$[rsp]
  0006a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR next$[rsp]
  0006f	48 89 08	 mov	 QWORD PTR [rax], rcx
$ret$6:

; 66   : ret:
; 67   : 	toRemove->next = toRemove->prev = NULL;

  00072	48 8b 44 24 40	 mov	 rax, QWORD PTR toRemove$[rsp]
  00077	48 c7 40 58 00
	00 00 00	 mov	 QWORD PTR [rax+88], 0
  0007f	48 8b 44 24 40	 mov	 rax, QWORD PTR toRemove$[rsp]
  00084	48 c7 40 50 00
	00 00 00	 mov	 QWORD PTR [rax+80], 0

; 68   : }

  0008c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00090	5f		 pop	 rdi
  00091	c3		 ret	 0
RemoveEntity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
;	COMDAT GetVectorMidPoint2
_TEXT	SEGMENT
$T8 = 32
$T9 = 40
vector$ = 56
_this$10 = 88
lhs$ = 120
rhs$ = 152
_this$11 = 184
a$ = 224
b$ = 232
GetVectorMidPoint2 PROC					; COMDAT

; 64   : inline Vector2 GetVectorMidPoint2(Vector2 a, Vector2 b) {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  00012	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00017	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+224]
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7570C268_vectors@h
  00032	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 65   : 	return VectorByScalar(AddVectors(a, b), .5f);

  00037	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  0003f	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR rhs$[rsp], rax
  00047	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  0004f	48 89 44 24 78	 mov	 QWORD PTR lhs$[rsp], rax

; 35   : 	_this.x = lhs.x + rhs.x;

  00054	f3 0f 10 44 24
	78		 movss	 xmm0, DWORD PTR lhs$[rsp]
  0005a	f3 0f 58 84 24
	98 00 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp]
  00063	f3 0f 11 84 24
	b8 00 00 00	 movss	 DWORD PTR _this$11[rsp], xmm0

; 36   : 	_this.y = lhs.y + rhs.y;

  0006c	f3 0f 10 44 24
	7c		 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  00072	f3 0f 58 84 24
	9c 00 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp+4]
  0007b	f3 0f 11 84 24
	bc 00 00 00	 movss	 DWORD PTR _this$11[rsp+4], xmm0

; 37   : 	return _this;

  00084	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR _this$11[rsp]
  0008c	48 89 44 24 20	 mov	 QWORD PTR $T8[rsp], rax

; 65   : 	return VectorByScalar(AddVectors(a, b), .5f);

  00091	48 8b 44 24 20	 mov	 rax, QWORD PTR $T8[rsp]
  00096	48 89 44 24 38	 mov	 QWORD PTR vector$[rsp], rax

; 61   : 	Vector2 _this = { vector.x * scalar, vector.y * scalar };

  0009b	f3 0f 10 44 24
	38		 movss	 xmm0, DWORD PTR vector$[rsp]
  000a1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  000a9	f3 0f 11 44 24
	58		 movss	 DWORD PTR _this$10[rsp], xmm0
  000af	f3 0f 10 44 24
	3c		 movss	 xmm0, DWORD PTR vector$[rsp+4]
  000b5	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  000bd	f3 0f 11 44 24
	5c		 movss	 DWORD PTR _this$10[rsp+4], xmm0

; 62   : 	return _this;

  000c3	48 8b 44 24 58	 mov	 rax, QWORD PTR _this$10[rsp]
  000c8	48 89 44 24 28	 mov	 QWORD PTR $T9[rsp], rax

; 65   : 	return VectorByScalar(AddVectors(a, b), .5f);

  000cd	48 8b 44 24 28	 mov	 rax, QWORD PTR $T9[rsp]

; 66   : }

  000d2	48 8b f8	 mov	 rdi, rax
  000d5	48 8b cc	 mov	 rcx, rsp
  000d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:GetVectorMidPoint2$rtcFrameData
  000df	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000e4	48 8b c7	 mov	 rax, rdi
  000e7	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  000ee	5f		 pop	 rdi
  000ef	c3		 ret	 0
GetVectorMidPoint2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\vectors.h
;	COMDAT GetVectorMidPoint
_TEXT	SEGMENT
$T8 = 32
$T9 = 40
$T10 = 48
vector$ = 72
_this$11 = 104
lhs$ = 136
rhs$ = 168
_this$12 = 200
vecs$ = 240
GetVectorMidPoint PROC					; COMDAT

; 67   : inline Vector2 GetVectorMidPoint(Vector2 vecs[2]) {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  0000d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+240]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7570C268_vectors@h
  0002d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 68   : 	return GetVectorMidPoint2(vecs[0], vecs[1]);

  00032	b8 08 00 00 00	 mov	 eax, 8
  00037	48 6b c0 01	 imul	 rax, rax, 1

; 65   : 	return VectorByScalar(AddVectors(a, b), .5f);

  0003b	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR vecs$[rsp]
  00043	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00047	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR rhs$[rsp], rax

; 68   : 	return GetVectorMidPoint2(vecs[0], vecs[1]);

  0004f	b8 08 00 00 00	 mov	 eax, 8
  00054	48 6b c0 00	 imul	 rax, rax, 0

; 65   : 	return VectorByScalar(AddVectors(a, b), .5f);

  00058	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR vecs$[rsp]
  00060	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00064	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR lhs$[rsp], rax

; 35   : 	_this.x = lhs.x + rhs.x;

  0006c	f3 0f 10 84 24
	88 00 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp]
  00075	f3 0f 58 84 24
	a8 00 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp]
  0007e	f3 0f 11 84 24
	c8 00 00 00	 movss	 DWORD PTR _this$12[rsp], xmm0

; 36   : 	_this.y = lhs.y + rhs.y;

  00087	f3 0f 10 84 24
	8c 00 00 00	 movss	 xmm0, DWORD PTR lhs$[rsp+4]
  00090	f3 0f 58 84 24
	ac 00 00 00	 addss	 xmm0, DWORD PTR rhs$[rsp+4]
  00099	f3 0f 11 84 24
	cc 00 00 00	 movss	 DWORD PTR _this$12[rsp+4], xmm0

; 37   : 	return _this;

  000a2	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR _this$12[rsp]
  000aa	48 89 44 24 20	 mov	 QWORD PTR $T8[rsp], rax

; 65   : 	return VectorByScalar(AddVectors(a, b), .5f);

  000af	48 8b 44 24 20	 mov	 rax, QWORD PTR $T8[rsp]
  000b4	48 89 44 24 48	 mov	 QWORD PTR vector$[rsp], rax

; 61   : 	Vector2 _this = { vector.x * scalar, vector.y * scalar };

  000b9	f3 0f 10 44 24
	48		 movss	 xmm0, DWORD PTR vector$[rsp]
  000bf	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  000c7	f3 0f 11 44 24
	68		 movss	 DWORD PTR _this$11[rsp], xmm0
  000cd	f3 0f 10 44 24
	4c		 movss	 xmm0, DWORD PTR vector$[rsp+4]
  000d3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  000db	f3 0f 11 44 24
	6c		 movss	 DWORD PTR _this$11[rsp+4], xmm0

; 62   : 	return _this;

  000e1	48 8b 44 24 68	 mov	 rax, QWORD PTR _this$11[rsp]
  000e6	48 89 44 24 28	 mov	 QWORD PTR $T9[rsp], rax

; 65   : 	return VectorByScalar(AddVectors(a, b), .5f);

  000eb	48 8b 44 24 28	 mov	 rax, QWORD PTR $T9[rsp]
  000f0	48 89 44 24 30	 mov	 QWORD PTR $T10[rsp], rax

; 68   : 	return GetVectorMidPoint2(vecs[0], vecs[1]);

  000f5	48 8b 44 24 30	 mov	 rax, QWORD PTR $T10[rsp]

; 69   : }

  000fa	48 8b f8	 mov	 rdi, rax
  000fd	48 8b cc	 mov	 rcx, rsp
  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:GetVectorMidPoint$rtcFrameData
  00107	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0010c	48 8b c7	 mov	 rax, rdi
  0010f	48 81 c4 e0 00
	00 00		 add	 rsp, 224		; 000000e0H
  00116	5f		 pop	 rdi
  00117	c3		 ret	 0
GetVectorMidPoint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\main.h
;	COMDAT limitedDeltaTime2
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
$T3 = 56
tv68 = 60
tv75 = 64
limitMultiplier$ = 96
limitedDeltaTime2 PROC					; COMDAT

; 350  : inline float limitedDeltaTime2(float limitMultiplier) {

$LN13:
  00000	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  00006	57		 push	 rdi
  00007	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD0D2CA2_main@h
  00012	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 343  : 	QueryPerformanceCounter(&cTime);

  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cTime
  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 344  : 	return (float)((cTime.QuadPart - pTime.QuadPart) * 1000000 / frequency) / 1000000.0f * timeScale;

  00024	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR pTime
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR cTime
  00032	48 2b c8	 sub	 rcx, rax
  00035	48 8b c1	 mov	 rax, rcx
  00038	48 69 c0 40 42
	0f 00		 imul	 rax, rax, 1000000	; 000f4240H
  0003f	48 99		 cdq
  00041	48 f7 3d 00 00
	00 00		 idiv	 QWORD PTR frequency
  00048	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  0004d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@49742400
  00055	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR timeScale
  0005d	f3 0f 11 44 24
	30		 movss	 DWORD PTR $T1[rsp], xmm0

; 351  : 	return Min(deltaTime(), frameTime * limitMultiplier);

  00063	f3 0f 10 44 24
	30		 movss	 xmm0, DWORD PTR $T1[rsp]
  00069	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR frameTime
  00071	f3 0f 59 4c 24
	60		 mulss	 xmm1, DWORD PTR limitMultiplier$[rsp]
  00077	0f 2f c8	 comiss	 xmm1, xmm0
  0007a	76 0a		 jbe	 SHORT $LN3@limitedDel
  0007c	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  00084	eb 08		 jmp	 SHORT $LN4@limitedDel
$LN3@limitedDel:
  00086	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN4@limitedDel:

; 343  : 	QueryPerformanceCounter(&cTime);

  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cTime
  00095	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 344  : 	return (float)((cTime.QuadPart - pTime.QuadPart) * 1000000 / frequency) / 1000000.0f * timeScale;

  0009b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR pTime
  000a2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR cTime
  000a9	48 2b c8	 sub	 rcx, rax
  000ac	48 8b c1	 mov	 rax, rcx
  000af	48 69 c0 40 42
	0f 00		 imul	 rax, rax, 1000000	; 000f4240H
  000b6	48 99		 cdq
  000b8	48 f7 3d 00 00
	00 00		 idiv	 QWORD PTR frequency
  000bf	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  000c4	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@49742400
  000cc	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR timeScale
  000d4	f3 0f 11 44 24
	34		 movss	 DWORD PTR $T2[rsp], xmm0

; 351  : 	return Min(deltaTime(), frameTime * limitMultiplier);

  000da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR frameTime
  000e2	f3 0f 59 44 24
	60		 mulss	 xmm0, DWORD PTR limitMultiplier$[rsp]
  000e8	f3 0f 10 4c 24
	34		 movss	 xmm1, DWORD PTR $T2[rsp]
  000ee	0f 2f c8	 comiss	 xmm1, xmm0
  000f1	76 0a		 jbe	 SHORT $LN5@limitedDel
  000f3	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  000fb	eb 08		 jmp	 SHORT $LN6@limitedDel
$LN5@limitedDel:
  000fd	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN6@limitedDel:

; 343  : 	QueryPerformanceCounter(&cTime);

  00105	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cTime
  0010c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 344  : 	return (float)((cTime.QuadPart - pTime.QuadPart) * 1000000 / frequency) / 1000000.0f * timeScale;

  00112	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR pTime
  00119	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR cTime
  00120	48 2b c8	 sub	 rcx, rax
  00123	48 8b c1	 mov	 rax, rcx
  00126	48 69 c0 40 42
	0f 00		 imul	 rax, rax, 1000000	; 000f4240H
  0012d	48 99		 cdq
  0012f	48 f7 3d 00 00
	00 00		 idiv	 QWORD PTR frequency
  00136	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  0013b	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@49742400
  00143	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR timeScale
  0014b	f3 0f 11 44 24
	38		 movss	 DWORD PTR $T3[rsp], xmm0

; 351  : 	return Min(deltaTime(), frameTime * limitMultiplier);

  00151	f3 0f 10 44 24
	38		 movss	 xmm0, DWORD PTR $T3[rsp]
  00157	f3 0f 2a 4c 24
	3c		 cvtsi2ss xmm1, DWORD PTR tv68[rsp]
  0015d	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00161	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR frameTime
  00169	f3 0f 59 4c 24
	60		 mulss	 xmm1, DWORD PTR limitMultiplier$[rsp]
  0016f	f3 0f 2a 54 24
	40		 cvtsi2ss xmm2, DWORD PTR tv75[rsp]
  00175	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00179	f3 0f 58 c1	 addss	 xmm0, xmm1

; 352  : }

  0017d	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00181	5f		 pop	 rdi
  00182	c3		 ret	 0
limitedDeltaTime2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.h
;	COMDAT ResetVertexUpdate
_TEXT	SEGMENT
transform$ = 48
ResetVertexUpdate PROC					; COMDAT

; 198  : inline void ResetVertexUpdate(Transform* transform) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1408441D_Mesh@h
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 199  : 	resetPos(transform);

  00016	48 8b 44 24 30	 mov	 rax, QWORD PTR transform$[rsp]
  0001b	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR zeroBVector
  00022	66 89 08	 mov	 WORD PTR [rax], cx

; 200  : }

  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
ResetVertexUpdate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\Mesh.h
;	COMDAT ResetScaleUpdate
_TEXT	SEGMENT
transform$ = 48
ResetScaleUpdate PROC					; COMDAT

; 201  : inline void ResetScaleUpdate(Transform* transform) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1408441D_Mesh@h
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 202  : 	resetScale(transform);

  00016	48 8b 44 24 30	 mov	 rax, QWORD PTR transform$[rsp]
  0001b	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR oneBVector
  00022	66 89 48 02	 mov	 WORD PTR [rax+2], cx

; 203  : }

  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5f		 pop	 rdi
  0002b	c3		 ret	 0
ResetScaleUpdate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.h
;	COMDAT RemoveEntAppropriate2
_TEXT	SEGMENT
tv75 = 32
entity$ = 64
position$ = 72
RemoveEntAppropriate2 PROC				; COMDAT

; 171  : inline void RemoveEntAppropriate2(Entity* entity, int position) {

$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7CA6EAD6_EntityManager@h
  00015	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 172  : 	if (position == -1) return;

  0001a	83 7c 24 48 ff	 cmp	 DWORD PTR position$[rsp], -1
  0001f	75 02		 jne	 SHORT $LN2@RemoveEntA
  00021	eb 5b		 jmp	 SHORT $LN1@RemoveEntA
$LN2@RemoveEntA:

; 173  : 	RemoveEntity(entity, (entity->pastCellPosition.x == GRID_COUNT_X_INT + 1 ? &mainColHead : &cells[entity->pastCellPosition.x][entity->pastCellPosition.y]));

  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR entity$[rsp]
  00028	81 78 0c 01 04
	00 00		 cmp	 DWORD PTR [rax+12], 1025 ; 00000401H
  0002f	75 0e		 jne	 SHORT $LN4@RemoveEntA
  00031	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:mainColHead
  00038	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  0003d	eb 2f		 jmp	 SHORT $LN5@RemoveEntA
$LN4@RemoveEntA:
  0003f	48 8b 44 24 40	 mov	 rax, QWORD PTR entity$[rsp]
  00044	48 63 40 0c	 movsxd	 rax, DWORD PTR [rax+12]
  00048	48 69 c0 00 20
	00 00		 imul	 rax, rax, 8192		; 00002000H
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cells
  00056	48 03 c8	 add	 rcx, rax
  00059	48 8b c1	 mov	 rax, rcx
  0005c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR entity$[rsp]
  00061	48 63 49 10	 movsxd	 rcx, DWORD PTR [rcx+16]
  00065	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  00069	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN5@RemoveEntA:
  0006e	48 8b 54 24 20	 mov	 rdx, QWORD PTR tv75[rsp]
  00073	48 8b 4c 24 40	 mov	 rcx, QWORD PTR entity$[rsp]
  00078	e8 00 00 00 00	 call	 RemoveEntity
  0007d	90		 npad	 1
$LN1@RemoveEntA:

; 174  : }

  0007e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00082	5f		 pop	 rdi
  00083	c3		 ret	 0
RemoveEntAppropriate2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
_TEXT	SEGMENT
add$ = 48
head$ = 56
InsertAtHead PROC

; 69   : void InsertAtHead(Entity* add, Entity** head) {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 70   : 	add->next = *head;

  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR add$[rsp]
  00020	48 8b 4c 24 38	 mov	 rcx, QWORD PTR head$[rsp]
  00025	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00028	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 71   : 	add->prev = NULL;

  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR add$[rsp]
  00031	48 c7 40 58 00
	00 00 00	 mov	 QWORD PTR [rax+88], 0

; 72   : 	if (*head) (*head)->prev = add;

  00039	48 8b 44 24 38	 mov	 rax, QWORD PTR head$[rsp]
  0003e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00042	74 11		 je	 SHORT $LN2@InsertAtHe
  00044	48 8b 44 24 38	 mov	 rax, QWORD PTR head$[rsp]
  00049	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR add$[rsp]
  00051	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx
$LN2@InsertAtHe:

; 73   : 	*head = add;

  00055	48 8b 44 24 38	 mov	 rax, QWORD PTR head$[rsp]
  0005a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR add$[rsp]
  0005f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 74   : }

  00062	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00066	5f		 pop	 rdi
  00067	c3		 ret	 0
InsertAtHead ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
_TEXT	SEGMENT
this$ = 48
add$ = 56
InsertAtHeadCellChecks PROC

; 75   : void InsertAtHeadCellChecks(cellChecks* this, intVector2 add) {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 76   : 	this->value = add;

  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00020	48 8b 4c 24 38	 mov	 rcx, QWORD PTR add$[rsp]
  00025	48 89 08	 mov	 QWORD PTR [rax], rcx

; 77   : 	this->next = checkedCells;

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR checkedCells
  00034	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 78   : 	this->prev = NULL;

  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003d	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 79   : 	if (checkedCells) (checkedCells)->prev = this;

  00045	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR checkedCells, 0
  0004d	74 10		 je	 SHORT $LN2@InsertAtHe
  0004f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR checkedCells
  00056	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0005b	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN2@InsertAtHe:

; 80   : 	checkedCells = this;

  0005f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00064	48 89 05 00 00
	00 00		 mov	 QWORD PTR checkedCells, rax

; 81   : }

  0006b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
InsertAtHeadCellChecks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
_TEXT	SEGMENT
previous$ = 32
next$ = 40
toRemove$ = 64
RemoveCellChecks PROC

; 82   : void RemoveCellChecks(cellChecks* toRemove) {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  00011	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 83   : 	cellChecks* previous = toRemove->prev, * next = toRemove->next;

  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR toRemove$[rsp]
  0001b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0001f	48 89 44 24 20	 mov	 QWORD PTR previous$[rsp], rax
  00024	48 8b 44 24 40	 mov	 rax, QWORD PTR toRemove$[rsp]
  00029	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0002d	48 89 44 24 28	 mov	 QWORD PTR next$[rsp], rax

; 84   : 	if (next) next->prev = previous;

  00032	48 83 7c 24 28
	00		 cmp	 QWORD PTR next$[rsp], 0
  00038	74 0e		 je	 SHORT $LN2@RemoveCell
  0003a	48 8b 44 24 28	 mov	 rax, QWORD PTR next$[rsp]
  0003f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR previous$[rsp]
  00044	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN2@RemoveCell:

; 85   : 	if (previous)

  00048	48 83 7c 24 20
	00		 cmp	 QWORD PTR previous$[rsp], 0
  0004e	74 10		 je	 SHORT $LN3@RemoveCell

; 86   : 	{
; 87   : 		previous->next = next;

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR previous$[rsp]
  00055	48 8b 4c 24 28	 mov	 rcx, QWORD PTR next$[rsp]
  0005a	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 88   : 		goto ret;

  0005e	eb 0c		 jmp	 SHORT $ret$6
$LN3@RemoveCell:

; 89   : 	}
; 90   : 	checkedCells = next;

  00060	48 8b 44 24 28	 mov	 rax, QWORD PTR next$[rsp]
  00065	48 89 05 00 00
	00 00		 mov	 QWORD PTR checkedCells, rax
$ret$6:

; 91   : ret:
; 92   : 	toRemove->next = toRemove->prev = NULL;

  0006c	48 8b 44 24 40	 mov	 rax, QWORD PTR toRemove$[rsp]
  00071	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0
  00079	48 8b 44 24 40	 mov	 rax, QWORD PTR toRemove$[rsp]
  0007e	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 93   : }

  00086	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008a	5f		 pop	 rdi
  0008b	c3		 ret	 0
RemoveCellChecks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\drago\OneDrive\Documents\GitHub\c-game\cGame\EntityManager.c
_TEXT	SEGMENT
data$ = 32
pastCellPos$ = 56
cellPositionInGrid$ = 88
currentCell$5 = 104
__$ArrayPad$ = 120
entity$ = 144
SortGridCell PROC

; 94   : void SortGridCell(Entity* entity) {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  0000d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00012	b9 18 00 00 00	 mov	 ecx, 24
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]
  00026	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002d	48 33 c4	 xor	 rax, rsp
  00030	48 89 44 24 78	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB74335E_EntityManager@c
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 95   : 	PhysicsData* data = entity->physicsData;

  00041	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR entity$[rsp]
  00049	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004c	48 89 44 24 20	 mov	 QWORD PTR data$[rsp], rax

; 96   : 	intVector2 pastCellPos = entity->pastCellPosition;

  00051	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR entity$[rsp]
  00059	48 8b 40 0c	 mov	 rax, QWORD PTR [rax+12]
  0005d	48 89 44 24 38	 mov	 QWORD PTR pastCellPos$[rsp], rax

; 97   : 	intVector2 cellPositionInGrid = { (int)roundf(entity->midPoint.x / cellSize.x + GRID_COUNT_X / 2.0f), (int)roundf(entity->midPoint.y / cellSize.y + GRID_COUNT_Y / 2.0f) };

  00062	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR entity$[rsp]
  0006a	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  0006f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR cellSize
  00077	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@44000000
  0007f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_roundf
  00085	f3 0f 2c c0	 cvttss2si eax, xmm0
  00089	89 44 24 58	 mov	 DWORD PTR cellPositionInGrid$[rsp], eax
  0008d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR entity$[rsp]
  00095	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [rax+24]
  0009a	f3 0f 5e 05 04
	00 00 00	 divss	 xmm0, DWORD PTR cellSize+4
  000a2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@44000000
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_roundf
  000b0	f3 0f 2c c0	 cvttss2si eax, xmm0
  000b4	89 44 24 5c	 mov	 DWORD PTR cellPositionInGrid$[rsp+4], eax

; 98   : 	if (!memcmp(&cellPositionInGrid, &pastCellPos, sizeof(Vector2))) return;

  000b8	41 b8 08 00 00
	00		 mov	 r8d, 8
  000be	48 8d 54 24 38	 lea	 rdx, QWORD PTR pastCellPos$[rsp]
  000c3	48 8d 4c 24 58	 lea	 rcx, QWORD PTR cellPositionInGrid$[rsp]
  000c8	e8 00 00 00 00	 call	 memcmp
  000cd	85 c0		 test	 eax, eax
  000cf	75 05		 jne	 SHORT $LN2@SortGridCe
  000d1	e9 2f 01 00 00	 jmp	 $LN1@SortGridCe
$LN2@SortGridCe:

; 99   : 	RemoveEntAppropriate2(entity, pastCellPos.x);

  000d6	8b 54 24 38	 mov	 edx, DWORD PTR pastCellPos$[rsp]
  000da	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR entity$[rsp]
  000e2	e8 00 00 00 00	 call	 RemoveEntAppropriate2

; 100  : 	if (cellPositionInGrid.x > 0 && cellPositionInGrid.y > 0 && cellPositionInGrid.x < GRID_COUNT_X_INT && cellPositionInGrid.y < GRID_COUNT_Y_INT) {

  000e7	83 7c 24 58 00	 cmp	 DWORD PTR cellPositionInGrid$[rsp], 0
  000ec	0f 8e b5 00 00
	00		 jle	 $LN3@SortGridCe
  000f2	83 7c 24 5c 00	 cmp	 DWORD PTR cellPositionInGrid$[rsp+4], 0
  000f7	0f 8e aa 00 00
	00		 jle	 $LN3@SortGridCe
  000fd	81 7c 24 58 00
	04 00 00	 cmp	 DWORD PTR cellPositionInGrid$[rsp], 1024 ; 00000400H
  00105	0f 8d 9c 00 00
	00		 jge	 $LN3@SortGridCe
  0010b	81 7c 24 5c 00
	04 00 00	 cmp	 DWORD PTR cellPositionInGrid$[rsp+4], 1024 ; 00000400H
  00113	0f 8d 8e 00 00
	00		 jge	 $LN3@SortGridCe

; 101  : 		Entity* currentCell = cells[cellPositionInGrid.x][cellPositionInGrid.y];

  00119	48 63 44 24 58	 movsxd	 rax, DWORD PTR cellPositionInGrid$[rsp]
  0011e	48 69 c0 00 20
	00 00		 imul	 rax, rax, 8192		; 00002000H
  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cells
  0012c	48 03 c8	 add	 rcx, rax
  0012f	48 8b c1	 mov	 rax, rcx
  00132	48 63 4c 24 5c	 movsxd	 rcx, DWORD PTR cellPositionInGrid$[rsp+4]
  00137	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0013b	48 89 44 24 68	 mov	 QWORD PTR currentCell$5[rsp], rax

; 102  : 		entity->next = currentCell;

  00140	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR entity$[rsp]
  00148	48 8b 4c 24 68	 mov	 rcx, QWORD PTR currentCell$5[rsp]
  0014d	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 103  : 		if (currentCell) currentCell->prev = entity;

  00151	48 83 7c 24 68
	00		 cmp	 QWORD PTR currentCell$5[rsp], 0
  00157	74 11		 je	 SHORT $LN5@SortGridCe
  00159	48 8b 44 24 68	 mov	 rax, QWORD PTR currentCell$5[rsp]
  0015e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR entity$[rsp]
  00166	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx
$LN5@SortGridCe:

; 104  : 		cells[cellPositionInGrid.x][cellPositionInGrid.y] = entity;

  0016a	48 63 44 24 58	 movsxd	 rax, DWORD PTR cellPositionInGrid$[rsp]
  0016f	48 69 c0 00 20
	00 00		 imul	 rax, rax, 8192		; 00002000H
  00176	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cells
  0017d	48 03 c8	 add	 rcx, rax
  00180	48 8b c1	 mov	 rax, rcx
  00183	48 63 4c 24 5c	 movsxd	 rcx, DWORD PTR cellPositionInGrid$[rsp+4]
  00188	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR entity$[rsp]
  00190	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 105  : 		entity->pastCellPosition = cellPositionInGrid;

  00194	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR entity$[rsp]
  0019c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cellPositionInGrid$[rsp]
  001a1	48 89 48 0c	 mov	 QWORD PTR [rax+12], rcx

; 106  : //#define SORT_GRID_CELL_DEBUG
; 107  : #ifdef SORT_GRID_CELL_DEBUG
; 108  : 		char* name = NULL;
; 109  : 		switch (entity->tag) {
; 110  : 			#define SwitchName(tag, nameToAssign)\
; 111  : 		case tag:\
; 112  : 			name = nameToAssign;\
; 113  : 			break
; 114  : 			SwitchName(enemyTag, "enemy");
; 115  : 			SwitchName(playerTag, "player");
; 116  : 			SwitchName(groundTag, "ground");
; 117  : 			SwitchName(playerAttackTag, "player attack");
; 118  : 		}
; 119  : 		printf("%s with MP of %f, %f was sorted into (%d, %d)\n", name, Deconstruct(entity->midPoint), cellPositionInGrid.x, cellPositionInGrid.y);
; 120  : #endif
; 121  : 		/*
; 122  : 		printf("%s", "data with name ");
; 123  : 		switch (data->tag) {
; 124  : #define SwitchCase(_case, behav) case _case: behav; break;
; 125  : #define PrintF(str) printf("%s", str);
; 126  : 			SwitchCase(enemyTag, PrintF("enemy"));
; 127  : 			SwitchCase(groundTag, PrintF("platform"));
; 128  : 			SwitchCase(playerTag, PrintF("player"));
; 129  : 		}
; 130  : 		printf(" was sorted into cell (%d, %d.)\n", cellPositionInGrid.x, cellPositionInGrid.y);*/
; 131  : 	}

  001a5	eb 4e		 jmp	 SHORT $LN4@SortGridCe
$LN3@SortGridCe:

; 132  : 	else {
; 133  : 		entity->next = mainColHead;

  001a7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR entity$[rsp]
  001af	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR mainColHead
  001b6	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 134  : 		if (mainColHead) mainColHead->prev = entity;

  001ba	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR mainColHead, 0
  001c2	74 13		 je	 SHORT $LN6@SortGridCe
  001c4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR mainColHead
  001cb	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR entity$[rsp]
  001d3	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx
$LN6@SortGridCe:

; 135  : 		mainColHead = entity;

  001d7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR entity$[rsp]
  001df	48 89 05 00 00
	00 00		 mov	 QWORD PTR mainColHead, rax

; 136  : 		entity->pastCellPosition.x = GRID_COUNT_X_INT + 1;

  001e6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR entity$[rsp]
  001ee	c7 40 0c 01 04
	00 00		 mov	 DWORD PTR [rax+12], 1025 ; 00000401H
$LN4@SortGridCe:

; 137  : 	}
; 138  : 	entity->prev = NULL;

  001f5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR entity$[rsp]
  001fd	48 c7 40 58 00
	00 00 00	 mov	 QWORD PTR [rax+88], 0
$LN1@SortGridCe:

; 139  : }

  00205	48 8b cc	 mov	 rcx, rsp
  00208	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:SortGridCell$rtcFrameData
  0020f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00214	48 8b 4c 24 78	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00219	48 33 cc	 xor	 rcx, rsp
  0021c	e8 00 00 00 00	 call	 __security_check_cookie
  00221	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  00228	5f		 pop	 rdi
  00229	c3		 ret	 0
SortGridCell ENDP
_TEXT	ENDS
END
