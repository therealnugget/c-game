; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32824.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	oneVector
PUBLIC	noOfEnemies
PUBLIC	??_C@_0N@CHFDBEHE@monk?1sprites@		; `string'
PUBLIC	??_C@_0BH@MABOBLII@images?1monk?1player?4png@	; `string'
PUBLIC	??_C@_0CO@NDPFACJE@images?1Retro?5Inventory?1Original@ ; `string'
PUBLIC	??_C@_0DE@GAHGBOII@images?1Retro?5Inventory?1Original@ ; `string'
PUBLIC	??_C@_0BF@CMJMJICG@images?1terrain?10?4png@	; `string'
PUBLIC	healthBarYOffset
PUBLIC	attkDst
PUBLIC	elapsedTime
PUBLIC	noOfTerrains
PUBLIC	origEnemyScale
COMM	curAnim:QWORD
COMM	healthBarPos:QWORD
COMM	terrainNodes:QWORD
COMM	enemyNodes:QWORD
COMM	agro:QWORD
COMM	forceToAdd:DWORD
COMM	updateTime:BYTE
COMM	isAgroed:BYTE
COMM	directionX:DWORD
COMM	data:QWORD
COMM	curTransform:QWORD
COMM	agroAnim:DWORD
COMM	currentAlive:BYTE
COMM	setMeshDissolve:QWORD
COMM	curEnemy:QWORD
COMM	terrains:QWORD
COMM	curEnemyIndex:DWORD
COMM	blue:QWORD:04H
COMM	enemies:QWORD
COMM	dissolved:BYTE
COMM	resetTime:BYTE
COMM	curHB:QWORD
COMM	minAgro:DWORD
COMM	changeInPos:DWORD
_DATA	ENDS
;	COMDAT ??_C@_0BF@CMJMJICG@images?1terrain?10?4png@
CONST	SEGMENT
??_C@_0BF@CMJMJICG@images?1terrain?10?4png@ DB 'images/terrain/0.png', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@GAHGBOII@images?1Retro?5Inventory?1Original@
CONST	SEGMENT
??_C@_0DE@GAHGBOII@images?1Retro?5Inventory?1Original@ DB 'images/Retro I'
	DB	'nventory/Original/Health_03_Bar01.png', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NDPFACJE@images?1Retro?5Inventory?1Original@
CONST	SEGMENT
??_C@_0CO@NDPFACJE@images?1Retro?5Inventory?1Original@ DB 'images/Retro I'
	DB	'nventory/Original/Health_03.png', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MABOBLII@images?1monk?1player?4png@
CONST	SEGMENT
??_C@_0BH@MABOBLII@images?1monk?1player?4png@ DB 'images/monk/player.png', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CHFDBEHE@monk?1sprites@
CONST	SEGMENT
??_C@_0N@CHFDBEHE@monk?1sprites@ DB 'monk/sprites', 00H	; `string'
elapsedTime DD	040a00000r			; 5
oneVector DD	03f800000r			; 1
	DD	03f800000r			; 1
noOfEnemies DD	0aH
healthBarYOffset DD 03e6b851fr			; 0.23
attkDst	DD	03d99999ar			; 0.075
enemyAccel DD	03e99999ar			; 0.3
noOfTerrains DD	01aH
enemySpeed DD	03d23d70ar			; 0.04
origEnemyScale DD 0bf38f5c3r			; -0.7225
	DD	03f07562ar			; 0.528659
PUBLIC	DefaultAnimTexCoordPts2
PUBLIC	DefaultAnimTexCoordPts
PUBLIC	RandFloat
PUBLIC	SqrMagnitude
PUBLIC	TerrainInit
PUBLIC	SceneUpdate
PUBLIC	SceneInit
;	COMDAT pdata
pdata	SEGMENT
$pdata$DefaultAnimTexCoordPts2 DD imagerel $LN20@DefaultAni
	DD	imagerel $LN20@DefaultAni+425
	DD	imagerel $unwind$DefaultAnimTexCoordPts2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DefaultAnimTexCoordPts DD imagerel $LN20@DefaultAni
	DD	imagerel $LN20@DefaultAni+441
	DD	imagerel $unwind$DefaultAnimTexCoordPts
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$RandFloat DD imagerel $LN4@RandFloat
	DD	imagerel $LN4@RandFloat+68
	DD	imagerel $unwind$RandFloat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TerrainInit DD imagerel $LN12@TerrainIni
	DD	imagerel $LN12@TerrainIni+623
	DD	imagerel $unwind$TerrainInit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SceneUpdate DD imagerel $LN175
	DD	imagerel $LN175+57
	DD	imagerel $unwind$SceneUpdate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$12$SceneUpdate DD imagerel $LN175+57
	DD	imagerel $LN175+1800
	DD	imagerel $chain$12$SceneUpdate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$13$SceneUpdate DD imagerel $LN175+1800
	DD	imagerel $LN175+2044
	DD	imagerel $chain$13$SceneUpdate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$14$SceneUpdate DD imagerel $LN175+2044
	DD	imagerel $LN175+2316
	DD	imagerel $chain$14$SceneUpdate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SceneInit DD imagerel $LN113@SceneInit
	DD	imagerel $LN113@SceneInit+2249
	DD	imagerel $unwind$SceneInit
;	COMDAT xdata
xdata	SEGMENT
$unwind$SceneInit DQ 00008c846001b5519r		; 1.22133e-308
	DQ	0000aa8360009b83er		; 1.48205e-308
	DQ	0000c882c000b9831r		; 1.74278e-308
	DQ	0000e6823000d7827r		; 2.00351e-308
	DQ	00025541f0026641fr		; 5.93221e-308
	DQ	0001e011f0024341fr		; 4.17262e-308
	DQ	0c012d014e016f018r		; -4.7032
	DD	07010H
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$14$SceneUpdate DD 020021H
	DD	01dc400H
	DD	imagerel $LN175
	DD	imagerel $LN175+57
	DD	imagerel $unwind$SceneUpdate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$13$SceneUpdate DD 060021H
	DD	04c800H
	DD	05b800H
	DD	01dc400H
	DD	imagerel $LN175
	DD	imagerel $LN175+57
	DD	imagerel $unwind$SceneUpdate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$12$SceneUpdate DD 01a8521H
	DD	0a6885H
	DD	01dc480H
	DD	02e873H
	DD	03d864H
	DD	04c855H
	DD	05b84bH
	DD	06a83cH
	DD	07982eH
	DD	088820H
	DD	097813H
	DD	016e40eH
	DD	01ed40aH
	DD	01c6404H
	DD	imagerel $LN175
	DD	imagerel $LN175+57
	DD	imagerel $unwind$SceneUpdate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SceneUpdate DD 060f01H
	DD	017010fH
	DD	07006f008H
	DD	030045005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TerrainInit DQ 00005982e00133d19r	; 7.78004e-309
	DQ	00007782400068829r		; 1.03873e-308
	DQ	00017741c00086820r		; 3.26162e-308
	DQ	00015541c0016641cr		; 2.9661e-308
	DQ	00012011c0014341cr		; 2.50381e-308
	DD	0e015H
	DD	imagerel __GSHandlerCheck
	DD	040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RandFloat DQ 00002781100051101r		; 3.43358e-309
	DQ	00000820400036809r		; 7.06285e-310
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DefaultAnimTexCoordPts DQ 00001340500020501r ; 1.67326e-309
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DefaultAnimTexCoordPts2 DQ 00001340500020501r ; 1.67326e-309
; Function compile flags: /Ogtpy
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\vectors.h
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\vectors.h
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.h
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.h
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\Mesh.c
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\Mesh.c
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\Mesh.c
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame\cGame\Mesh.c
; File C:\Users\drago\source\repos\cGame\cGame\entityAdder.h
; File C:\Users\drago\source\repos\cGame\cGame\Mesh.c
; File C:\Users\drago\source\repos\cGame\cGame\entityAdder.h
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c
; File C:\Users\drago\source\repos\cGame\cGame\entityAdder.h
; File C:\Users\drago\source\repos\cGame\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame\cGame\entityAdder.h
; File C:\Users\drago\source\repos\cGame\cGame\entityAdder.c
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\vectors.h
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\math.h
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\math.h
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\math.h
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\math.h
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\math.h
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\math.h
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\math.h
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\math.h
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.h
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.h
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\main.h
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\main.h
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.h
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.h
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.h
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c
;	COMDAT SceneUpdate
_TEXT	SEGMENT
SceneUpdate PROC					; COMDAT

; 182  : void SceneUpdate() {

$LN175:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	41 57		 push	 r15
  00008	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 183  : #ifdef DEBUG_TERRAIN_AABB
; 184  : 	for (uint i = 0; i < 2; i++) MoveScaleMesh(debugMesh[i].meshLocation, (*enemies)->trueAABB[i], debugBoxSize);
; 185  : #endif
; 186  : 	changeInPos = avgDT * enemyAccel;

  0000f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR avgDT

; 187  : 	for (curEnemyIndex = 0; curEnemyIndex < noOfEnemies; curEnemyIndex++) {

  00017	4c 8d 3d 01 00
	00 00		 lea	 r15, OFFSET FLAT:??_C@_0L@MHMCDAGK@u_elapsedT@+1
  0001e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e99999a
  00026	33 ed		 xor	 ebp, ebp
  00028	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR vertices
  0002f	8b cd		 mov	 ecx, ebp
  00031	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR stride
  00037	8b c5		 mov	 eax, ebp
  00039	49 89 73 08	 mov	 QWORD PTR [r11+8], rsi
  0003d	8b f5		 mov	 esi, ebp
  0003f	4d 89 6b 18	 mov	 QWORD PTR [r11+24], r13
  00043	4d 89 73 d8	 mov	 QWORD PTR [r11-40], r14
  00047	41 0f 29 7b b8	 movaps	 XMMWORD PTR [r11-72], xmm7
  0004c	f3 0f 10 3d 00
	00 00 00	 movss	 xmm7, DWORD PTR __real@3d99999a
  00054	45 0f 29 43 a8	 movaps	 XMMWORD PTR [r11-88], xmm8
  00059	f3 44 0f 10 05
	00 00 00 00	 movss	 xmm8, DWORD PTR __real@3d23d70a
  00062	45 0f 29 4b 98	 movaps	 XMMWORD PTR [r11-104], xmm9
  00067	f3 44 0f 10 0d
	00 00 00 00	 movss	 xmm9, DWORD PTR __real@3e6b851f
  00070	45 0f 29 53 88	 movaps	 XMMWORD PTR [r11-120], xmm10
  00075	f3 44 0f 10 15
	00 00 00 00	 movss	 xmm10, DWORD PTR __real@bf38f5c3
  0007e	44 0f 29 5c 24
	50		 movaps	 XMMWORD PTR [rsp+80], xmm11
  00084	45 0f 57 db	 xorps	 xmm11, xmm11
  00088	44 0f 29 64 24
	40		 movaps	 XMMWORD PTR [rsp+64], xmm12
  0008e	f3 44 0f 10 25
	00 00 00 00	 movss	 xmm12, DWORD PTR __real@40800000
  00097	44 0f 29 6c 24
	30		 movaps	 XMMWORD PTR [rsp+48], xmm13
  0009d	f3 44 0f 10 2d
	00 00 00 00	 movss	 xmm13, DWORD PTR __real@3f800000
  000a6	44 0f 29 74 24
	20		 movaps	 XMMWORD PTR [rsp+32], xmm14
  000ac	f3 44 0f 10 35
	00 00 00 00	 movss	 xmm14, DWORD PTR __xmm@80000000800000008000000080000000
  000b5	4d 89 63 10	 mov	 QWORD PTR [r11+16], r12
  000b9	41 0f 29 73 c8	 movaps	 XMMWORD PTR [r11-56], xmm6
  000be	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR changeInPos, xmm0
  000c6	89 2d 00 00 00
	00		 mov	 DWORD PTR curEnemyIndex, ebp
  000cc	0f 1f 40 00	 npad	 4
$LL4@SceneUpdat:

; 188  : 		if (!(curEnemy = enemies[curEnemyIndex])) continue;

  000d0	4c 63 e8	 movsxd	 r13, eax
  000d3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR enemies
  000da	48 63 c9	 movsxd	 rcx, ecx
  000dd	4c 8b 34 c8	 mov	 r14, QWORD PTR [rax+rcx*8]
  000e1	4c 89 35 00 00
	00 00		 mov	 QWORD PTR curEnemy, r14
  000e8	4d 85 f6	 test	 r14, r14
  000eb	0f 84 a6 05 00
	00		 je	 $LN2@SceneUpdat

; 189  : 		data = curEnemy->physicsData;

  000f1	4d 8b 36	 mov	 r14, QWORD PTR [r14]

; 191  : 		curTransform = &data->transform;
; 192  : 		healthBarPos = AddVectors(curTransform->position, VectorByScalar(upVector, healthBarYOffset));
; 193  : 		curHB = &enemyHBs[curEnemyIndex];

  000f4	4d 8b e5	 mov	 r12, r13
  000f7	49 c1 e4 06	 shl	 r12, 6
  000fb	4c 03 25 00 00
	00 00		 add	 r12, QWORD PTR enemyHBs
  00102	4c 89 35 00 00
	00 00		 mov	 QWORD PTR data, r14
  00109	f3 41 0f 10 76
	0c		 movss	 xmm6, DWORD PTR [r14+12]
  0010f	f3 41 0f 10 46
	10		 movss	 xmm0, DWORD PTR [r14+16]
; File C:\Users\drago\source\repos\cGame\cGame\vectors.h

; 33   : 	_this.x = lhs.x + rhs.x;

  00115	f3 41 0f 58 f3	 addss	 xmm6, xmm11
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 190  : 		curAnim = data->animator;

  0011a	4d 8b 7e 28	 mov	 r15, QWORD PTR [r14+40]
; File C:\Users\drago\source\repos\cGame\cGame\vectors.h

; 34   : 	_this.y = lhs.y + rhs.y;

  0011e	f3 41 0f 58 c1	 addss	 xmm0, xmm9
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 194  : 		MoveScaleMesh(curHB->borderMesh.meshLocation, healthBarPos, curHB->bordScale);

  00123	4d 8b 44 24 28	 mov	 r8, QWORD PTR [r12+40]
  00128	41 8b 0c 24	 mov	 ecx, DWORD PTR [r12]
  0012c	4c 89 3d 00 00
	00 00		 mov	 QWORD PTR curAnim, r15
  00133	4c 89 35 00 00
	00 00		 mov	 QWORD PTR curTransform, r14
  0013a	0f 14 f0	 unpcklps xmm6, xmm0
  0013d	66 48 0f 7e f2	 movq	 rdx, xmm6
  00142	4c 89 25 00 00
	00 00		 mov	 QWORD PTR curHB, r12
  00149	f2 0f 11 35 00
	00 00 00	 movsd	 QWORD PTR healthBarPos, xmm6
  00151	e8 00 00 00 00	 call	 MoveScaleMesh

; 195  : 		MoveScaleSlider(curHB->barSlider.mesh, healthBarPos, curHB->barScale);

  00156	49 8b 4c 24 08	 mov	 rcx, QWORD PTR [r12+8]
  0015b	66 48 0f 7e f2	 movq	 rdx, xmm6
  00160	4d 8b 44 24 38	 mov	 r8, QWORD PTR [r12+56]
  00165	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00167	e8 00 00 00 00	 call	 MoveScaleMesh
  0016c	49 8b 54 24 08	 mov	 rdx, QWORD PTR [r12+8]
  00171	8b 0a		 mov	 ecx, DWORD PTR [rdx]
  00173	03 cb		 add	 ecx, ebx
  00175	8b 0c 8f	 mov	 ecx, DWORD PTR [rdi+rcx*4]
  00178	89 4a 0c	 mov	 DWORD PTR [rdx+12], ecx
  0017b	49 8b 54 24 08	 mov	 rdx, QWORD PTR [r12+8]
  00180	8b 02		 mov	 eax, DWORD PTR [rdx]
  00182	8d 0c 58	 lea	 ecx, DWORD PTR [rax+rbx*2]
  00185	8b 0c 8f	 mov	 ecx, DWORD PTR [rdi+rcx*4]
  00188	89 4a 08	 mov	 DWORD PTR [rdx+8], ecx
  0018b	49 8b 44 24 08	 mov	 rax, QWORD PTR [r12+8]
  00190	c6 40 14 01	 mov	 BYTE PTR [rax+20], 1

; 196  : 		currentAlive = curHB->barSlider.pseudoValue;

  00194	f3 41 0f 10 44
	24 10		 movss	 xmm0, DWORD PTR [r12+16]
  0019b	41 0f 2e c3	 ucomiss xmm0, xmm11
  0019f	0f 8a 6b 03 00
	00		 jp	 $LN20@SceneUpdat
  001a5	0f 85 65 03 00
	00		 jne	 $LN20@SceneUpdat

; 198  : 			if (dissolved) SetElapsedTime(.0f);

  001ab	40 38 2d 00 00
	00 00		 cmp	 BYTE PTR dissolved, bpl
  001b2	4c 8d 3d 01 00
	00 00		 lea	 r15, OFFSET FLAT:??_C@_0L@MHMCDAGK@u_elapsedT@+1
  001b9	40 88 2d 00 00
	00 00		 mov	 BYTE PTR currentAlive, bpl
  001c0	0f 84 f3 00 00
	00		 je	 $LN10@SceneUpdat
  001c6	89 2d 00 00 00
	00		 mov	 DWORD PTR elapsedTime, ebp
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c

; 251  : 	long long _this = 0;

  001cc	4c 8b c5	 mov	 r8, rbp

; 253  : 	while (*++string) {

  001cf	4d 8b cf	 mov	 r9, r15
  001d2	b0 5f		 mov	 al, 95			; 0000005fH

; 251  : 	long long _this = 0;

  001d4	41 ba 01 00 00
	00		 mov	 r10d, 1
  001da	66 0f 1f 44 00
	00		 npad	 6
$LL60@SceneUpdat:

; 254  : 		_this += NugRand(*string) * (i + 1);

  001e0	48 0f be c0	 movsx	 rax, al
  001e4	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.h

; 46   : 	return (aConst * seed + cConst) % maxNugRand;

  001e8	48 69 d0 35 4e
	5a 01		 imul	 rdx, rax, 22695477	; 015a4e35H
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c

; 254  : 		_this += NugRand(*string) * (i + 1);

  001ef	41 8b c2	 mov	 eax, r10d

; 255  : 		i++;

  001f2	41 ff c2	 inc	 r10d
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.h

; 46   : 	return (aConst * seed + cConst) % maxNugRand;

  001f5	48 81 c2 39 30
	00 00		 add	 rdx, 12345		; 00003039H
  001fc	8b d2		 mov	 edx, edx
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c

; 254  : 		_this += NugRand(*string) * (i + 1);

  001fe	48 0f af d0	 imul	 rdx, rax
  00202	41 0f b6 01	 movzx	 eax, BYTE PTR [r9]
  00206	4c 03 c2	 add	 r8, rdx
  00209	84 c0		 test	 al, al
  0020b	75 d3		 jne	 SHORT $LL60@SceneUpdat

; 176  : 	locList* head = locMap[hash % 100];

  0020d	48 b8 15 ae 47
	e1 7a 14 ae 47	 mov	 rax, 5165088340638674453 ; 47ae147ae147ae15H
  00217	49 8b c8	 mov	 rcx, r8
  0021a	49 f7 e0	 mul	 r8
  0021d	49 8b c0	 mov	 rax, r8
  00220	48 2b c2	 sub	 rax, rdx
  00223	48 d1 e8	 shr	 rax, 1
  00226	48 03 c2	 add	 rax, rdx
  00229	48 c1 e8 06	 shr	 rax, 6
  0022d	48 6b c0 64	 imul	 rax, rax, 100		; 00000064H
  00231	48 2b c8	 sub	 rcx, rax
  00234	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:locMap
  0023b	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]

; 177  : 	while (head) {

  0023f	48 85 c0	 test	 rax, rax
  00242	74 22		 je	 SHORT $LN56@SceneUpdat
  00244	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL55@SceneUpdat:

; 178  : 		if (head->value->hash == hash) return head->value->value;

  00250	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00253	4c 39 41 08	 cmp	 QWORD PTR [rcx+8], r8
  00257	0f 84 e5 01 00
	00		 je	 $LN100@SceneUpdat
$cont$176:

; 179  : 	cont:
; 180  : 		head = head->next;

  0025d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00261	48 85 c0	 test	 rax, rax
  00264	75 ea		 jne	 SHORT $LL55@SceneUpdat
$LN56@SceneUpdat:

; 182  : 	return NULL;

  00266	8b cd		 mov	 ecx, ebp
$LN54@SceneUpdat:
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 198  : 			if (dissolved) SetElapsedTime(.0f);

  00268	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewUniform1f
  0026f	41 0f 28 cb	 movaps	 xmm1, xmm11
  00273	ff 10		 call	 QWORD PTR [rax]
  00275	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR curEnemyIndex
  0027b	4c 8b 35 00 00
	00 00		 mov	 r14, QWORD PTR data
  00282	4c 8b 25 00 00
	00 00		 mov	 r12, QWORD PTR curHB
  00289	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR vertices
  00290	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR stride
  00296	f3 44 0f 10 0d
	00 00 00 00	 movss	 xmm9, DWORD PTR __real@3e6b851f
  0029f	f3 0f 10 3d 00
	00 00 00	 movss	 xmm7, DWORD PTR __real@3d99999a
  002a7	f3 44 0f 10 05
	00 00 00 00	 movss	 xmm8, DWORD PTR __real@3d23d70a
  002b0	f3 44 0f 10 15
	00 00 00 00	 movss	 xmm10, DWORD PTR __real@bf38f5c3
$LN10@SceneUpdat:

; 199  : 			enemyDamage[curEnemyIndex] = .0f;

  002b9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR enemyDamage

; 200  : 			if (!setMeshDissolve[curEnemyIndex]) {

  002c0	4c 8b 15 00 00
	00 00		 mov	 r10, QWORD PTR setMeshDissolve
  002c7	4c 63 ce	 movsxd	 r9, esi
  002ca	42 89 2c 88	 mov	 DWORD PTR [rax+r9*4], ebp
  002ce	43 38 2c 11	 cmp	 BYTE PTR [r9+r10], bpl
  002d2	75 5f		 jne	 SHORT $LN11@SceneUpdat
; File C:\Users\drago\source\repos\cGame\cGame\Mesh.c

; 179  : 	uint i, meshLoc = mesh->meshLocation;

  002d4	49 8b 46 20	 mov	 rax, QWORD PTR [r14+32]

; 180  : 	for (i = meshLoc + stride - 1; i < meshLoc + quadTempLen; i += stride) {

  002d8	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR quadTempLen
  002df	8b 08		 mov	 ecx, DWORD PTR [rax]
  002e1	44 03 c1	 add	 r8d, ecx
  002e4	8d 51 ff	 lea	 edx, DWORD PTR [rcx-1]
  002e7	03 d3		 add	 edx, ebx
  002e9	41 3b d0	 cmp	 edx, r8d
  002ec	73 10		 jae	 SHORT $LN67@SceneUpdat
  002ee	66 90		 npad	 2
$LL68@SceneUpdat:

; 181  : 		vertices[i] = textureUnitIndex;

  002f0	c7 04 97 cd cc
	8c 3f		 mov	 DWORD PTR [rdi+rdx*4], 1066192077 ; 3f8ccccdH
  002f7	03 d3		 add	 edx, ebx
  002f9	41 3b d0	 cmp	 edx, r8d
  002fc	72 f2		 jb	 SHORT $LL68@SceneUpdat
$LN67@SceneUpdat:

; 179  : 	uint i, meshLoc = mesh->meshLocation;

  002fe	41 8b 0c 24	 mov	 ecx, DWORD PTR [r12]

; 180  : 	for (i = meshLoc + stride - 1; i < meshLoc + quadTempLen; i += stride) {

  00302	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR quadTempLen
  00309	44 03 c1	 add	 r8d, ecx
  0030c	8d 51 ff	 lea	 edx, DWORD PTR [rcx-1]
  0030f	03 d3		 add	 edx, ebx
  00311	41 3b d0	 cmp	 edx, r8d
  00314	73 18		 jae	 SHORT $LN72@SceneUpdat
  00316	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL73@SceneUpdat:

; 181  : 		vertices[i] = textureUnitIndex;

  00320	c7 04 97 33 33
	e3 40		 mov	 DWORD PTR [rdi+rdx*4], 1088631603 ; 40e33333H
  00327	03 d3		 add	 edx, ebx
  00329	41 3b d0	 cmp	 edx, r8d
  0032c	72 f2		 jb	 SHORT $LL73@SceneUpdat
$LN72@SceneUpdat:
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 203  : 				setMeshDissolve[curEnemyIndex] = true;

  0032e	43 c6 04 11 01	 mov	 BYTE PTR [r9+r10], 1
$LN11@SceneUpdat:

; 204  : 			}
; 205  : 			enemies[curEnemyIndex]->physicsData->animator->active = false;

  00333	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR enemies

; 206  : 			if (elapsedTime >= MAX_DISSOLVE_ET) {

  0033a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR elapsedTime
  00342	41 0f 2f c4	 comiss	 xmm0, xmm12
  00346	4a 8b 0c c8	 mov	 rcx, QWORD PTR [rax+r9*8]
  0034a	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0034d	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  00351	40 88 69 2c	 mov	 BYTE PTR [rcx+44], bpl
  00355	0f 82 8a 01 00
	00		 jb	 $LN14@SceneUpdat

; 207  : 				resetTime = true;
; 208  : 				DeleteQuad(data->mesh);

  0035b	49 8b 4e 20	 mov	 rcx, QWORD PTR [r14+32]
  0035f	c6 05 00 00 00
	00 01		 mov	 BYTE PTR resetTime, 1
  00366	e8 00 00 00 00	 call	 DeleteQuad

; 209  : 				DeleteQuad(&curHB->borderMesh);

  0036b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR curHB
  00372	e8 00 00 00 00	 call	 DeleteQuad

; 210  : 				DeleteSlider(monkHBNodes[curEnemyIndex]);

  00377	48 63 0d 00 00
	00 00		 movsxd	 rcx, DWORD PTR curEnemyIndex
; File C:\Users\drago\source\repos\cGame\cGame\Mesh.c

; 105  : 	memset(&vertices[meshLoc], 0, sizeof(float) * quadTempLen);

  0037e	33 d2		 xor	 edx, edx
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 210  : 				DeleteSlider(monkHBNodes[curEnemyIndex]);

  00380	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR monkHBNodes
; File C:\Users\drago\source\repos\cGame\cGame\Mesh.c

; 105  : 	memset(&vertices[meshLoc], 0, sizeof(float) * quadTempLen);

  00387	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR quadTempLen
  0038e	49 c1 e0 02	 shl	 r8, 2
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 210  : 				DeleteSlider(monkHBNodes[curEnemyIndex]);

  00392	48 8b 34 c8	 mov	 rsi, QWORD PTR [rax+rcx*8]
; File C:\Users\drago\source\repos\cGame\cGame\entityAdder.c

; 82   : 	DeleteSQuad(node->value->mesh);

  00396	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  00399	48 8b 38	 mov	 rdi, QWORD PTR [rax]
; File C:\Users\drago\source\repos\cGame\cGame\Mesh.c

; 105  : 	memset(&vertices[meshLoc], 0, sizeof(float) * quadTempLen);

  0039c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR vertices
  003a3	8b 1f		 mov	 ebx, DWORD PTR [rdi]
  003a5	48 8d 0c 98	 lea	 rcx, QWORD PTR [rax+rbx*4]
  003a9	e8 00 00 00 00	 call	 memset

; 106  : 	delMeshSize += sizeof(uint);

  003ae	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR delMeshSize

; 107  : 	delMesh = realloc(delMesh, delMeshSize);

  003b5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR delMesh
  003bc	48 83 c2 04	 add	 rdx, 4
  003c0	48 89 15 00 00
	00 00		 mov	 QWORD PTR delMeshSize, rdx
  003c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc

; 108  : 	delMesh[delMeshLen++] = meshLoc;

  003cd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR delMeshLen

; 109  : 	delIndSize += sizeof(uint);
; 110  : 	delInd = realloc(delInd, delIndSize);

  003d3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR delInd
  003da	48 89 05 00 00
	00 00		 mov	 QWORD PTR delMesh, rax
  003e1	89 1c 90	 mov	 DWORD PTR [rax+rdx*4], ebx
  003e4	ff c2		 inc	 edx
  003e6	89 15 00 00 00
	00		 mov	 DWORD PTR delMeshLen, edx
  003ec	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR delIndSize
  003f3	48 83 c2 04	 add	 rdx, 4
  003f7	48 89 15 00 00
	00 00		 mov	 QWORD PTR delIndSize, rdx
  003fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc

; 111  : 	delInd[delIndLen++] = mesh->indiciesLoc;

  00404	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR delIndLen
  0040b	48 8b d0	 mov	 rdx, rax
  0040e	48 89 05 00 00
	00 00		 mov	 QWORD PTR delInd, rax
  00415	8b 47 04	 mov	 eax, DWORD PTR [rdi+4]
  00418	42 89 04 82	 mov	 DWORD PTR [rdx+r8*4], eax
  0041c	41 ff c0	 inc	 r8d
; File C:\Users\drago\source\repos\cGame\cGame\entityAdder.h

; 15   : 	Remove2(remove, sliderHead, SliderList);

  0041f	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]
  00423	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
; File C:\Users\drago\source\repos\cGame\cGame\Mesh.c

; 111  : 	delInd[delIndLen++] = mesh->indiciesLoc;

  00427	44 89 05 00 00
	00 00		 mov	 DWORD PTR delIndLen, r8d
; File C:\Users\drago\source\repos\cGame\cGame\entityAdder.h

; 15   : 	Remove2(remove, sliderHead, SliderList);

  0042e	48 85 c0	 test	 rax, rax
  00431	74 04		 je	 SHORT $LN80@SceneUpdat
  00433	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN80@SceneUpdat:
  00437	48 85 c9	 test	 rcx, rcx
  0043a	74 0d		 je	 SHORT $LN81@SceneUpdat
  0043c	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00440	eb 0e		 jmp	 SHORT $LN82@SceneUpdat
$LN100@SceneUpdat:
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c

; 178  : 		if (head->value->hash == hash) return head->value->value;

  00442	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00444	e9 1f fe ff ff	 jmp	 $LN54@SceneUpdat
$LN81@SceneUpdat:
; File C:\Users\drago\source\repos\cGame\cGame\entityAdder.h

; 15   : 	Remove2(remove, sliderHead, SliderList);

  00449	48 89 05 00 00
	00 00		 mov	 QWORD PTR sliderHead, rax
$LN82@SceneUpdat:
; File C:\Users\drago\source\repos\cGame\cGame\entityAdder.c

; 84   : 	free(node);

  00450	48 8b ce	 mov	 rcx, rsi
; File C:\Users\drago\source\repos\cGame\cGame\entityAdder.h

; 15   : 	Remove2(remove, sliderHead, SliderList);

  00453	48 89 6e 08	 mov	 QWORD PTR [rsi+8], rbp
  00457	48 89 6e 10	 mov	 QWORD PTR [rsi+16], rbp
; File C:\Users\drago\source\repos\cGame\cGame\entityAdder.c

; 84   : 	free(node);

  0045b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 213  : 					if (curEnemyIndex != i && enemyNodes[curEnemyIndex]) {

  00461	48 63 15 00 00
	00 00		 movsxd	 rdx, DWORD PTR curEnemyIndex
  00468	8b c5		 mov	 eax, ebp
  0046a	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR enemyNodes
  00471	48 8b ca	 mov	 rcx, rdx
$LL7@SceneUpdat:
  00474	3b d0		 cmp	 edx, eax
  00476	74 06		 je	 SHORT $LN5@SceneUpdat
  00478	49 39 2c d0	 cmp	 QWORD PTR [r8+rdx*8], rbp
  0047c	75 73		 jne	 SHORT $LN101@SceneUpdat
$LN5@SceneUpdat:

; 211  : 				bool allNull = true;
; 212  : 				for (uint i = 0; i < noOfEnemies; i++) {

  0047e	ff c0		 inc	 eax
  00480	83 f8 0a	 cmp	 eax, 10
  00483	72 ef		 jb	 SHORT $LL7@SceneUpdat
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c

; 178  : 		if (head->value->hash == hash) return head->value->value;

  00485	49 8b 0c c8	 mov	 rcx, QWORD PTR [r8+rcx*8]
  00489	b2 01		 mov	 dl, 1
  0048b	e8 00 00 00 00	 call	 DeleteEntity
  00490	48 63 0d 00 00
	00 00		 movsxd	 rcx, DWORD PTR curEnemyIndex
  00497	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR enemies
  0049e	48 89 2c c8	 mov	 QWORD PTR [rax+rcx*8], rbp
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 221  : 					free(enemyHBs);

  004a2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR enemyHBs
  004a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  004af	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR curEnemyIndex
$LN172@SceneUpdat:

; 222  : 				}
; 223  : 			}
; 224  : 			updateTime = true;

  004b5	f3 44 0f 10 15
	00 00 00 00	 movss	 xmm10, DWORD PTR __real@bf38f5c3
  004be	f3 44 0f 10 05
	00 00 00 00	 movss	 xmm8, DWORD PTR __real@3d23d70a
  004c7	f3 0f 10 3d 00
	00 00 00	 movss	 xmm7, DWORD PTR __real@3d99999a
  004cf	f3 44 0f 10 0d
	00 00 00 00	 movss	 xmm9, DWORD PTR __real@3e6b851f
  004d8	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR stride
  004de	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR vertices
$LN14@SceneUpdat:
  004e5	c6 05 00 00 00
	00 01		 mov	 BYTE PTR updateTime, 1

; 225  : 			continue;

  004ec	e9 a6 01 00 00	 jmp	 $LN2@SceneUpdat
$LN101@SceneUpdat:

; 214  : 						allNull = false;

  004f1	49 8b 0c c8	 mov	 rcx, QWORD PTR [r8+rcx*8]
  004f5	33 d2		 xor	 edx, edx
  004f7	e8 00 00 00 00	 call	 DeleteEntity
  004fc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR enemies
  00503	48 63 35 00 00
	00 00		 movsxd	 rsi, DWORD PTR curEnemyIndex
  0050a	48 89 2c f0	 mov	 QWORD PTR [rax+rsi*8], rbp
  0050e	eb a5		 jmp	 SHORT $LN172@SceneUpdat
$LN20@SceneUpdat:

; 227  : 		if (SqrMagnitude(TakeVectors(playerData->transform.position, curTransform->position)) <= attkDst) {

  00510	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR playerData
  00517	c6 05 00 00 00
	00 01		 mov	 BYTE PTR currentAlive, 1
  0051e	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [rcx+12]
  00523	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [rcx+16]
; File C:\Users\drago\source\repos\cGame\cGame\vectors.h

; 40   : 	_this.y = lhs.y - rhs.y;

  00528	f3 41 0f 5c 4e
	10		 subss	 xmm1, DWORD PTR [r14+16]
  0052e	f3 41 0f 5c 46
	0c		 subss	 xmm0, DWORD PTR [r14+12]

; 117  : 	return vector.x * vector.x + vector.y * vector.y;

  00534	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00538	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0053c	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 227  : 		if (SqrMagnitude(TakeVectors(playerData->transform.position, curTransform->position)) <= attkDst) {

  00540	0f 2f f9	 comiss	 xmm7, xmm1
  00543	72 47		 jb	 SHORT $LN15@SceneUpdat

; 228  : 			isAgroed = agro[curEnemyIndex] >= minAgro;

  00545	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR agro
  0054c	f3 42 0f 10 04
	a8		 movss	 xmm0, DWORD PTR [rax+r13*4]
  00552	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR minAgro
  00559	0f 93 c1	 setae	 cl
  0055c	0f b6 c1	 movzx	 eax, cl

; 229  : 			agroAnim = idle * !isAgroed + punch * isAgroed;

  0055f	6b d0 07	 imul	 edx, eax, 7
  00562	88 0d 00 00 00
	00		 mov	 BYTE PTR isAgroed, cl
  00568	89 15 00 00 00
	00		 mov	 DWORD PTR agroAnim, edx
  0056e	84 c9		 test	 cl, cl

; 230  : 			if (isAgroed && curAnim->animating != agroAnim) ResetAnim(curAnim);

  00570	74 10		 je	 SHORT $LN16@SceneUpdat
  00572	41 0f b7 47 08	 movzx	 eax, WORD PTR [r15+8]
  00577	3b c2		 cmp	 eax, edx
  00579	74 07		 je	 SHORT $LN16@SceneUpdat
  0057b	66 41 c7 47 0a
	ff ff		 mov	 WORD PTR [r15+10], 65535 ; 0000ffffH
$LN16@SceneUpdat:

; 231  : 			curAnim->animating = agroAnim;

  00582	66 41 89 57 08	 mov	 WORD PTR [r15+8], dx

; 232  : 			continue;

  00587	e9 04 01 00 00	 jmp	 $LN173@SceneUpdat
$LN15@SceneUpdat:

; 233  : 		}
; 234  : 		curAnim->animating = walk;

  0058c	66 41 c7 47 08
	08 00		 mov	 WORD PTR [r15+8], 8
  00593	0f 57 e4	 xorps	 xmm4, xmm4

; 235  : 		directionX = (playerData->transform.position.x < curTransform->position.x) * 2.0f - 1.0f;

  00596	f3 41 0f 10 46
	0c		 movss	 xmm0, DWORD PTR [r14+12]
  0059c	8b c5		 mov	 eax, ebp
  0059e	0f 2f 41 0c	 comiss	 xmm0, DWORD PTR [rcx+12]

; 237  : 		AddForceScaleLimitVelX(*data, *curTransform, forceToAdd * (FAbs(data->velocity.x + forceToAdd) < enemySpeed), directionX * origEnemyScale.x, enemySpeed);

  005a2	c6 05 00 00 00
	00 01		 mov	 BYTE PTR shouldDraw, 1
  005a9	0f 57 c0	 xorps	 xmm0, xmm0
  005ac	0f 57 d2	 xorps	 xmm2, xmm2
  005af	0f 97 c0	 seta	 al
  005b2	f3 0f 2a e0	 cvtsi2ss xmm4, eax
; File C:\Users\drago\source\repos\cGame\cGame\math.h

; 18   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  005b6	8b c5		 mov	 eax, ebp
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 235  : 		directionX = (playerData->transform.position.x < curTransform->position.x) * 2.0f - 1.0f;

  005b8	f3 0f 58 e4	 addss	 xmm4, xmm4
  005bc	f3 41 0f 5c e5	 subss	 xmm4, xmm13
  005c1	0f 28 dc	 movaps	 xmm3, xmm4
  005c4	f3 0f 11 25 00
	00 00 00	 movss	 DWORD PTR directionX, xmm4
  005cc	41 0f 57 de	 xorps	 xmm3, xmm14

; 237  : 		AddForceScaleLimitVelX(*data, *curTransform, forceToAdd * (FAbs(data->velocity.x + forceToAdd) < enemySpeed), directionX * origEnemyScale.x, enemySpeed);

  005d0	f3 41 0f 59 e2	 mulss	 xmm4, xmm10
  005d5	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR changeInPos
  005dd	0f 28 cb	 movaps	 xmm1, xmm3
  005e0	f3 0f 11 1d 00
	00 00 00	 movss	 DWORD PTR forceToAdd, xmm3
  005e8	f3 41 0f 58 4e
	48		 addss	 xmm1, DWORD PTR [r14+72]
; File C:\Users\drago\source\repos\cGame\cGame\math.h

; 18   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  005ee	41 0f 2f cb	 comiss	 xmm1, xmm11
  005f2	0f 93 c0	 setae	 al
  005f5	f3 0f 2a c0	 cvtsi2ss xmm0, eax
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 237  : 		AddForceScaleLimitVelX(*data, *curTransform, forceToAdd * (FAbs(data->velocity.x + forceToAdd) < enemySpeed), directionX * origEnemyScale.x, enemySpeed);

  005f9	8b c5		 mov	 eax, ebp
; File C:\Users\drago\source\repos\cGame\cGame\math.h

; 18   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  005fb	f3 0f 58 c0	 addss	 xmm0, xmm0
  005ff	f3 41 0f 5c c5	 subss	 xmm0, xmm13
  00604	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00608	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 237  : 		AddForceScaleLimitVelX(*data, *curTransform, forceToAdd * (FAbs(data->velocity.x + forceToAdd) < enemySpeed), directionX * origEnemyScale.x, enemySpeed);

  0060b	44 0f 2f c0	 comiss	 xmm8, xmm0
  0060f	0f 57 c0	 xorps	 xmm0, xmm0
  00612	0f 97 c0	 seta	 al
  00615	f3 0f 2a c8	 cvtsi2ss xmm1, eax
; File C:\Users\drago\source\repos\cGame\cGame\math.h

; 18   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  00619	8b c5		 mov	 eax, ebp
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 237  : 		AddForceScaleLimitVelX(*data, *curTransform, forceToAdd * (FAbs(data->velocity.x + forceToAdd) < enemySpeed), directionX * origEnemyScale.x, enemySpeed);

  0061b	f3 0f 59 cb	 mulss	 xmm1, xmm3
  0061f	f3 41 0f 58 4e
	48		 addss	 xmm1, DWORD PTR [r14+72]
; File C:\Users\drago\source\repos\cGame\cGame\math.h

; 18   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  00625	41 0f 2f cb	 comiss	 xmm1, xmm11
  00629	0f 93 c0	 setae	 al
  0062c	f3 0f 2a c0	 cvtsi2ss xmm0, eax
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 237  : 		AddForceScaleLimitVelX(*data, *curTransform, forceToAdd * (FAbs(data->velocity.x + forceToAdd) < enemySpeed), directionX * origEnemyScale.x, enemySpeed);

  00630	8b c5		 mov	 eax, ebp
  00632	0f 97 c0	 seta	 al
  00635	f3 0f 2a d0	 cvtsi2ss xmm2, eax
; File C:\Users\drago\source\repos\cGame\cGame\math.h

; 26   : 	return lhs * b + rhs * !b;

  00639	8b c5		 mov	 eax, ebp

; 18   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  0063b	f3 0f 58 c0	 addss	 xmm0, xmm0
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 237  : 		AddForceScaleLimitVelX(*data, *curTransform, forceToAdd * (FAbs(data->velocity.x + forceToAdd) < enemySpeed), directionX * origEnemyScale.x, enemySpeed);

  0063f	f3 0f 58 d2	 addss	 xmm2, xmm2
; File C:\Users\drago\source\repos\cGame\cGame\math.h

; 18   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  00643	f3 41 0f 5c c5	 subss	 xmm0, xmm13
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 237  : 		AddForceScaleLimitVelX(*data, *curTransform, forceToAdd * (FAbs(data->velocity.x + forceToAdd) < enemySpeed), directionX * origEnemyScale.x, enemySpeed);

  00648	f3 41 0f 5c d5	 subss	 xmm2, xmm13
; File C:\Users\drago\source\repos\cGame\cGame\math.h

; 18   : 	return orig * ((orig >= .0f) * 2.0f - 1.0f);

  0064d	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00651	0f 57 c9	 xorps	 xmm1, xmm1

; 26   : 	return lhs * b + rhs * !b;

  00654	44 0f 2f c0	 comiss	 xmm8, xmm0
  00658	0f 93 c0	 setae	 al
  0065b	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  0065f	8b c5		 mov	 eax, ebp
  00661	0f 92 c0	 setb	 al
  00664	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00668	0f 57 c0	 xorps	 xmm0, xmm0
  0066b	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0066f	f3 41 0f 59 c0	 mulss	 xmm0, xmm8
  00674	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 237  : 		AddForceScaleLimitVelX(*data, *curTransform, forceToAdd * (FAbs(data->velocity.x + forceToAdd) < enemySpeed), directionX * origEnemyScale.x, enemySpeed);

  00678	f3 0f 59 ca	 mulss	 xmm1, xmm2
  0067c	f3 41 0f 11 4e
	48		 movss	 DWORD PTR [r14+72], xmm1
  00682	f3 41 0f 11 66
	04		 movss	 DWORD PTR [r14+4], xmm4
  00688	41 88 6e 02	 mov	 BYTE PTR [r14+2], bpl
  0068c	41 c6 06 01	 mov	 BYTE PTR [r14], 1
$LN173@SceneUpdat:

; 187  : 	for (curEnemyIndex = 0; curEnemyIndex < noOfEnemies; curEnemyIndex++) {

  00690	4c 8d 3d 01 00
	00 00		 lea	 r15, OFFSET FLAT:??_C@_0L@MHMCDAGK@u_elapsedT@+1
$LN2@SceneUpdat:
  00697	ff c6		 inc	 esi
  00699	89 35 00 00 00
	00		 mov	 DWORD PTR curEnemyIndex, esi
  0069f	8b c6		 mov	 eax, esi
  006a1	8b ce		 mov	 ecx, esi
  006a3	83 fe 0a	 cmp	 esi, 10
  006a6	0f 82 24 fa ff
	ff		 jb	 $LL4@SceneUpdat

; 238  : 		//printf("moved entity %d by %f, player is %s the enemy\n", curEnemyIndex, FMin(FAbs(resultantVel), enemySpeed) * ((resultantVel > .0f) * 2.0f - 1.0f), playerData->transform.position.x < curTransform->position.x ? "to the left of" : "to the right of");
; 239  : 	}
; 240  : 	if (resetTime) {

  006ac	40 38 2d 00 00
	00 00		 cmp	 BYTE PTR resetTime, bpl
  006b3	41 bc 01 00 00
	00		 mov	 r12d, 1
  006b9	44 0f 28 74 24
	20		 movaps	 xmm14, XMMWORD PTR [rsp+32]
  006bf	44 0f 28 6c 24
	30		 movaps	 xmm13, XMMWORD PTR [rsp+48]
  006c5	44 0f 28 54 24
	60		 movaps	 xmm10, XMMWORD PTR [rsp+96]
  006cb	44 0f 28 4c 24
	70		 movaps	 xmm9, XMMWORD PTR [rsp+112]
  006d1	44 0f 28 84 24
	80 00 00 00	 movaps	 xmm8, XMMWORD PTR [rsp+128]
  006da	0f 28 bc 24 90
	00 00 00	 movaps	 xmm7, XMMWORD PTR [rsp+144]
  006e2	0f 28 b4 24 a0
	00 00 00	 movaps	 xmm6, XMMWORD PTR [rsp+160]
  006ea	4c 8b b4 24 b0
	00 00 00	 mov	 r14, QWORD PTR [rsp+176]
  006f2	4c 8b ac 24 f0
	00 00 00	 mov	 r13, QWORD PTR [rsp+240]
  006fa	48 8b b4 24 e0
	00 00 00	 mov	 rsi, QWORD PTR [rsp+224]
  00702	0f 84 b3 00 00
	00		 je	 $LN141@SceneUpdat

; 241  : 		SetElapsedTime(.0f);

  00708	89 2d 00 00 00
	00		 mov	 DWORD PTR elapsedTime, ebp
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c

; 251  : 	long long _this = 0;

  0070e	4c 8b c5	 mov	 r8, rbp

; 253  : 	while (*++string) {

  00711	4d 8b cf	 mov	 r9, r15
  00714	b0 5f		 mov	 al, 95			; 0000005fH

; 251  : 	long long _this = 0;

  00716	45 8b d4	 mov	 r10d, r12d
  00719	0f 1f 80 00 00
	00 00		 npad	 7
$LL32@SceneUpdat:

; 254  : 		_this += NugRand(*string) * (i + 1);

  00720	48 0f be c0	 movsx	 rax, al
  00724	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.h

; 46   : 	return (aConst * seed + cConst) % maxNugRand;

  00728	48 69 d0 35 4e
	5a 01		 imul	 rdx, rax, 22695477	; 015a4e35H
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c

; 254  : 		_this += NugRand(*string) * (i + 1);

  0072f	41 8b c2	 mov	 eax, r10d

; 255  : 		i++;

  00732	41 ff c2	 inc	 r10d
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.h

; 46   : 	return (aConst * seed + cConst) % maxNugRand;

  00735	48 81 c2 39 30
	00 00		 add	 rdx, 12345		; 00003039H
  0073c	8b d2		 mov	 edx, edx
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c

; 254  : 		_this += NugRand(*string) * (i + 1);

  0073e	48 0f af d0	 imul	 rdx, rax
  00742	41 0f b6 01	 movzx	 eax, BYTE PTR [r9]
  00746	4c 03 c2	 add	 r8, rdx
  00749	84 c0		 test	 al, al
  0074b	75 d3		 jne	 SHORT $LL32@SceneUpdat

; 176  : 	locList* head = locMap[hash % 100];

  0074d	48 bb 15 ae 47
	e1 7a 14 ae 47	 mov	 rbx, 5165088340638674453 ; 47ae147ae147ae15H
  00757	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:locMap
  0075e	48 8b c3	 mov	 rax, rbx
  00761	49 8b c8	 mov	 rcx, r8
  00764	49 f7 e0	 mul	 r8
  00767	49 8b c0	 mov	 rax, r8
  0076a	48 2b c2	 sub	 rax, rdx
  0076d	48 d1 e8	 shr	 rax, 1
  00770	48 03 c2	 add	 rax, rdx
  00773	48 c1 e8 06	 shr	 rax, 6
  00777	48 6b c0 64	 imul	 rax, rax, 100		; 00000064H
  0077b	48 2b c8	 sub	 rcx, rax
  0077e	48 8b 04 cf	 mov	 rax, QWORD PTR [rdi+rcx*8]

; 177  : 	while (head) {

  00782	48 85 c0	 test	 rax, rax
  00785	74 12		 je	 SHORT $LN28@SceneUpdat
$LL27@SceneUpdat:

; 178  : 		if (head->value->hash == hash) return head->value->value;

  00787	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0078a	4c 39 41 08	 cmp	 QWORD PTR [rcx+8], r8
  0078e	74 1a		 je	 SHORT $LN102@SceneUpdat
$cont$177:

; 179  : 	cont:
; 180  : 		head = head->next;

  00790	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00794	48 85 c0	 test	 rax, rax
  00797	75 ee		 jne	 SHORT $LL27@SceneUpdat
$LN28@SceneUpdat:
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 241  : 		SetElapsedTime(.0f);

  00799	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewUniform1f
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c

; 182  : 	return NULL;

  007a0	8b cd		 mov	 ecx, ebp
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 241  : 		SetElapsedTime(.0f);

  007a2	41 0f 28 cb	 movaps	 xmm1, xmm11
  007a6	ff 10		 call	 QWORD PTR [rax]
  007a8	eb 22		 jmp	 SHORT $LN17@SceneUpdat
$LN102@SceneUpdat:
  007aa	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewUniform1f
  007b1	41 0f 28 cb	 movaps	 xmm1, xmm11
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c

; 178  : 		if (head->value->hash == hash) return head->value->value;

  007b5	8b 09		 mov	 ecx, DWORD PTR [rcx]
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 241  : 		SetElapsedTime(.0f);

  007b7	ff 10		 call	 QWORD PTR [rax]
  007b9	eb 11		 jmp	 SHORT $LN17@SceneUpdat
$LN141@SceneUpdat:

; 238  : 		//printf("moved entity %d by %f, player is %s the enemy\n", curEnemyIndex, FMin(FAbs(resultantVel), enemySpeed) * ((resultantVel > .0f) * 2.0f - 1.0f), playerData->transform.position.x < curTransform->position.x ? "to the left of" : "to the right of");
; 239  : 	}
; 240  : 	if (resetTime) {

  007bb	48 bb 15 ae 47
	e1 7a 14 ae 47	 mov	 rbx, 5165088340638674453 ; 47ae147ae147ae15H
  007c5	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:locMap
$LN17@SceneUpdat:

; 242  : 	}
; 243  : 	resetTime = false;
; 244  : 	if (!(dissolved = elapsedTime > MAX_DISSOLVE_ET) && updateTime) {

  007cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR elapsedTime
  007d4	44 0f 28 5c 24
	50		 movaps	 xmm11, XMMWORD PTR [rsp+80]
  007da	41 0f 2f c4	 comiss	 xmm0, xmm12
  007de	40 88 2d 00 00
	00 00		 mov	 BYTE PTR resetTime, bpl
  007e5	44 0f 28 64 24
	40		 movaps	 xmm12, XMMWORD PTR [rsp+64]
  007eb	0f 97 c0	 seta	 al
  007ee	88 05 00 00 00
	00		 mov	 BYTE PTR dissolved, al
  007f4	84 c0		 test	 al, al
  007f6	0f 85 f4 00 00
	00		 jne	 $LN138@SceneUpdat
  007fc	40 38 2d 00 00
	00 00		 cmp	 BYTE PTR updateTime, bpl
  00803	0f 84 e7 00 00
	00		 je	 $LN138@SceneUpdat
; File C:\Users\drago\source\repos\cGame\cGame\main.h

; 350  : 	QueryPerformanceCounter(&cTime);

  00809	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cTime
  00810	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 351  : 	return (float)((cTime.QuadPart - pTime.QuadPart) * 1000000 / frequency) / 1000000.0f * timeScale;

  00816	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR cTime
  0081d	0f 57 c0	 xorps	 xmm0, xmm0
  00820	48 2b 05 00 00
	00 00		 sub	 rax, QWORD PTR pTime
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c

; 251  : 	long long _this = 0;

  00827	4c 8b c5	 mov	 r8, rbp
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 245  : 		glUniform1f(GetLocVal2("u_elapsedT"), elapsedTime += deltaTime());

  0082a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR elapsedTime
; File C:\Users\drago\source\repos\cGame\cGame\main.h

; 351  : 	return (float)((cTime.QuadPart - pTime.QuadPart) * 1000000 / frequency) / 1000000.0f * timeScale;

  00832	48 69 c0 40 42
	0f 00		 imul	 rax, rax, 1000000	; 000f4240H
  00839	48 99		 cdq
  0083b	48 f7 3d 00 00
	00 00		 idiv	 QWORD PTR frequency
  00842	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  00847	b0 5f		 mov	 al, 95			; 0000005fH
  00849	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@49742400
  00851	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR timeScale
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 245  : 		glUniform1f(GetLocVal2("u_elapsedT"), elapsedTime += deltaTime());

  00859	f3 0f 58 c8	 addss	 xmm1, xmm0
  0085d	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR elapsedTime, xmm1
  00865	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL49@SceneUpdat:
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c

; 254  : 		_this += NugRand(*string) * (i + 1);

  00870	48 0f be c0	 movsx	 rax, al
  00874	4d 8d 7f 01	 lea	 r15, QWORD PTR [r15+1]
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.h

; 46   : 	return (aConst * seed + cConst) % maxNugRand;

  00878	48 69 d0 35 4e
	5a 01		 imul	 rdx, rax, 22695477	; 015a4e35H
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c

; 253  : 	while (*++string) {

  0087f	41 0f b6 07	 movzx	 eax, BYTE PTR [r15]
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.h

; 46   : 	return (aConst * seed + cConst) % maxNugRand;

  00883	48 81 c2 39 30
	00 00		 add	 rdx, 12345		; 00003039H
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c

; 254  : 		_this += NugRand(*string) * (i + 1);

  0088a	41 8b cc	 mov	 ecx, r12d
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.h

; 46   : 	return (aConst * seed + cConst) % maxNugRand;

  0088d	8b d2		 mov	 edx, edx
; File C:\Users\drago\source\repos\cGame\cGame\Dictionary.c

; 255  : 		i++;

  0088f	41 ff c4	 inc	 r12d
  00892	48 0f af d1	 imul	 rdx, rcx
  00896	4c 03 c2	 add	 r8, rdx
  00899	84 c0		 test	 al, al
  0089b	75 d3		 jne	 SHORT $LL49@SceneUpdat

; 176  : 	locList* head = locMap[hash % 100];

  0089d	48 8b c3	 mov	 rax, rbx
  008a0	49 8b c8	 mov	 rcx, r8
  008a3	49 f7 e0	 mul	 r8
  008a6	49 8b c0	 mov	 rax, r8
  008a9	48 2b c2	 sub	 rax, rdx
  008ac	48 d1 e8	 shr	 rax, 1
  008af	48 03 c2	 add	 rax, rdx
  008b2	48 c1 e8 06	 shr	 rax, 6
  008b6	48 6b c0 64	 imul	 rax, rax, 100		; 00000064H
  008ba	48 2b c8	 sub	 rcx, rax
  008bd	48 8b 04 cf	 mov	 rax, QWORD PTR [rdi+rcx*8]

; 177  : 	while (head) {

  008c1	48 85 c0	 test	 rax, rax
  008c4	74 16		 je	 SHORT $LN45@SceneUpdat
$LL44@SceneUpdat:

; 178  : 		if (head->value->hash == hash) return head->value->value;

  008c6	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  008c9	4c 39 41 08	 cmp	 QWORD PTR [rcx+8], r8
  008cd	74 0b		 je	 SHORT $LN103@SceneUpdat
$cont$178:

; 179  : 	cont:
; 180  : 		head = head->next;

  008cf	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  008d3	48 85 c0	 test	 rax, rax
  008d6	75 ee		 jne	 SHORT $LL44@SceneUpdat

; 178  : 		if (head->value->hash == hash) return head->value->value;

  008d8	eb 02		 jmp	 SHORT $LN45@SceneUpdat
$LN103@SceneUpdat:
  008da	8b 29		 mov	 ebp, DWORD PTR [rcx]
$LN45@SceneUpdat:
; File C:\Users\drago\source\repos\cGame\cGame\scene 1.c

; 245  : 		glUniform1f(GetLocVal2("u_elapsedT"), elapsedTime += deltaTime());

  008dc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewUniform1f
  008e3	8b cd		 mov	 ecx, ebp
  008e5	ff 10		 call	 QWORD PTR [rax]

; 246  : 	}
; 247  : 	updateTime = false;

  008e7	c6 05 00 00 00
	00 00		 mov	 BYTE PTR updateTime, 0
  008ee	eb 07		 jmp	 SHORT $LN18@SceneUpdat
$LN138@SceneUpdat:

; 248  : }

  008f0	40 88 2d 00 00
	00 00		 mov	 BYTE PTR updateTime, bpl
$LN18@SceneUpdat:
  008f7	4c 8b a4 24 e8
	00 00 00	 mov	 r12, QWORD PTR [rsp+232]
  008ff	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00906	41 5f		 pop	 r15
  00908	5f		 pop	 rdi
  00909	5d		 pop	 rbp
  0090a	5b		 pop	 rbx
  0090b	c3		 ret	 0
SceneUpdate ENDP
_TEXT	ENDS
END
