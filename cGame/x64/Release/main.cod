; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32824.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	pressingKey
PUBLIC	timeScale
PUBLIC	pressedKey
PUBLIC	vecSize
PUBLIC	vSyncCount
PUBLIC	??_C@_06HKHHAOPL@broken@			; `string'
PUBLIC	??_C@_0BB@GIFJGILP@cannot?5read?5file@		; `string'
PUBLIC	??_C@_08FJBPFDBJ@?$CDshader?5@			; `string'
PUBLIC	??_C@_06HLKHCFCI@vertex@			; `string'
PUBLIC	??_C@_08IEIKBDDE@fragment@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_0BN@HPODFHAK@failed?5to?5compile?5?$CFs?5shader?6@ ; `string'
PUBLIC	??_C@_0BF@LBNLFPA@shader?5is?5broken?6?$CFs?6@	; `string'
PUBLIC	??_C@_0BB@BOIFLNGG@saves?1save?51?4txt@		; `string'
PUBLIC	??_C@_0CF@JPPIGLOJ@?6Loading?5save?5file?5took?5?$CFf?5seco@ ; `string'
PUBLIC	??_C@_0CM@MCNGPNLE@Hello?0?5my?5name?5is?5Kevin?0?5I?5have@ ; `string'
PUBLIC	??_C@_0BH@PCNKIOJF@your?5program?5is?5broken@	; `string'
PUBLIC	??_C@_0DB@OIADNLIG@?$CFd?5texture?5slots?5are?5available?5@ ; `string'
PUBLIC	??_C@_1DC@DMAGFLJM@?$AA?4?$AA?4?$AA?1?$AAx?$AA6?$AA4?$AA?1?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?1@ ; `string'
PUBLIC	??_C@_1BE@BFMNEOPM@?$AAc?$AAG?$AAa?$AAm?$AAe?$AA?4?$AAe?$AAx?$AAe@ ; `string'
PUBLIC	fullScreenET
PUBLIC	ss
EXTRN	__imp_glGetIntegerv:PROC
EXTRN	__imp_glewInit:PROC
EXTRN	__imp_GetKeyState:PROC
EXTRN	__imp_glfwWindowShouldClose:PROC
EXTRN	__imp___glewLinkProgram:QWORD
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp___glewDeleteShader:QWORD
EXTRN	__imp_glDrawElements:PROC
EXTRN	__imp_CreateProcessW:PROC
EXTRN	__imp___glewGetProgramInfoLog:QWORD
EXTRN	__imp__time64:PROC
EXTRN	__imp_glfwGetPrimaryMonitor:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_glHint:PROC
EXTRN	__imp___glewShaderSource:QWORD
EXTRN	__imp___glewDeleteProgram:QWORD
EXTRN	__imp___glewAttachShader:QWORD
EXTRN	__imp___glewBufferData:QWORD
EXTRN	__imp_glfwMakeContextCurrent:PROC
EXTRN	__imp_glfwWindowHint:PROC
EXTRN	__imp_Sleep:PROC
EXTRN	__imp_glBlendFunc:PROC
EXTRN	__imp_glfwCreateWindow:PROC
EXTRN	__imp_puts:PROC
EXTRN	__imp_rand:PROC
EXTRN	__imp_glfwInit:PROC
EXTRN	__imp_glfwPollEvents:PROC
EXTRN	__imp_glfwSetWindowMonitor:PROC
EXTRN	__imp_glfwTerminate:PROC
EXTRN	__imp___glewGetProgramiv:QWORD
EXTRN	__imp___glewUniform2f:QWORD
EXTRN	__imp___glewValidateProgram:QWORD
EXTRN	__imp___glewGetShaderInfoLog:QWORD
EXTRN	__imp_glfwGetVideoMode:PROC
EXTRN	__imp_glEnable:PROC
EXTRN	__imp___glewCreateProgram:QWORD
EXTRN	__imp_srand:PROC
EXTRN	__imp_glfwGetWindowAttrib:PROC
EXTRN	__imp___glewCreateShader:QWORD
EXTRN	__imp___glewCompileShader:QWORD
EXTRN	__imp___glewGetShaderiv:QWORD
EXTRN	__imp_glClear:PROC
EXTRN	__imp_glfwSwapInterval:PROC
EXTRN	__imp_exit:PROC
EXTRN	__imp_glfwSwapBuffers:PROC
pressingKey DB	0feH DUP (?)
	ALIGN	4

pressedKey DB	0feH DUP (?)
COMM	pressedControl:BYTE
	ALIGN	8

ss	DQ	01H DUP (?)
COMM	playerData:QWORD
COMM	playerFullyImmune:BYTE
COMM	player:BYTE:060H
COMM	playerImmuneET:DWORD
COMM	plrImmune:QWORD
COMM	notFocussed:BYTE
COMM	hb_Bar:BYTE:018H
_DATA	ENDS
;	COMDAT ??_C@_1BE@BFMNEOPM@?$AAc?$AAG?$AAa?$AAm?$AAe?$AA?4?$AAe?$AAx?$AAe@
CONST	SEGMENT
??_C@_1BE@BFMNEOPM@?$AAc?$AAG?$AAa?$AAm?$AAe?$AA?4?$AAe?$AAx?$AAe@ DB 'c', 00H
	DB	'G', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '.', 00H, 'e', 00H, 'x'
	DB	00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@DMAGFLJM@?$AA?4?$AA?4?$AA?1?$AAx?$AA6?$AA4?$AA?1?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?1@
CONST	SEGMENT
??_C@_1DC@DMAGFLJM@?$AA?4?$AA?4?$AA?1?$AAx?$AA6?$AA4?$AA?1?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?1@ DB '.'
	DB	00H, '.', 00H, '/', 00H, 'x', 00H, '6', 00H, '4', 00H, '/', 00H
	DB	'R', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H, 'e'
	DB	00H, '/', 00H, 'c', 00H, 'G', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	'.', 00H, 'e', 00H, 'x', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@OIADNLIG@?$CFd?5texture?5slots?5are?5available?5@
CONST	SEGMENT
??_C@_0DB@OIADNLIG@?$CFd?5texture?5slots?5are?5available?5@ DB '%d textur'
	DB	'e slots are available on this machine.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PCNKIOJF@your?5program?5is?5broken@
CONST	SEGMENT
??_C@_0BH@PCNKIOJF@your?5program?5is?5broken@ DB 'your program is broken', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@MCNGPNLE@Hello?0?5my?5name?5is?5Kevin?0?5I?5have@
CONST	SEGMENT
??_C@_0CM@MCNGPNLE@Hello?0?5my?5name?5is?5Kevin?0?5I?5have@ DB 'Hello, my'
	DB	' name is Kevin, I have Changnesia.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JPPIGLOJ@?6Loading?5save?5file?5took?5?$CFf?5seco@
CONST	SEGMENT
??_C@_0CF@JPPIGLOJ@?6Loading?5save?5file?5took?5?$CFf?5seco@ DB 0aH, 'Loa'
	DB	'ding save file took %f seconds.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BOIFLNGG@saves?1save?51?4txt@
CONST	SEGMENT
??_C@_0BB@BOIFLNGG@saves?1save?51?4txt@ DB 'saves/save 1.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LBNLFPA@shader?5is?5broken?6?$CFs?6@
CONST	SEGMENT
??_C@_0BF@LBNLFPA@shader?5is?5broken?6?$CFs?6@ DB 'shader is broken', 0aH
	DB	'%s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HPODFHAK@failed?5to?5compile?5?$CFs?5shader?6@
CONST	SEGMENT
??_C@_0BN@HPODFHAK@failed?5to?5compile?5?$CFs?5shader?6@ DB 'failed to co'
	DB	'mpile %s shader', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IEIKBDDE@fragment@
CONST	SEGMENT
??_C@_08IEIKBDDE@fragment@ DB 'fragment', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HLKHCFCI@vertex@
CONST	SEGMENT
??_C@_06HLKHCFCI@vertex@ DB 'vertex', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FJBPFDBJ@?$CDshader?5@
CONST	SEGMENT
??_C@_08FJBPFDBJ@?$CDshader?5@ DB '#shader ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GIFJGILP@cannot?5read?5file@
CONST	SEGMENT
??_C@_0BB@GIFJGILP@cannot?5read?5file@ DB 'cannot read file', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HKHHAOPL@broken@
CONST	SEGMENT
??_C@_06HKHHAOPL@broken@ DB 'broken', 00H		; `string'
timeScale DD	03f800000r			; 1
fullScreenET DD	03f800000r			; 1
vecSize	DQ	0000000000000008H
vSyncCount DD	01H
PUBLIC	main
PUBLIC	SetFullScreen
PUBLIC	ChangeFullScreen
PUBLIC	CreateShader
PUBLIC	ParseShader
PUBLIC	pressing
PUBLIC	deltaTime
pastDT	DD	01H DUP (?)
curDT	DD	01H DUP (?)
COMM	?fullScreen@?1??ChangeFullScreen@@9@9:BYTE							; `ChangeFullScreen'::`2'::fullScreen
cumDT	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN95
	DD	imagerel $LN95+30
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$main DD imagerel $LN95+30
	DD	imagerel $LN95+442
	DD	imagerel $chain$0$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$main DD imagerel $LN95+442
	DD	imagerel $LN95+567
	DD	imagerel $chain$1$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$main DD imagerel $LN95+567
	DD	imagerel $LN95+1898
	DD	imagerel $chain$3$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$main DD imagerel $LN95+1898
	DD	imagerel $LN95+1928
	DD	imagerel $chain$4$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$OpenFileUnsafe DD imagerel OpenFileUnsafe
	DD	imagerel OpenFileUnsafe+159
	DD	imagerel $unwind$OpenFileUnsafe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SetFullScreen DD imagerel $LN4@SetFullScr
	DD	imagerel $LN4@SetFullScr+68
	DD	imagerel $unwind$SetFullScreen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ChangeFullScreen DD imagerel $LN5@ChangeFull
	DD	imagerel $LN5@ChangeFull+94
	DD	imagerel $unwind$ChangeFullScreen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CreateShader DD imagerel $LN8@CreateShad
	DD	imagerel $LN8@CreateShad+307
	DD	imagerel $unwind$CreateShader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CompileShader DD imagerel CompileShader
	DD	imagerel CompileShader+124
	DD	imagerel $unwind$CompileShader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$CompileShader DD imagerel CompileShader+124
	DD	imagerel CompileShader+332
	DD	imagerel $chain$2$CompileShader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$CompileShader DD imagerel CompileShader+332
	DD	imagerel CompileShader+356
	DD	imagerel $chain$3$CompileShader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ParseShader DD imagerel $LN59@ParseShade
	DD	imagerel $LN59@ParseShade+211
	DD	imagerel $unwind$ParseShader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ParseShader DD imagerel $LN59@ParseShade+211
	DD	imagerel $LN59@ParseShade+455
	DD	imagerel $chain$1$ParseShader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ParseShader DD imagerel $LN59@ParseShade+455
	DD	imagerel $LN59@ParseShade+517
	DD	imagerel $chain$2$ParseShader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$pressing DD imagerel $LN4@pressing
	DD	imagerel $LN4@pressing+26
	DD	imagerel $unwind$pressing
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ThrowError DD imagerel ThrowError
	DD	imagerel ThrowError+30
	DD	imagerel $unwind$ThrowError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deltaTime DD imagerel $LN4@deltaTime
	DD	imagerel $LN4@deltaTime+76
	DD	imagerel $unwind$deltaTime
;	COMDAT xdata
xdata	SEGMENT
$unwind$deltaTime DQ 00000420400010401r		; 3.58617e-310
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ThrowError DQ 00000420400010401r	; 3.58617e-310
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pressing DQ 00000420400010401r		; 3.58617e-310
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ParseShader DD 021H
	DD	imagerel $LN59@ParseShade
	DD	imagerel $LN59@ParseShade+211
	DD	imagerel $unwind$ParseShader
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ParseShader DQ 00019541700041721r	; 3.52236e-308
	DD	0183408H
	DD	imagerel $LN59@ParseShade
	DD	imagerel $LN59@ParseShade+211
	DD	imagerel $unwind$ParseShader
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ParseShader DQ 0001b741300072519r	; 3.81787e-308
	DQ	000160113001a6413r		; 3.06006e-308
	DD	0e00cH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$CompileShader DD 021H
	DD	imagerel CompileShader
	DD	imagerel CompileShader+124
	DD	imagerel $unwind$CompileShader
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$CompileShader DQ 00008741700061721r	; 1.1756e-308
	DQ	0000e5405000f640fr		; 1.99258e-308
	DD	imagerel CompileShader
	DD	imagerel CompileShader+124
	DD	imagerel $unwind$CompileShader
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CompileShader DQ 0e004820800031719r	; -3.43708e+154
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CreateShader DQ 0000b640f00061e19r	; 1.58409e-308
	DQ	0700b520f000a340fr		; 5.30195e+231
	DD	imagerel __GSHandlerCheck
	DD	028H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ChangeFullScreen DQ 00000820400010401r	; 7.06285e-310
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SetFullScreen DQ 00000820400010401r	; 7.06285e-310
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$OpenFileUnsafe DQ 0001f010a00021c19r	; 4.31165e-308
	DD	imagerel __GSHandlerCheck
	DD	0e0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$main DD 021H
	DD	imagerel $LN95+442
	DD	imagerel $LN95+567
	DD	imagerel $chain$1$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$main DD 040d21H
	DD	06780dH
	DD	076805H
	DD	imagerel $LN95+442
	DD	imagerel $LN95+567
	DD	imagerel $chain$1$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$main DD 021H
	DD	imagerel $LN95
	DD	imagerel $LN95+30
	DD	imagerel $unwind$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$main DD 020821H
	DD	0127408H
	DD	imagerel $LN95
	DD	imagerel $LN95+30
	DD	imagerel $unwind$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	041e19H
	DD	05880fH
	DD	03002f209H
	DD	imagerel __GSHandlerCheck
	DD	048H
; Function compile flags: /Ogtpy
; File C:\Users\drago\source\repos\cGame\cGame\main.c
;	COMDAT main
_TEXT	SEGMENT
hintTargets$1 = 48
textureSlots$2 = 64
frequencyHolder$3 = 64
__$ArrayPad$ = 72
main	PROC						; COMDAT

; 215  : {

$LN95:
  00000	40 53		 push	 rbx
  00002	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00009	44 0f 29 44 24
	50		 movaps	 XMMWORD PTR [rsp+80], xmm8
  0000f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00016	48 33 c4	 xor	 rax, rsp
  00019	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001e	48 89 bc 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rdi

; 216  : 	stbi_set_flip_vertically_on_load(1);

  00026	e8 00 00 00 00	 call	 stbi_set_flip_vertically_on_load

; 217  : 	srand(time(NULL));

  0002b	e8 00 00 00 00	 call	 time
  00030	48 8b c8	 mov	 rcx, rax
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_srand

; 218  : 	rand();

  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand

; 219  : 	{
; 220  : 		LARGE_INTEGER frequencyHolder;
; 221  : 		QueryPerformanceFrequency(&frequencyHolder);

  0003f	48 8d 4c 24 40	 lea	 rcx, QWORD PTR frequencyHolder$3[rsp]
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceFrequency

; 222  : 		frequency = frequencyHolder.QuadPart;

  0004a	48 8b 44 24 40	 mov	 rax, QWORD PTR frequencyHolder$3[rsp]

; 223  : 		QueryPerformanceCounter(&pTime);

  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pTime
  00056	48 89 05 00 00
	00 00		 mov	 QWORD PTR frequency, rax
  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 224  : 		char* save = ReadSaveFile("saves/save 1.txt", SAVE_FILE_MAX_LINE_CHAR);

  00063	e8 00 00 00 00	 call	 ReadSaveFile
  00068	48 8b d8	 mov	 rbx, rax

; 225  : 		float deltaT = deltaTime();

  0006b	e8 00 00 00 00	 call	 deltaTime

; 226  : 		printf("\nLoading save file took %f seconds.\n", deltaT);

  00070	0f 57 c9	 xorps	 xmm1, xmm1
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@JPPIGLOJ@?6Loading?5save?5file?5took?5?$CFf?5seco@
  0007a	f3 0f 5a c8	 cvtss2sd xmm1, xmm0
  0007e	66 48 0f 7e ca	 movq	 rdx, xmm1
  00083	e8 00 00 00 00	 call	 printf

; 227  : 		free(save);

  00088	48 8b cb	 mov	 rcx, rbx
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 228  : 		GLenum hintTargets[4] = {

  00091	c7 44 24 30 52
	0c 00 00	 mov	 DWORD PTR hintTargets$1[rsp], 3154 ; 00000c52H
  00099	48 8d 5c 24 30	 lea	 rbx, QWORD PTR hintTargets$1[rsp]
  0009e	c7 44 24 34 53
	0c 00 00	 mov	 DWORD PTR hintTargets$1[rsp+4], 3155 ; 00000c53H
  000a6	bf 04 00 00 00	 mov	 edi, 4
  000ab	c7 44 24 38 ef
	84 00 00	 mov	 DWORD PTR hintTargets$1[rsp+8], 34031 ; 000084efH
  000b3	c7 44 24 3c 8b
	8b 00 00	 mov	 DWORD PTR hintTargets$1[rsp+12], 35723 ; 00008b8bH
  000bb	0f 1f 44 00 00	 npad	 5
$LL4@main:

; 229  : 			GL_LINE_SMOOTH_HINT,
; 230  : 			GL_POLYGON_SMOOTH_HINT,
; 231  : 			GL_TEXTURE_COMPRESSION_HINT,
; 232  : 			GL_FRAGMENT_SHADER_DERIVATIVE_HINT,
; 233  : 		};
; 234  : 		ushort targetsLen = lengthOf(hintTargets), i;
; 235  : 		for (i = 0; i < targetsLen; i++) glHint(hintTargets[i], GL_FASTEST);

  000c0	8b 0b		 mov	 ecx, DWORD PTR [rbx]
  000c2	ba 01 11 00 00	 mov	 edx, 4353		; 00001101H
  000c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glHint
  000cd	48 8d 5b 04	 lea	 rbx, QWORD PTR [rbx+4]
  000d1	48 83 ef 01	 sub	 rdi, 1
  000d5	75 e9		 jne	 SHORT $LL4@main
  000d7	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR [rsp+144]

; 236  : 	}
; 237  : 	glfwInit();

  000df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwInit

; 238  : 	monitor = glfwGetPrimaryMonitor();

  000e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwGetPrimaryMonitor
  000eb	48 89 05 00 00
	00 00		 mov	 QWORD PTR monitor, rax

; 239  : 	mode = glfwGetVideoMode(glfwGetPrimaryMonitor());

  000f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwGetPrimaryMonitor
  000f8	48 8b c8	 mov	 rcx, rax
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwGetVideoMode

; 240  : 	//glfwWindowHint(GLFW_MAXIMIZED, true);
; 241  : 	glfwWindowHint(GLFW_CENTER_CURSOR, GLFW_FALSE);

  00101	33 d2		 xor	 edx, edx
  00103	b9 09 00 02 00	 mov	 ecx, 131081		; 00020009H
  00108	48 89 05 00 00
	00 00		 mov	 QWORD PTR mode, rax
  0010f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwWindowHint

; 242  : 	{
; 243  : 		const char* title = "Hello, my name is Kevin, I have Changnesia.";
; 244  : 		window = glfwCreateWindow(mode->width, mode->height, title, NULL, NULL);//need to startup with null for monitor parameter because otherwise window takes longer to start

  00115	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR mode
  0011c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CM@MCNGPNLE@Hello?0?5my?5name?5is?5Kevin?0?5I?5have@
  00123	45 33 c9	 xor	 r9d, r9d
  00126	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0012f	8b 51 04	 mov	 edx, DWORD PTR [rcx+4]
  00132	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00134	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwCreateWindow

; 245  : 	}
; 246  : 	glfwMakeContextCurrent(window);

  0013a	48 8b c8	 mov	 rcx, rax
  0013d	48 89 05 00 00
	00 00		 mov	 QWORD PTR window, rax
  00144	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwMakeContextCurrent

; 247  : 	SetFullScreen(false);

  0014a	e8 00 00 00 00	 call	 SetFullScreen

; 248  : 	refreshRate = (float)mode->refreshRate;

  0014f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00157	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR mode

; 249  : 	cumDT = (pastDT = frameTime = 1.0f / refreshRate * timeScale) * NO_AVG_DT_FRAMES;

  0015e	f3 44 0f 10 05
	00 00 00 00	 movss	 xmm8, DWORD PTR __real@41200000
  00167	66 0f 6e 40 14	 movd	 xmm0, DWORD PTR [rax+20]
  0016c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0016f	f3 0f 5e c8	 divss	 xmm1, xmm0
  00173	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR refreshRate, xmm0
  0017b	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR timeScale
  00183	0f 28 c1	 movaps	 xmm0, xmm1
  00186	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR frameTime, xmm1
  0018e	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR pastDT, xmm1
  00196	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@447a0000
  0019e	f3 41 0f 59 c0	 mulss	 xmm0, xmm8

; 250  : 	const DWORD longFrameWaitTime = (DWORD)(frameTime * 1000.0f) * RESUME_LATENCY;

  001a3	f3 48 0f 2c d9	 cvttss2si rbx, xmm1
  001a8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR cumDT, xmm0

; 251  : 	if (glewInit() != GLEW_OK) ThrowError("your program is broken");

  001b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glewInit
  001b6	85 c0		 test	 eax, eax
  001b8	74 0c		 je	 SHORT $LN7@main
  001ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@PCNKIOJF@your?5program?5is?5broken@
  001c1	e8 00 00 00 00	 call	 ThrowError
$LN7@main:

; 252  : 	{
; 253  : 		GLint textureSlots;
; 254  : 		glGetIntegerv(GL_MAX_TEXTURE_IMAGE_UNITS, &textureSlots);

  001c6	48 8d 54 24 40	 lea	 rdx, QWORD PTR textureSlots$2[rsp]
  001cb	b9 72 88 00 00	 mov	 ecx, 34930		; 00008872H
  001d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glGetIntegerv

; 255  : 		printf("%d texture slots are available on this machine.\n", textureSlots);

  001d6	8b 54 24 40	 mov	 edx, DWORD PTR textureSlots$2[rsp]
  001da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@OIADNLIG@?$CFd?5texture?5slots?5are?5available?5@
  001e1	e8 00 00 00 00	 call	 printf

; 256  : 	}
; 257  : 	PhysicsInit();

  001e6	e8 00 00 00 00	 call	 PhysicsInit

; 258  : 	EntityInitialize();

  001eb	e8 00 00 00 00	 call	 EntityInitialize

; 259  : 	MeshInitialize();

  001f0	e8 00 00 00 00	 call	 MeshInitialize

; 260  : 	TerrainInit();

  001f5	e8 00 00 00 00	 call	 TerrainInit

; 261  : 	SceneInit();

  001fa	e8 00 00 00 00	 call	 SceneInit

; 262  : 	PlayerInit();

  001ff	e8 00 00 00 00	 call	 PlayerInit

; 263  : 	MeshStartup();

  00204	e8 00 00 00 00	 call	 MeshStartup

; 264  : 	glEnable(GL_BLEND);

  00209	b9 e2 0b 00 00	 mov	 ecx, 3042		; 00000be2H
  0020e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glEnable

; 265  : 	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

  00214	ba 03 03 00 00	 mov	 edx, 771		; 00000303H
  00219	8d 4a ff	 lea	 ecx, QWORD PTR [rdx-1]
  0021c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glBlendFunc

; 266  : 	//glUseProgram(0);
; 267  : 	//InitGPUTimeCheck();
; 268  : 	//printf("cellsize is (%f, %f).\n", cellSize.x, cellSize.y);
; 269  : 	while (!glfwWindowShouldClose(window)) {

  00222	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR window
  00229	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwWindowShouldClose
  0022f	85 c0		 test	 eax, eax
  00231	0f 85 33 05 00
	00		 jne	 $LN52@main
  00237	0f 29 74 24 70	 movaps	 XMMWORD PTR [rsp+112], xmm6
  0023c	0f 57 f6	 xorps	 xmm6, xmm6
  0023f	0f 29 7c 24 60	 movaps	 XMMWORD PTR [rsp+96], xmm7
  00244	f3 0f 10 3d 00
	00 00 00	 movss	 xmm7, DWORD PTR __real@3e4ccccd
  0024c	0f 1f 40 00	 npad	 4
$LL5@main:

; 270  : 		//StartGPUTimeCheck();
; 271  : #ifndef RUN_IN_BACKGROUND
; 272  : 		if (!glfwGetWindowAttrib(window, GLFW_FOCUSED)) Idle(continue);

  00250	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR window
  00257	ba 01 00 02 00	 mov	 edx, 131073		; 00020001H
  0025c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwGetWindowAttrib
  00262	85 c0		 test	 eax, eax
  00264	75 1a		 jne	 SHORT $LN8@main
  00266	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwPollEvents
  0026c	8b cb		 mov	 ecx, ebx
  0026e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep
  00274	c6 05 00 00 00
	00 01		 mov	 BYTE PTR notFocussed, 1
  0027b	e9 b1 04 00 00	 jmp	 $LN47@main
$LN8@main:

; 273  : #endif
; 274  : 		if (!timeScale) Idle(\

  00280	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR timeScale
  00288	0f 2e c6	 ucomiss xmm0, xmm6
  0028b	0f 8a 9f 00 00
	00		 jp	 $LN9@main
  00291	0f 85 99 00 00
	00		 jne	 $LN9@main
  00297	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwPollEvents
  0029d	8b cb		 mov	 ecx, ebx
  0029f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep
  002a5	b9 51 00 00 00	 mov	 ecx, 81			; 00000051H
  002aa	c6 05 00 00 00
	00 01		 mov	 BYTE PTR notFocussed, 1
  002b1	e8 00 00 00 00	 call	 pressing
  002b6	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  002bb	88 05 51 00 00
	00		 mov	 BYTE PTR pressingKey+81, al
  002c1	e8 00 00 00 00	 call	 pressing
  002c6	b9 a3 00 00 00	 mov	 ecx, 163		; 000000a3H
  002cb	88 05 a2 00 00
	00		 mov	 BYTE PTR pressingKey+162, al
  002d1	e8 00 00 00 00	 call	 pressing
  002d6	80 3d 51 00 00
	00 00		 cmp	 BYTE PTR pressingKey+81, 0
  002dd	88 05 a3 00 00
	00		 mov	 BYTE PTR pressingKey+163, al
  002e3	74 16		 je	 SHORT $LN10@main
  002e5	80 3d 51 00 00
	00 00		 cmp	 BYTE PTR pressedKey+81, 0
  002ec	75 0d		 jne	 SHORT $LN10@main
  002ee	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR pressedControl, 0
  002f5	0f 85 65 04 00
	00		 jne	 $LN93@main
$LN10@main:
  002fb	b9 51 00 00 00	 mov	 ecx, 81			; 00000051H
  00300	e8 00 00 00 00	 call	 pressing
  00305	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  0030a	88 05 51 00 00
	00		 mov	 BYTE PTR pressedKey+81, al
  00310	e8 00 00 00 00	 call	 pressing
  00315	b9 a3 00 00 00	 mov	 ecx, 163		; 000000a3H
  0031a	88 05 a2 00 00
	00		 mov	 BYTE PTR pressedKey+162, al
  00320	e8 00 00 00 00	 call	 pressing
  00325	88 05 a3 00 00
	00		 mov	 BYTE PTR pressedKey+163, al
  0032b	e9 b3 02 00 00	 jmp	 $cont$96
$LN9@main:

; 275  : 			CheckQuitKeyStatus();\
; 276  : 			CheckQuitStatus();\
; 277  : 			CheckQuitPastKey();\
; 278  : 			goto cont
; 279  : 		);
; 280  : 		if (notFocussed) {

  00330	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR notFocussed, 0
  00337	74 14		 je	 SHORT $LN11@main

; 281  : 			QueryPerformanceCounter(&pTime);

  00339	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pTime
  00340	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 282  : 			notFocussed = false;

  00346	c6 05 00 00 00
	00 00		 mov	 BYTE PTR notFocussed, 0
$LN11@main:

; 283  : 		}
; 284  : 		//glUseProgram(shader);
; 285  : 		//glBindVertexArray(vao);
; 286  : 		//glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);
; 287  : 		glClear(GL_COLOR_BUFFER_BIT);

  0034d	b9 00 40 00 00	 mov	 ecx, 16384		; 00004000H
  00352	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glClear

; 288  : 		glDrawElements(GL_TRIANGLES, curIndiciesLoc, GL_UNSIGNED_INT, NULL);

  00358	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR curIndiciesLoc
  0035e	45 33 c9	 xor	 r9d, r9d
  00361	41 b8 05 14 00
	00		 mov	 r8d, 5125		; 00001405H
  00367	41 8d 49 04	 lea	 ecx, QWORD PTR [r9+4]
  0036b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glDrawElements

; 289  : 		glfwSwapBuffers(window);

  00371	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR window
  00378	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwSwapBuffers

; 290  : 		glfwPollEvents();

  0037e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwPollEvents

; 291  : 		SetKey(K_KEY);

  00384	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  00389	e8 00 00 00 00	 call	 pressing

; 292  : 		SetKey(J_KEY);

  0038e	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00393	88 05 4b 00 00
	00		 mov	 BYTE PTR pressingKey+75, al
  00399	e8 00 00 00 00	 call	 pressing

; 293  : 		SetKey(SPACE_KEY);

  0039e	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  003a3	88 05 4a 00 00
	00		 mov	 BYTE PTR pressingKey+74, al
  003a9	e8 00 00 00 00	 call	 pressing

; 294  : 		SetKey(R_KEY);

  003ae	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  003b3	88 05 20 00 00
	00		 mov	 BYTE PTR pressingKey+32, al
  003b9	e8 00 00 00 00	 call	 pressing

; 295  : 		SetKey(VK_RETURN);

  003be	b9 0d 00 00 00	 mov	 ecx, 13
  003c3	88 05 52 00 00
	00		 mov	 BYTE PTR pressingKey+82, al
  003c9	e8 00 00 00 00	 call	 pressing

; 296  : 		SetKey(VK_MENU);

  003ce	b9 12 00 00 00	 mov	 ecx, 18
  003d3	88 05 0d 00 00
	00		 mov	 BYTE PTR pressingKey+13, al
  003d9	e8 00 00 00 00	 call	 pressing

; 297  : 		CheckQuitKeyStatus();

  003de	b9 51 00 00 00	 mov	 ecx, 81			; 00000051H
  003e3	88 05 12 00 00
	00		 mov	 BYTE PTR pressingKey+18, al
  003e9	e8 00 00 00 00	 call	 pressing
  003ee	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  003f3	88 05 51 00 00
	00		 mov	 BYTE PTR pressingKey+81, al
  003f9	e8 00 00 00 00	 call	 pressing
  003fe	b9 a3 00 00 00	 mov	 ecx, 163		; 000000a3H
  00403	88 05 a2 00 00
	00		 mov	 BYTE PTR pressingKey+162, al
  00409	e8 00 00 00 00	 call	 pressing

; 298  : 		pressingKey[UP_ARROW] = pressing(UP_ARROW) || pressing(W_KEY);

  0040e	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  00413	88 05 a3 00 00
	00		 mov	 BYTE PTR pressingKey+163, al
  00419	e8 00 00 00 00	 call	 pressing
  0041e	84 c0		 test	 al, al
  00420	75 0e		 jne	 SHORT $LN24@main
  00422	b9 57 00 00 00	 mov	 ecx, 87			; 00000057H
  00427	e8 00 00 00 00	 call	 pressing
  0042c	84 c0		 test	 al, al
  0042e	74 02		 je	 SHORT $LN25@main
$LN24@main:
  00430	b0 01		 mov	 al, 1
$LN25@main:

; 299  : 		pressingKey[D_KEY] = pressing(D_KEY) || pressing(RIGHT_ARROW);

  00432	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00437	88 05 26 00 00
	00		 mov	 BYTE PTR pressingKey+38, al
  0043d	e8 00 00 00 00	 call	 pressing
  00442	84 c0		 test	 al, al
  00444	75 0e		 jne	 SHORT $LN26@main
  00446	b9 27 00 00 00	 mov	 ecx, 39			; 00000027H
  0044b	e8 00 00 00 00	 call	 pressing
  00450	84 c0		 test	 al, al
  00452	74 02		 je	 SHORT $LN27@main
$LN26@main:
  00454	b0 01		 mov	 al, 1
$LN27@main:

; 300  : 		pressingKey[A_KEY] = pressing(A_KEY) || pressing(LEFT_ARROW);

  00456	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  0045b	88 05 44 00 00
	00		 mov	 BYTE PTR pressingKey+68, al
  00461	e8 00 00 00 00	 call	 pressing
  00466	84 c0		 test	 al, al
  00468	75 0e		 jne	 SHORT $LN28@main
  0046a	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  0046f	e8 00 00 00 00	 call	 pressing
  00474	84 c0		 test	 al, al
  00476	74 02		 je	 SHORT $LN29@main
$LN28@main:
  00478	b0 01		 mov	 al, 1
$LN29@main:

; 301  : 		pressingKey[VK_LSHIFT] = pressing(VK_LSHIFT) || pressing(VK_RSHIFT);

  0047a	b9 a0 00 00 00	 mov	 ecx, 160		; 000000a0H
  0047f	88 05 41 00 00
	00		 mov	 BYTE PTR pressingKey+65, al
  00485	e8 00 00 00 00	 call	 pressing
  0048a	84 c0		 test	 al, al
  0048c	75 0e		 jne	 SHORT $LN30@main
  0048e	b9 a1 00 00 00	 mov	 ecx, 161		; 000000a1H
  00493	e8 00 00 00 00	 call	 pressing
  00498	84 c0		 test	 al, al
  0049a	74 02		 je	 SHORT $LN31@main
$LN30@main:
  0049c	b0 01		 mov	 al, 1
$LN31@main:
  0049e	88 05 a0 00 00
	00		 mov	 BYTE PTR pressingKey+160, al

; 302  : 		startingFrame = (float)false;
; 303  : 		cumDT += (curDT = deltaTime()) - pastDT;

  004a4	e8 00 00 00 00	 call	 deltaTime
  004a9	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR cumDT
  004b1	0f 28 c8	 movaps	 xmm1, xmm0
  004b4	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR pastDT
  004bc	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR curDT, xmm0

; 304  : 		pastDT = curDT;

  004c4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR pastDT, xmm0
  004cc	f3 0f 58 d1	 addss	 xmm2, xmm1
  004d0	f3 0f 11 15 00
	00 00 00	 movss	 DWORD PTR cumDT, xmm2
  004d8	f3 41 0f 5e d0	 divss	 xmm2, xmm8

; 305  : 		avgDT = cumDT / (float)NO_AVG_DT_FRAMES;

  004dd	f3 0f 11 15 00
	00 00 00	 movss	 DWORD PTR avgDT, xmm2

; 306  : 		//printf("%d\n", rand());
; 307  : 		PlayerUpdate();

  004e5	e8 00 00 00 00	 call	 PlayerUpdate

; 308  : 		SceneUpdate();

  004ea	e8 00 00 00 00	 call	 SceneUpdate

; 309  : 		if (entityHead) UpdateEntities();//needs to be called AFTER every update which could have a regular transformation in it.

  004ef	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR entityHead, 0
  004f7	74 05		 je	 SHORT $LN12@main
  004f9	e8 00 00 00 00	 call	 UpdateEntities
$LN12@main:

; 310  : 		if (squishHead) UpdateSquishables();//needs to be called AFTER every update which could have a squish transformation in it.

  004fe	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR squishHead, 0
  00506	74 05		 je	 SHORT $LN13@main
  00508	e8 00 00 00 00	 call	 UpdateSquishables
$LN13@main:

; 311  : 		if (sliderHead) UpdateSliders();//needs to be called AFTER every update which could have a slider transformation in it.

  0050d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR sliderHead, 0
  00515	74 05		 je	 SHORT $LN14@main
  00517	e8 00 00 00 00	 call	 UpdateSliders
$LN14@main:

; 312  : 		/*sprintf(temp, "%f", deltaTime());
; 313  : 		strcat(temp, "\n");
; 314  : 		print(temp);
; 315  : 		temp[0] = '\0';*/
; 316  : 		//printf("deltatime is %f\n", deltaTime());
; 317  : 		if (fullScreenET > .2f)

  0051c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR fullScreenET
  00524	0f 2f c7	 comiss	 xmm0, xmm7
  00527	76 35		 jbe	 SHORT $LN15@main

; 318  : 		{
; 319  : 			if (IsHoldKey1PressKey2(VK_MENU, VK_RETURN)) {

  00529	80 3d 12 00 00
	00 00		 cmp	 BYTE PTR pressingKey+18, 0
  00530	74 45		 je	 SHORT $LN16@main
  00532	80 3d 12 00 00
	00 00		 cmp	 BYTE PTR pressedKey+18, 0
  00539	74 3c		 je	 SHORT $LN16@main
  0053b	80 3d 0d 00 00
	00 00		 cmp	 BYTE PTR pressingKey+13, 0
  00542	74 33		 je	 SHORT $LN16@main
  00544	80 3d 0d 00 00
	00 00		 cmp	 BYTE PTR pressedKey+13, 0
  0054b	75 2a		 jne	 SHORT $LN16@main

; 320  : 				ChangeFullScreen();

  0054d	e8 00 00 00 00	 call	 ChangeFullScreen

; 321  : 				fullScreenET = 0;

  00552	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR fullScreenET, 0

; 322  : 			}
; 323  : 		}

  0055c	eb 19		 jmp	 SHORT $LN16@main
$LN15@main:

; 324  : 		else fullScreenET += deltaTime();

  0055e	e8 00 00 00 00	 call	 deltaTime
  00563	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR fullScreenET
  0056b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0056f	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR fullScreenET, xmm1
$LN16@main:

; 325  : 		if (shouldMoveCam) {

  00577	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR shouldMoveCam, 0
  0057e	74 26		 je	 SHORT $LN18@main

; 326  : 			shouldMoveCam = false;
; 327  : 			glUniform2f(camPosLoc, camPosition.x, camPosition.y);

  00580	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewUniform2f
  00587	f3 0f 10 15 04
	00 00 00	 movss	 xmm2, DWORD PTR camPosition+4
  0058f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR camPosition
  00597	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR camPosLoc
  0059d	c6 05 00 00 00
	00 00		 mov	 BYTE PTR shouldMoveCam, 0
  005a4	ff 10		 call	 QWORD PTR [rax]
$LN18@main:

; 328  : 		}
; 329  : 		if (shouldDraw) {

  005a6	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR shouldDraw, 0
  005ad	74 28		 je	 SHORT $LN19@main

; 330  : 			glBufferData(GL_ARRAY_BUFFER, verticesSize, vertices, GL_DYNAMIC_DRAW);

  005af	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewBufferData
  005b6	41 b9 e8 88 00
	00		 mov	 r9d, 35048		; 000088e8H
  005bc	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR vertices
  005c3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR verticesSize
  005ca	41 8d 49 aa	 lea	 ecx, QWORD PTR [r9-86]
  005ce	ff 10		 call	 QWORD PTR [rax]

; 331  : 			shouldDraw = false;

  005d0	c6 05 00 00 00
	00 00		 mov	 BYTE PTR shouldDraw, 0
$LN19@main:

; 332  : 		}
; 333  : 		//Sleep(frameWaitTime);
; 334  : 		/*EndGPUTimeCheck();
; 335  : 		printf("took %f seconds\n", fabsf((float)(result * 1000000 / frequency)) / 1000000.0f);*/
; 336  : 		glCheckError();

  005d7	e8 00 00 00 00	 call	 glCheckError
  005dc	0f b6 05 a3 00
	00 00		 movzx	 eax, BYTE PTR pressedKey+163
$cont$96:

; 337  : 	cont:
; 338  : 		pressedControl = PressingN_Pressed(VK_LCONTROL) || PressingN_Pressed(VK_RCONTROL);

  005e3	80 3d a2 00 00
	00 00		 cmp	 BYTE PTR pressingKey+162, 0
  005ea	74 09		 je	 SHORT $LN32@main
  005ec	80 3d a2 00 00
	00 00		 cmp	 BYTE PTR pressedKey+162, 0
  005f3	75 0d		 jne	 SHORT $LN34@main
$LN32@main:
  005f5	80 3d a3 00 00
	00 00		 cmp	 BYTE PTR pressingKey+163, 0
  005fc	74 08		 je	 SHORT $LN33@main
  005fe	84 c0		 test	 al, al
  00600	74 04		 je	 SHORT $LN33@main
$LN34@main:
  00602	b0 01		 mov	 al, 1
  00604	eb 02		 jmp	 SHORT $LN35@main
$LN33@main:
  00606	32 c0		 xor	 al, al
$LN35@main:

; 339  : 		if (PressingN_NotPressed(R_KEY) && pressedControl) {

  00608	80 3d 52 00 00
	00 00		 cmp	 BYTE PTR pressingKey+82, 0
  0060f	88 05 00 00 00
	00		 mov	 BYTE PTR pressedControl, al
  00615	74 11		 je	 SHORT $LN20@main
  00617	80 3d 52 00 00
	00 00		 cmp	 BYTE PTR pressedKey+82, 0
  0061e	75 08		 jne	 SHORT $LN20@main
  00620	84 c0		 test	 al, al
  00622	0f 85 20 01 00
	00		 jne	 $LN44@main
$LN20@main:

; 342  : 			break;
; 343  : 		}
; 344  : 		if (PressingN_NotPressed(Q_KEY) && pressedControl) break;

  00628	80 3d 51 00 00
	00 00		 cmp	 BYTE PTR pressingKey+81, 0
  0062f	74 11		 je	 SHORT $LN21@main
  00631	80 3d 51 00 00
	00 00		 cmp	 BYTE PTR pressedKey+81, 0
  00638	75 08		 jne	 SHORT $LN21@main
  0063a	84 c0		 test	 al, al
  0063c	0f 85 1e 01 00
	00		 jne	 $LN93@main
$LN21@main:

; 345  : 		if (pressing(VK_ESCAPE) && !pressedKey[VK_ESCAPE]) {

  00642	b9 1b 00 00 00	 mov	 ecx, 27
  00647	e8 00 00 00 00	 call	 pressing
  0064c	84 c0		 test	 al, al
  0064e	74 30		 je	 SHORT $LN22@main
  00650	80 3d 1b 00 00
	00 00		 cmp	 BYTE PTR pressedKey+27, 0
  00657	75 27		 jne	 SHORT $LN22@main

; 346  : 			PauseGame();

  00659	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR timeScale
  00661	0f 2e c6	 ucomiss xmm0, xmm6
  00664	7a 09		 jp	 SHORT $LN36@main
  00666	75 07		 jne	 SHORT $LN36@main
  00668	b8 01 00 00 00	 mov	 eax, 1
  0066d	eb 02		 jmp	 SHORT $LN37@main
$LN36@main:
  0066f	33 c0		 xor	 eax, eax
$LN37@main:
  00671	66 0f 6e c0	 movd	 xmm0, eax
  00675	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00678	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR timeScale, xmm0
$LN22@main:

; 347  : 		}
; 348  : 		SetPastKey(R_KEY);

  00680	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00685	e8 00 00 00 00	 call	 pressing

; 349  : 		SetPastKey(SPACE_KEY);

  0068a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0068f	88 05 52 00 00
	00		 mov	 BYTE PTR pressedKey+82, al
  00695	e8 00 00 00 00	 call	 pressing

; 350  : 		SetPastKey(VK_ESCAPE);

  0069a	b9 1b 00 00 00	 mov	 ecx, 27
  0069f	88 05 20 00 00
	00		 mov	 BYTE PTR pressedKey+32, al
  006a5	e8 00 00 00 00	 call	 pressing

; 351  : 		SetPastKey(VK_MENU);

  006aa	b9 12 00 00 00	 mov	 ecx, 18
  006af	88 05 1b 00 00
	00		 mov	 BYTE PTR pressedKey+27, al
  006b5	e8 00 00 00 00	 call	 pressing

; 352  : 		SetPastKey(VK_RETURN);

  006ba	b9 0d 00 00 00	 mov	 ecx, 13
  006bf	88 05 12 00 00
	00		 mov	 BYTE PTR pressedKey+18, al
  006c5	e8 00 00 00 00	 call	 pressing

; 353  : 		pressedKey[UP_ARROW] = pressing(UP_ARROW) || pressing(W_KEY);

  006ca	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  006cf	88 05 0d 00 00
	00		 mov	 BYTE PTR pressedKey+13, al
  006d5	e8 00 00 00 00	 call	 pressing
  006da	84 c0		 test	 al, al
  006dc	75 0e		 jne	 SHORT $LN38@main
  006de	b9 57 00 00 00	 mov	 ecx, 87			; 00000057H
  006e3	e8 00 00 00 00	 call	 pressing
  006e8	84 c0		 test	 al, al
  006ea	74 02		 je	 SHORT $LN39@main
$LN38@main:
  006ec	b0 01		 mov	 al, 1
$LN39@main:

; 354  : 		CheckQuitPastKey();

  006ee	b9 51 00 00 00	 mov	 ecx, 81			; 00000051H
  006f3	88 05 26 00 00
	00		 mov	 BYTE PTR pressedKey+38, al
  006f9	e8 00 00 00 00	 call	 pressing
  006fe	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  00703	88 05 51 00 00
	00		 mov	 BYTE PTR pressedKey+81, al
  00709	e8 00 00 00 00	 call	 pressing
  0070e	b9 a3 00 00 00	 mov	 ecx, 163		; 000000a3H
  00713	88 05 a2 00 00
	00		 mov	 BYTE PTR pressedKey+162, al
  00719	e8 00 00 00 00	 call	 pressing

; 355  : 		QueryPerformanceCounter(&pTime);

  0071e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pTime
  00725	88 05 a3 00 00
	00		 mov	 BYTE PTR pressedKey+163, al
  0072b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter
$LN47@main:

; 266  : 	//glUseProgram(0);
; 267  : 	//InitGPUTimeCheck();
; 268  : 	//printf("cellsize is (%f, %f).\n", cellSize.x, cellSize.y);
; 269  : 	while (!glfwWindowShouldClose(window)) {

  00731	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR window
  00738	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwWindowShouldClose
  0073e	85 c0		 test	 eax, eax
  00740	0f 84 0a fb ff
	ff		 je	 $LL5@main
  00746	eb 18		 jmp	 SHORT $LN93@main
$LN44@main:

; 340  : 			OpenFileUnsafe(L"../x64/Release/cGame.exe");//no need for error checking if i just let this silently cause a bug, then i can execute both directories faster. Also, this is a billion times faster than a system call.

  00748	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@DMAGFLJM@?$AA?4?$AA?4?$AA?1?$AAx?$AA6?$AA4?$AA?1?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?1@
  0074f	e8 00 00 00 00	 call	 OpenFileUnsafe

; 341  : 			OpenFileUnsafe(L"cGame.exe");

  00754	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@BFMNEOPM@?$AAc?$AAG?$AAa?$AAm?$AAe?$AA?4?$AAe?$AAx?$AAe@
  0075b	e8 00 00 00 00	 call	 OpenFileUnsafe
$LN93@main:
  00760	0f 28 74 24 70	 movaps	 xmm6, XMMWORD PTR [rsp+112]
  00765	0f 28 7c 24 60	 movaps	 xmm7, XMMWORD PTR [rsp+96]
$LN52@main:

; 356  : 	}
; 357  : 	glDeleteProgram(shader);

  0076a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp___glewDeleteProgram
  00771	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR shader
  00777	ff 10		 call	 QWORD PTR [rax]

; 358  : 	glfwTerminate();

  00779	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glfwTerminate

; 359  : 	exit(0);

  0077f	33 c9		 xor	 ecx, ecx
  00781	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  00787	cc		 int	 3
$LN94@main:
main	ENDP
_TEXT	ENDS
END
